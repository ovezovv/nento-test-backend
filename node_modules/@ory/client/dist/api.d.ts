/**
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers.
 *
 * The version of the OpenAPI document: v0.2.0-alpha.60
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface AcceptOAuth2ConsentRequest
 */
export interface AcceptOAuth2ConsentRequest {
    /**
     *
     * @type {Array<string>}
     * @memberof AcceptOAuth2ConsentRequest
     */
    'grant_access_token_audience'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof AcceptOAuth2ConsentRequest
     */
    'grant_scope'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof AcceptOAuth2ConsentRequest
     */
    'handled_at'?: string;
    /**
     * Remember, if set to true, tells ORY Hydra to remember this consent authorization and reuse it if the same client asks the same user for the same, or a subset of, scope.
     * @type {boolean}
     * @memberof AcceptOAuth2ConsentRequest
     */
    'remember'?: boolean;
    /**
     * RememberFor sets how long the consent authorization should be remembered for in seconds. If set to `0`, the authorization will be remembered indefinitely.
     * @type {number}
     * @memberof AcceptOAuth2ConsentRequest
     */
    'remember_for'?: number;
    /**
     *
     * @type {AcceptOAuth2ConsentRequestSession}
     * @memberof AcceptOAuth2ConsentRequest
     */
    'session'?: AcceptOAuth2ConsentRequestSession;
}
/**
 *
 * @export
 * @interface AcceptOAuth2ConsentRequestSession
 */
export interface AcceptOAuth2ConsentRequestSession {
    /**
     * AccessToken sets session data for the access and refresh token, as well as any future tokens issued by the refresh grant. Keep in mind that this data will be available to anyone performing OAuth 2.0 Challenge Introspection. If only your services can perform OAuth 2.0 Challenge Introspection, this is usually fine. But if third parties can access that endpoint as well, sensitive data from the session might be exposed to them. Use with care!
     * @type {any}
     * @memberof AcceptOAuth2ConsentRequestSession
     */
    'access_token'?: any;
    /**
     * IDToken sets session data for the OpenID Connect ID token. Keep in mind that the session\'id payloads are readable by anyone that has access to the ID Challenge. Use with care!
     * @type {any}
     * @memberof AcceptOAuth2ConsentRequestSession
     */
    'id_token'?: any;
}
/**
 *
 * @export
 * @interface AcceptOAuth2LoginRequest
 */
export interface AcceptOAuth2LoginRequest {
    /**
     * ACR sets the Authentication AuthorizationContext Class Reference value for this authentication session. You can use it to express that, for example, a user authenticated using two factor authentication.
     * @type {string}
     * @memberof AcceptOAuth2LoginRequest
     */
    'acr'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof AcceptOAuth2LoginRequest
     */
    'amr'?: Array<string>;
    /**
     *
     * @type {object}
     * @memberof AcceptOAuth2LoginRequest
     */
    'context'?: object;
    /**
     * ForceSubjectIdentifier forces the \"pairwise\" user ID of the end-user that authenticated. The \"pairwise\" user ID refers to the (Pairwise Identifier Algorithm)[http://openid.net/specs/openid-connect-core-1_0.html#PairwiseAlg] of the OpenID Connect specification. It allows you to set an obfuscated subject (\"user\") identifier that is unique to the client.  Please note that this changes the user ID on endpoint /userinfo and sub claim of the ID Token. It does not change the sub claim in the OAuth 2.0 Introspection.  Per default, ORY Hydra handles this value with its own algorithm. In case you want to set this yourself you can use this field. Please note that setting this field has no effect if `pairwise` is not configured in ORY Hydra or the OAuth 2.0 Client does not expect a pairwise identifier (set via `subject_type` key in the client\'s configuration).  Please also be aware that ORY Hydra is unable to properly compute this value during authentication. This implies that you have to compute this value on every authentication process (probably depending on the client ID or some other unique value).  If you fail to compute the proper value, then authentication processes which have id_token_hint set might fail.
     * @type {string}
     * @memberof AcceptOAuth2LoginRequest
     */
    'force_subject_identifier'?: string;
    /**
     * Remember, if set to true, tells ORY Hydra to remember this user by telling the user agent (browser) to store a cookie with authentication data. If the same user performs another OAuth 2.0 Authorization Request, he/she will not be asked to log in again.
     * @type {boolean}
     * @memberof AcceptOAuth2LoginRequest
     */
    'remember'?: boolean;
    /**
     * RememberFor sets how long the authentication should be remembered for in seconds. If set to `0`, the authorization will be remembered for the duration of the browser session (using a session cookie).
     * @type {number}
     * @memberof AcceptOAuth2LoginRequest
     */
    'remember_for'?: number;
    /**
     * Subject is the user ID of the end-user that authenticated.
     * @type {string}
     * @memberof AcceptOAuth2LoginRequest
     */
    'subject': string;
}
/**
 * The Active Project ID
 * @export
 * @interface ActiveProject
 */
export interface ActiveProject {
    /**
     * The Active Project ID  format: uuid
     * @type {string}
     * @memberof ActiveProject
     */
    'project_id'?: string;
}
/**
 *
 * @export
 * @interface AdminCreateIdentityBody
 */
export interface AdminCreateIdentityBody {
    /**
     *
     * @type {AdminIdentityImportCredentials}
     * @memberof AdminCreateIdentityBody
     */
    'credentials'?: AdminIdentityImportCredentials;
    /**
     * Store metadata about the user which is only accessible through admin APIs such as `GET /admin/identities/<id>`.
     * @type {any}
     * @memberof AdminCreateIdentityBody
     */
    'metadata_admin'?: any;
    /**
     * Store metadata about the identity which the identity itself can see when calling for example the session endpoint. Do not store sensitive information (e.g. credit score) about the identity in this field.
     * @type {any}
     * @memberof AdminCreateIdentityBody
     */
    'metadata_public'?: any;
    /**
     * RecoveryAddresses contains all the addresses that can be used to recover an identity.  Use this structure to import recovery addresses for an identity. Please keep in mind that the address needs to be represented in the Identity Schema or this field will be overwritten on the next identity update.
     * @type {Array<RecoveryIdentityAddress>}
     * @memberof AdminCreateIdentityBody
     */
    'recovery_addresses'?: Array<RecoveryIdentityAddress>;
    /**
     * SchemaID is the ID of the JSON Schema to be used for validating the identity\'s traits.
     * @type {string}
     * @memberof AdminCreateIdentityBody
     */
    'schema_id': string;
    /**
     *
     * @type {IdentityState}
     * @memberof AdminCreateIdentityBody
     */
    'state'?: IdentityState;
    /**
     * Traits represent an identity\'s traits. The identity is able to create, modify, and delete traits in a self-service manner. The input will always be validated against the JSON Schema defined in `schema_url`.
     * @type {object}
     * @memberof AdminCreateIdentityBody
     */
    'traits': object;
    /**
     * VerifiableAddresses contains all the addresses that can be verified by the user.  Use this structure to import verified addresses for an identity. Please keep in mind that the address needs to be represented in the Identity Schema or this field will be overwritten on the next identity update.
     * @type {Array<VerifiableIdentityAddress>}
     * @memberof AdminCreateIdentityBody
     */
    'verifiable_addresses'?: Array<VerifiableIdentityAddress>;
}
/**
 *
 * @export
 * @interface AdminCreateIdentityImportCredentialsOidc
 */
export interface AdminCreateIdentityImportCredentialsOidc {
    /**
     *
     * @type {AdminCreateIdentityImportCredentialsOidcConfig}
     * @memberof AdminCreateIdentityImportCredentialsOidc
     */
    'config'?: AdminCreateIdentityImportCredentialsOidcConfig;
}
/**
 *
 * @export
 * @interface AdminCreateIdentityImportCredentialsOidcConfig
 */
export interface AdminCreateIdentityImportCredentialsOidcConfig {
    /**
     *
     * @type {AdminCreateIdentityImportCredentialsPasswordConfig}
     * @memberof AdminCreateIdentityImportCredentialsOidcConfig
     */
    'config'?: AdminCreateIdentityImportCredentialsPasswordConfig;
    /**
     * A list of OpenID Connect Providers
     * @type {Array<AdminCreateIdentityImportCredentialsOidcProvider>}
     * @memberof AdminCreateIdentityImportCredentialsOidcConfig
     */
    'providers'?: Array<AdminCreateIdentityImportCredentialsOidcProvider>;
}
/**
 *
 * @export
 * @interface AdminCreateIdentityImportCredentialsOidcProvider
 */
export interface AdminCreateIdentityImportCredentialsOidcProvider {
    /**
     * The OpenID Connect provider to link the subject to. Usually something like `google` or `github`.
     * @type {string}
     * @memberof AdminCreateIdentityImportCredentialsOidcProvider
     */
    'provider': string;
    /**
     * The subject (`sub`) of the OpenID Connect connection. Usually the `sub` field of the ID Token.
     * @type {string}
     * @memberof AdminCreateIdentityImportCredentialsOidcProvider
     */
    'subject': string;
}
/**
 *
 * @export
 * @interface AdminCreateIdentityImportCredentialsPassword
 */
export interface AdminCreateIdentityImportCredentialsPassword {
    /**
     *
     * @type {AdminCreateIdentityImportCredentialsPasswordConfig}
     * @memberof AdminCreateIdentityImportCredentialsPassword
     */
    'config'?: AdminCreateIdentityImportCredentialsPasswordConfig;
}
/**
 *
 * @export
 * @interface AdminCreateIdentityImportCredentialsPasswordConfig
 */
export interface AdminCreateIdentityImportCredentialsPasswordConfig {
    /**
     * The hashed password in [PHC format]( https://www.ory.sh/docs/kratos/concepts/credentials/username-email-password#hashed-password-format)
     * @type {string}
     * @memberof AdminCreateIdentityImportCredentialsPasswordConfig
     */
    'hashed_password'?: string;
    /**
     * The password in plain text if no hash is available.
     * @type {string}
     * @memberof AdminCreateIdentityImportCredentialsPasswordConfig
     */
    'password'?: string;
}
/**
 *
 * @export
 * @interface AdminCreateJsonWebKeySetBody
 */
export interface AdminCreateJsonWebKeySetBody {
    /**
     * The algorithm to be used for creating the key. Supports \"RS256\", \"ES256\", \"ES512\", \"HS512\", and \"HS256\"
     * @type {string}
     * @memberof AdminCreateJsonWebKeySetBody
     */
    'alg': string;
    /**
     * The kid of the key to be created
     * @type {string}
     * @memberof AdminCreateJsonWebKeySetBody
     */
    'kid': string;
    /**
     * The \"use\" (public key use) parameter identifies the intended use of the public key. The \"use\" parameter is employed to indicate whether a public key is used for encrypting data or verifying the signature on data. Valid values are \"enc\" and \"sig\".
     * @type {string}
     * @memberof AdminCreateJsonWebKeySetBody
     */
    'use': string;
}
/**
 *
 * @export
 * @interface AdminCreateSelfServiceRecoveryCodeBody
 */
export interface AdminCreateSelfServiceRecoveryCodeBody {
    /**
     * Code Expires In  The recovery code will expire at that point in time. Defaults to the configuration value of `selfservice.flows.recovery.request_lifespan`.
     * @type {string}
     * @memberof AdminCreateSelfServiceRecoveryCodeBody
     */
    'expires_in'?: string;
    /**
     * Identity to Recover  The identity\'s ID you wish to recover.
     * @type {string}
     * @memberof AdminCreateSelfServiceRecoveryCodeBody
     */
    'identity_id': string;
}
/**
 *
 * @export
 * @interface AdminCreateSelfServiceRecoveryLinkBody
 */
export interface AdminCreateSelfServiceRecoveryLinkBody {
    /**
     * Link Expires In  The recovery link will expire at that point in time. Defaults to the configuration value of `selfservice.flows.recovery.request_lifespan`.
     * @type {string}
     * @memberof AdminCreateSelfServiceRecoveryLinkBody
     */
    'expires_in'?: string;
    /**
     * Identity to Recover  The identity\'s ID you wish to recover.
     * @type {string}
     * @memberof AdminCreateSelfServiceRecoveryLinkBody
     */
    'identity_id': string;
}
/**
 *
 * @export
 * @interface AdminIdentityImportCredentials
 */
export interface AdminIdentityImportCredentials {
    /**
     *
     * @type {AdminCreateIdentityImportCredentialsOidc}
     * @memberof AdminIdentityImportCredentials
     */
    'oidc'?: AdminCreateIdentityImportCredentialsOidc;
    /**
     *
     * @type {AdminCreateIdentityImportCredentialsPassword}
     * @memberof AdminIdentityImportCredentials
     */
    'password'?: AdminCreateIdentityImportCredentialsPassword;
}
/**
 *
 * @export
 * @interface AdminTrustOAuth2JwtGrantIssuerBody
 */
export interface AdminTrustOAuth2JwtGrantIssuerBody {
    /**
     * The \"allow_any_subject\" indicates that the issuer is allowed to have any principal as the subject of the JWT.
     * @type {boolean}
     * @memberof AdminTrustOAuth2JwtGrantIssuerBody
     */
    'allow_any_subject'?: boolean;
    /**
     * The \"expires_at\" indicates, when grant will expire, so we will reject assertion from \"issuer\" targeting \"subject\".
     * @type {string}
     * @memberof AdminTrustOAuth2JwtGrantIssuerBody
     */
    'expires_at': string;
    /**
     * The \"issuer\" identifies the principal that issued the JWT assertion (same as \"iss\" claim in JWT).
     * @type {string}
     * @memberof AdminTrustOAuth2JwtGrantIssuerBody
     */
    'issuer': string;
    /**
     *
     * @type {JsonWebKey}
     * @memberof AdminTrustOAuth2JwtGrantIssuerBody
     */
    'jwk': JsonWebKey;
    /**
     * The \"scope\" contains list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749])
     * @type {Array<string>}
     * @memberof AdminTrustOAuth2JwtGrantIssuerBody
     */
    'scope': Array<string>;
    /**
     * The \"subject\" identifies the principal that is the subject of the JWT.
     * @type {string}
     * @memberof AdminTrustOAuth2JwtGrantIssuerBody
     */
    'subject'?: string;
}
/**
 *
 * @export
 * @interface AdminUpdateIdentityBody
 */
export interface AdminUpdateIdentityBody {
    /**
     *
     * @type {AdminIdentityImportCredentials}
     * @memberof AdminUpdateIdentityBody
     */
    'credentials'?: AdminIdentityImportCredentials;
    /**
     * Store metadata about the user which is only accessible through admin APIs such as `GET /admin/identities/<id>`.
     * @type {any}
     * @memberof AdminUpdateIdentityBody
     */
    'metadata_admin'?: any;
    /**
     * Store metadata about the identity which the identity itself can see when calling for example the session endpoint. Do not store sensitive information (e.g. credit score) about the identity in this field.
     * @type {any}
     * @memberof AdminUpdateIdentityBody
     */
    'metadata_public'?: any;
    /**
     * SchemaID is the ID of the JSON Schema to be used for validating the identity\'s traits. If set will update the Identity\'s SchemaID.
     * @type {string}
     * @memberof AdminUpdateIdentityBody
     */
    'schema_id': string;
    /**
     *
     * @type {IdentityState}
     * @memberof AdminUpdateIdentityBody
     */
    'state': IdentityState;
    /**
     * Traits represent an identity\'s traits. The identity is able to create, modify, and delete traits in a self-service manner. The input will always be validated against the JSON Schema defined in `schema_id`.
     * @type {object}
     * @memberof AdminUpdateIdentityBody
     */
    'traits': object;
}
/**
 * The authenticator assurance level can be one of \"aal1\", \"aal2\", or \"aal3\". A higher number means that it is harder for an attacker to compromise the account.  Generally, \"aal1\" implies that one authentication factor was used while AAL2 implies that two factors (e.g. password + TOTP) have been used.  To learn more about these levels please head over to: https://www.ory.sh/kratos/docs/concepts/credentials
 * @export
 * @enum {string}
 */
export declare const AuthenticatorAssuranceLevel: {
    readonly Aal0: "aal0";
    readonly Aal1: "aal1";
    readonly Aal2: "aal2";
    readonly Aal3: "aal3";
};
export declare type AuthenticatorAssuranceLevel = typeof AuthenticatorAssuranceLevel[keyof typeof AuthenticatorAssuranceLevel];
/**
 *
 * @export
 * @interface CloudAccount
 */
export interface CloudAccount {
    /**
     *
     * @type {string}
     * @memberof CloudAccount
     */
    'email'?: string;
    /**
     *
     * @type {string}
     * @memberof CloudAccount
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof CloudAccount
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface CnameSettings
 */
export interface CnameSettings {
    /**
     *
     * @type {string}
     * @memberof CnameSettings
     */
    'cookie_domain'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof CnameSettings
     */
    'cors_allowed_origins'?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof CnameSettings
     */
    'cors_enabled'?: boolean;
    /**
     *
     * @type {string}
     * @memberof CnameSettings
     */
    'created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof CnameSettings
     */
    'hostname'?: string;
    /**
     *
     * @type {string}
     * @memberof CnameSettings
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof CnameSettings
     */
    'updated_at'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof CnameSettings
     */
    'verification_errors'?: Array<string>;
    /**
     * CustomHostnameStatus is the enumeration of valid state values in the CustomHostnameSSL
     * @type {string}
     * @memberof CnameSettings
     */
    'verification_status'?: string;
}
/**
 * A Message\'s Status
 * @export
 * @enum {string}
 */
export declare const CourierMessageStatus: {
    readonly Queued: "queued";
    readonly Sent: "sent";
    readonly Processing: "processing";
    readonly Abandoned: "abandoned";
};
export declare type CourierMessageStatus = typeof CourierMessageStatus[keyof typeof CourierMessageStatus];
/**
 * It can either be `email` or `phone`
 * @export
 * @enum {string}
 */
export declare const CourierMessageType: {
    readonly Email: "email";
    readonly Phone: "phone";
};
export declare type CourierMessageType = typeof CourierMessageType[keyof typeof CourierMessageType];
/**
 *
 * @export
 * @interface CreateCustomHostnameBody
 */
export interface CreateCustomHostnameBody {
    /**
     * The domain where cookies will be set. Has to be a parent domain of the custom hostname to work.
     * @type {string}
     * @memberof CreateCustomHostnameBody
     */
    'cookie_domain'?: string;
    /**
     * CORS Allowed origins for the custom hostname.
     * @type {Array<string>}
     * @memberof CreateCustomHostnameBody
     */
    'cors_allowed_origins'?: Array<string>;
    /**
     * CORS Enabled for the custom hostname.
     * @type {boolean}
     * @memberof CreateCustomHostnameBody
     */
    'cors_enabled'?: boolean;
    /**
     * The custom hostname where the API will be exposed.
     * @type {string}
     * @memberof CreateCustomHostnameBody
     */
    'hostname'?: string;
}
/**
 *
 * @export
 * @interface CreateProjectBody
 */
export interface CreateProjectBody {
    /**
     * The name of the project to be created
     * @type {string}
     * @memberof CreateProjectBody
     */
    'name': string;
}
/**
 *
 * @export
 * @interface CreateSubscriptionPayload
 */
export interface CreateSubscriptionPayload {
    /**
     *
     * @type {string}
     * @memberof CreateSubscriptionPayload
     */
    'plan_or_price': string;
    /**
     *
     * @type {string}
     * @memberof CreateSubscriptionPayload
     */
    'provision_first_project': string;
    /**
     *
     * @type {string}
     * @memberof CreateSubscriptionPayload
     */
    'return_to'?: string;
}
/**
 *
 * @export
 * @interface ErrorAuthenticatorAssuranceLevelNotSatisfied
 */
export interface ErrorAuthenticatorAssuranceLevelNotSatisfied {
    /**
     * The status code
     * @type {number}
     * @memberof ErrorAuthenticatorAssuranceLevelNotSatisfied
     */
    'code'?: number;
    /**
     * Debug information  This field is often not exposed to protect against leaking sensitive information.
     * @type {string}
     * @memberof ErrorAuthenticatorAssuranceLevelNotSatisfied
     */
    'debug'?: string;
    /**
     * Further error details
     * @type {{ [key: string]: any; }}
     * @memberof ErrorAuthenticatorAssuranceLevelNotSatisfied
     */
    'details'?: {
        [key: string]: any;
    };
    /**
     * The error ID  Useful when trying to identify various errors in application logic.
     * @type {string}
     * @memberof ErrorAuthenticatorAssuranceLevelNotSatisfied
     */
    'id'?: string;
    /**
     * Error message  The error\'s message.
     * @type {string}
     * @memberof ErrorAuthenticatorAssuranceLevelNotSatisfied
     */
    'message': string;
    /**
     * A human-readable reason for the error
     * @type {string}
     * @memberof ErrorAuthenticatorAssuranceLevelNotSatisfied
     */
    'reason'?: string;
    /**
     *
     * @type {string}
     * @memberof ErrorAuthenticatorAssuranceLevelNotSatisfied
     */
    'redirect_browser_to'?: string;
    /**
     * The request ID  The request ID is often exposed internally in order to trace errors across service architectures. This is often a UUID.
     * @type {string}
     * @memberof ErrorAuthenticatorAssuranceLevelNotSatisfied
     */
    'request'?: string;
    /**
     * The status description
     * @type {string}
     * @memberof ErrorAuthenticatorAssuranceLevelNotSatisfied
     */
    'status'?: string;
}
/**
 *
 * @export
 * @interface ExpandTree
 */
export interface ExpandTree {
    /**
     * The children of the node, possibly none.
     * @type {Array<ExpandTree>}
     * @memberof ExpandTree
     */
    'children'?: Array<ExpandTree>;
    /**
     *
     * @type {RelationTuple}
     * @memberof ExpandTree
     */
    'tuple'?: RelationTuple;
    /**
     * The type of the node. union TreeNodeUnion exclusion TreeNodeExclusion intersection TreeNodeIntersection leaf TreeNodeLeaf tuple_to_subject_set TreeNodeTupleToSubjectSet computed_subject_set TreeNodeComputedSubjectSet not TreeNodeNot unspecified TreeNodeUnspecified
     * @type {string}
     * @memberof ExpandTree
     */
    'type': ExpandTreeTypeEnum;
}
export declare const ExpandTreeTypeEnum: {
    readonly Union: "union";
    readonly Exclusion: "exclusion";
    readonly Intersection: "intersection";
    readonly Leaf: "leaf";
    readonly TupleToSubjectSet: "tuple_to_subject_set";
    readonly ComputedSubjectSet: "computed_subject_set";
    readonly Not: "not";
    readonly Unspecified: "unspecified";
};
export declare type ExpandTreeTypeEnum = typeof ExpandTreeTypeEnum[keyof typeof ExpandTreeTypeEnum];
/**
 * Error responses are sent when an error (e.g. unauthorized, bad request, ...) occurred.
 * @export
 * @interface GenericError
 */
export interface GenericError {
    /**
     * The status code
     * @type {number}
     * @memberof GenericError
     */
    'code'?: number;
    /**
     * Debug information  This field is often not exposed to protect against leaking sensitive information.
     * @type {string}
     * @memberof GenericError
     */
    'debug'?: string;
    /**
     * Further error details
     * @type {any}
     * @memberof GenericError
     */
    'details'?: any;
    /**
     *
     * @type {GenericErrorContent}
     * @memberof GenericError
     */
    'error'?: GenericErrorContent;
    /**
     * The error ID  Useful when trying to identify various errors in application logic.
     * @type {string}
     * @memberof GenericError
     */
    'id'?: string;
    /**
     * Error message  The error\'s message.
     * @type {string}
     * @memberof GenericError
     */
    'message': string;
    /**
     * A human-readable reason for the error
     * @type {string}
     * @memberof GenericError
     */
    'reason'?: string;
    /**
     * The request ID  The request ID is often exposed internally in order to trace errors across service architectures. This is often a UUID.
     * @type {string}
     * @memberof GenericError
     */
    'request'?: string;
    /**
     * The status description
     * @type {string}
     * @memberof GenericError
     */
    'status'?: string;
}
/**
 * Error response
 * @export
 * @interface GenericErrorContent
 */
export interface GenericErrorContent {
    /**
     * Debug contains debug information. This is usually not available and has to be enabled.
     * @type {string}
     * @memberof GenericErrorContent
     */
    'debug'?: string;
    /**
     * Name is the error name.
     * @type {string}
     * @memberof GenericErrorContent
     */
    'error'?: string;
    /**
     * Description contains further information on the nature of the error.
     * @type {string}
     * @memberof GenericErrorContent
     */
    'error_description'?: string;
    /**
     * Message contains the error message.
     * @type {string}
     * @memberof GenericErrorContent
     */
    'message'?: string;
    /**
     * Code represents the error status code (404, 403, 401, ...).
     * @type {number}
     * @memberof GenericErrorContent
     */
    'status_code'?: number;
}
/**
 * The content of the allowed field is mirrored in the HTTP status code.
 * @export
 * @interface GetCheckResponse
 */
export interface GetCheckResponse {
    /**
     * whether the relation tuple is allowed
     * @type {boolean}
     * @memberof GetCheckResponse
     */
    'allowed': boolean;
}
/**
 *
 * @export
 * @interface GetManagedIdentitySchemaLocation
 */
export interface GetManagedIdentitySchemaLocation {
    /**
     *
     * @type {string}
     * @memberof GetManagedIdentitySchemaLocation
     */
    'location'?: string;
}
/**
 *
 * @export
 * @interface GetNamespacesResponse
 */
export interface GetNamespacesResponse {
    /**
     *
     * @type {Array<Namespace>}
     * @memberof GetNamespacesResponse
     */
    'namespaces'?: Array<Namespace>;
}
/**
 *
 * @export
 * @interface GetRelationTuplesResponse
 */
export interface GetRelationTuplesResponse {
    /**
     * The opaque token to provide in a subsequent request to get the next page. It is the empty string iff this is the last page.
     * @type {string}
     * @memberof GetRelationTuplesResponse
     */
    'next_page_token'?: string;
    /**
     *
     * @type {Array<RelationTuple>}
     * @memberof GetRelationTuplesResponse
     */
    'relation_tuples'?: Array<RelationTuple>;
}
/**
 *
 * @export
 * @interface HandledOAuth2ConsentRequest
 */
export interface HandledOAuth2ConsentRequest {
    /**
     * Original request URL to which you should redirect the user if request was already handled.
     * @type {string}
     * @memberof HandledOAuth2ConsentRequest
     */
    'redirect_to': string;
}
/**
 *
 * @export
 * @interface HandledOAuth2LoginRequest
 */
export interface HandledOAuth2LoginRequest {
    /**
     * Original request URL to which you should redirect the user if request was already handled.
     * @type {string}
     * @memberof HandledOAuth2LoginRequest
     */
    'redirect_to': string;
}
/**
 *
 * @export
 * @interface HandledOAuth2LogoutRequest
 */
export interface HandledOAuth2LogoutRequest {
    /**
     * Original request URL to which you should redirect the user if request was already handled.
     * @type {string}
     * @memberof HandledOAuth2LogoutRequest
     */
    'redirect_to': string;
}
/**
 * Headers is the jwt headers
 * @export
 * @interface Headers
 */
export interface Headers {
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof Headers
     */
    'extra'?: {
        [key: string]: object;
    };
}
/**
 *
 * @export
 * @interface HealthNotReadyStatus
 */
export interface HealthNotReadyStatus {
    /**
     * Errors contains a list of errors that caused the not ready status.
     * @type {{ [key: string]: string; }}
     * @memberof HealthNotReadyStatus
     */
    'errors'?: {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface HealthStatus
 */
export interface HealthStatus {
    /**
     * Status always contains \"ok\".
     * @type {string}
     * @memberof HealthStatus
     */
    'status'?: string;
}
/**
 * IDTokenClaims represent the claims used in open id connect requests
 * @export
 * @interface IDTokenClaims
 */
export interface IDTokenClaims {
    /**
     *
     * @type {string}
     * @memberof IDTokenClaims
     */
    'acr'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof IDTokenClaims
     */
    'amr'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof IDTokenClaims
     */
    'at_hash'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof IDTokenClaims
     */
    'aud'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof IDTokenClaims
     */
    'auth_time'?: string;
    /**
     *
     * @type {string}
     * @memberof IDTokenClaims
     */
    'c_hash'?: string;
    /**
     *
     * @type {string}
     * @memberof IDTokenClaims
     */
    'exp'?: string;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof IDTokenClaims
     */
    'ext'?: {
        [key: string]: object;
    };
    /**
     *
     * @type {string}
     * @memberof IDTokenClaims
     */
    'iat'?: string;
    /**
     *
     * @type {string}
     * @memberof IDTokenClaims
     */
    'iss'?: string;
    /**
     *
     * @type {string}
     * @memberof IDTokenClaims
     */
    'jti'?: string;
    /**
     *
     * @type {string}
     * @memberof IDTokenClaims
     */
    'nonce'?: string;
    /**
     *
     * @type {string}
     * @memberof IDTokenClaims
     */
    'rat'?: string;
    /**
     *
     * @type {string}
     * @memberof IDTokenClaims
     */
    'sub'?: string;
}
/**
 * An identity can be a real human, a service, an IoT device - everything that can be described as an \"actor\" in a system.
 * @export
 * @interface Identity
 */
export interface Identity {
    /**
     * CreatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof Identity
     */
    'created_at'?: string;
    /**
     * Credentials represents all credentials that can be used for authenticating this identity.
     * @type {{ [key: string]: IdentityCredentials; }}
     * @memberof Identity
     */
    'credentials'?: {
        [key: string]: IdentityCredentials;
    };
    /**
     * ID is the identity\'s unique identifier.  The Identity ID can not be changed and can not be chosen. This ensures future compatibility and optimization for distributed stores such as CockroachDB.
     * @type {string}
     * @memberof Identity
     */
    'id': string;
    /**
     * NullJSONRawMessage represents a json.RawMessage that works well with JSON, SQL, and Swagger and is NULLable-
     * @type {object}
     * @memberof Identity
     */
    'metadata_admin'?: object;
    /**
     * NullJSONRawMessage represents a json.RawMessage that works well with JSON, SQL, and Swagger and is NULLable-
     * @type {object}
     * @memberof Identity
     */
    'metadata_public'?: object;
    /**
     * RecoveryAddresses contains all the addresses that can be used to recover an identity.
     * @type {Array<RecoveryIdentityAddress>}
     * @memberof Identity
     */
    'recovery_addresses'?: Array<RecoveryIdentityAddress>;
    /**
     * SchemaID is the ID of the JSON Schema to be used for validating the identity\'s traits.
     * @type {string}
     * @memberof Identity
     */
    'schema_id': string;
    /**
     * SchemaURL is the URL of the endpoint where the identity\'s traits schema can be fetched from.  format: url
     * @type {string}
     * @memberof Identity
     */
    'schema_url': string;
    /**
     *
     * @type {IdentityState}
     * @memberof Identity
     */
    'state'?: IdentityState;
    /**
     *
     * @type {string}
     * @memberof Identity
     */
    'state_changed_at'?: string;
    /**
     * Traits represent an identity\'s traits. The identity is able to create, modify, and delete traits in a self-service manner. The input will always be validated against the JSON Schema defined in `schema_url`.
     * @type {any}
     * @memberof Identity
     */
    'traits': any;
    /**
     * UpdatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof Identity
     */
    'updated_at'?: string;
    /**
     * VerifiableAddresses contains all the addresses that can be verified by the user.
     * @type {Array<VerifiableIdentityAddress>}
     * @memberof Identity
     */
    'verifiable_addresses'?: Array<VerifiableIdentityAddress>;
}
/**
 * Credentials represents a specific credential type
 * @export
 * @interface IdentityCredentials
 */
export interface IdentityCredentials {
    /**
     *
     * @type {object}
     * @memberof IdentityCredentials
     */
    'config'?: object;
    /**
     * CreatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof IdentityCredentials
     */
    'created_at'?: string;
    /**
     * Identifiers represents a list of unique identifiers this credential type matches.
     * @type {Array<string>}
     * @memberof IdentityCredentials
     */
    'identifiers'?: Array<string>;
    /**
     *
     * @type {IdentityCredentialsType}
     * @memberof IdentityCredentials
     */
    'type'?: IdentityCredentialsType;
    /**
     * UpdatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof IdentityCredentials
     */
    'updated_at'?: string;
    /**
     * Version refers to the version of the credential. Useful when changing the config schema.
     * @type {number}
     * @memberof IdentityCredentials
     */
    'version'?: number;
}
/**
 *
 * @export
 * @interface IdentityCredentialsOidc
 */
export interface IdentityCredentialsOidc {
    /**
     *
     * @type {Array<IdentityCredentialsOidcProvider>}
     * @memberof IdentityCredentialsOidc
     */
    'providers'?: Array<IdentityCredentialsOidcProvider>;
}
/**
 *
 * @export
 * @interface IdentityCredentialsOidcProvider
 */
export interface IdentityCredentialsOidcProvider {
    /**
     *
     * @type {string}
     * @memberof IdentityCredentialsOidcProvider
     */
    'initial_access_token'?: string;
    /**
     *
     * @type {string}
     * @memberof IdentityCredentialsOidcProvider
     */
    'initial_id_token'?: string;
    /**
     *
     * @type {string}
     * @memberof IdentityCredentialsOidcProvider
     */
    'initial_refresh_token'?: string;
    /**
     *
     * @type {string}
     * @memberof IdentityCredentialsOidcProvider
     */
    'provider'?: string;
    /**
     *
     * @type {string}
     * @memberof IdentityCredentialsOidcProvider
     */
    'subject'?: string;
}
/**
 *
 * @export
 * @interface IdentityCredentialsPassword
 */
export interface IdentityCredentialsPassword {
    /**
     * HashedPassword is a hash-representation of the password.
     * @type {string}
     * @memberof IdentityCredentialsPassword
     */
    'hashed_password'?: string;
}
/**
 * and so on.
 * @export
 * @enum {string}
 */
export declare const IdentityCredentialsType: {
    readonly Password: "password";
    readonly Totp: "totp";
    readonly Oidc: "oidc";
    readonly Webauthn: "webauthn";
    readonly LookupSecret: "lookup_secret";
};
export declare type IdentityCredentialsType = typeof IdentityCredentialsType[keyof typeof IdentityCredentialsType];
/**
 *
 * @export
 * @interface IdentitySchemaContainer
 */
export interface IdentitySchemaContainer {
    /**
     * The ID of the Identity JSON Schema
     * @type {string}
     * @memberof IdentitySchemaContainer
     */
    'id'?: string;
    /**
     * Raw JSON Schema
     * @type {object}
     * @memberof IdentitySchemaContainer
     */
    'schema'?: object;
}
/**
 *
 * @export
 * @interface IdentitySchemaPreset
 */
export interface IdentitySchemaPreset {
    /**
     * Schema is the Identity JSON Schema
     * @type {object}
     * @memberof IdentitySchemaPreset
     */
    'schema': object;
    /**
     * URL is the preset identifier
     * @type {string}
     * @memberof IdentitySchemaPreset
     */
    'url': string;
}
/**
 * The state can either be `active` or `inactive`.
 * @export
 * @enum {string}
 */
export declare const IdentityState: {
    readonly Active: "active";
    readonly Inactive: "inactive";
};
export declare type IdentityState = typeof IdentityState[keyof typeof IdentityState];
/**
 *
 * @export
 * @interface InlineObject3
 */
export interface InlineObject3 {
    /**
     * The Token Name  A descriptive name for the token.  in: body
     * @type {string}
     * @memberof InlineObject3
     */
    'name': string;
}
/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * Always \"ok\".
     * @type {string}
     * @memberof InlineResponse200
     */
    'status': string;
}
/**
 *
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * The version of Ory Kratos.
     * @type {string}
     * @memberof InlineResponse2001
     */
    'version': string;
}
/**
 *
 * @export
 * @interface InlineResponse503
 */
export interface InlineResponse503 {
    /**
     * Errors contains a list of errors that caused the not ready status.
     * @type {{ [key: string]: string; }}
     * @memberof InlineResponse503
     */
    'errors': {
        [key: string]: string;
    };
}
/**
 * Introspection contains an access token\'s session data as specified by [IETF RFC 7662](https://tools.ietf.org/html/rfc7662)
 * @export
 * @interface IntrospectedOAuth2Token
 */
export interface IntrospectedOAuth2Token {
    /**
     * Active is a boolean indicator of whether or not the presented token is currently active.  The specifics of a token\'s \"active\" state will vary depending on the implementation of the authorization server and the information it keeps about its tokens, but a \"true\" value return for the \"active\" property will generally indicate that a given token has been issued by this authorization server, has not been revoked by the resource owner, and is within its given time window of validity (e.g., after its issuance time and before its expiration time).
     * @type {boolean}
     * @memberof IntrospectedOAuth2Token
     */
    'active': boolean;
    /**
     * Audience contains a list of the token\'s intended audiences.
     * @type {Array<string>}
     * @memberof IntrospectedOAuth2Token
     */
    'aud'?: Array<string>;
    /**
     * ID is aclient identifier for the OAuth 2.0 client that requested this token.
     * @type {string}
     * @memberof IntrospectedOAuth2Token
     */
    'client_id'?: string;
    /**
     * Expires at is an integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this token will expire.
     * @type {number}
     * @memberof IntrospectedOAuth2Token
     */
    'exp'?: number;
    /**
     * Extra is arbitrary data set by the session.
     * @type {{ [key: string]: object; }}
     * @memberof IntrospectedOAuth2Token
     */
    'ext'?: {
        [key: string]: object;
    };
    /**
     * Issued at is an integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this token was originally issued.
     * @type {number}
     * @memberof IntrospectedOAuth2Token
     */
    'iat'?: number;
    /**
     * IssuerURL is a string representing the issuer of this token
     * @type {string}
     * @memberof IntrospectedOAuth2Token
     */
    'iss'?: string;
    /**
     * NotBefore is an integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this token is not to be used before.
     * @type {number}
     * @memberof IntrospectedOAuth2Token
     */
    'nbf'?: number;
    /**
     * ObfuscatedSubject is set when the subject identifier algorithm was set to \"pairwise\" during authorization. It is the `sub` value of the ID Token that was issued.
     * @type {string}
     * @memberof IntrospectedOAuth2Token
     */
    'obfuscated_subject'?: string;
    /**
     * Scope is a JSON string containing a space-separated list of scopes associated with this token.
     * @type {string}
     * @memberof IntrospectedOAuth2Token
     */
    'scope'?: string;
    /**
     * Subject of the token, as defined in JWT [RFC7519]. Usually a machine-readable identifier of the resource owner who authorized this token.
     * @type {string}
     * @memberof IntrospectedOAuth2Token
     */
    'sub'?: string;
    /**
     * TokenType is the introspected token\'s type, typically `Bearer`.
     * @type {string}
     * @memberof IntrospectedOAuth2Token
     */
    'token_type'?: string;
    /**
     * TokenUse is the introspected token\'s use, for example `access_token` or `refresh_token`.
     * @type {string}
     * @memberof IntrospectedOAuth2Token
     */
    'token_use'?: string;
    /**
     * Username is a human-readable identifier for the resource owner who authorized this token.
     * @type {string}
     * @memberof IntrospectedOAuth2Token
     */
    'username'?: string;
}
/**
 *
 * @export
 * @interface InvitePayload
 */
export interface InvitePayload {
    /**
     *
     * @type {string}
     * @memberof InvitePayload
     */
    'invitee_email'?: string;
}
/**
 *
 * @export
 * @interface IsOwnerForProjectBySlug
 */
export interface IsOwnerForProjectBySlug {
    /**
     * ProjectSlug is the project\'s slug.
     * @type {string}
     * @memberof IsOwnerForProjectBySlug
     */
    'ProjectSlug': string;
    /**
     * Subject is the subject from the API Token.
     * @type {string}
     * @memberof IsOwnerForProjectBySlug
     */
    'Subject': string;
}
/**
 *
 * @export
 * @interface IsOwnerForProjectBySlugPayload
 */
export interface IsOwnerForProjectBySlugPayload {
    /**
     * ProjectScope is the project_id resolved from the API Token.
     * @type {string}
     * @memberof IsOwnerForProjectBySlugPayload
     */
    'project_scope'?: string;
    /**
     * ProjectSlug is the project\'s slug.
     * @type {string}
     * @memberof IsOwnerForProjectBySlugPayload
     */
    'project_slug': string;
    /**
     * Subject is the subject from the API Token.
     * @type {string}
     * @memberof IsOwnerForProjectBySlugPayload
     */
    'subject': string;
}
/**
 * The standard Ory JSON API error format.
 * @export
 * @interface JsonError
 */
export interface JsonError {
    /**
     *
     * @type {GenericError}
     * @memberof JsonError
     */
    'error': GenericError;
}
/**
 * JSON Patch allows you to target individual keys in a JSON document for updates.  For more examples see: https://jsonpatch.com
 * @export
 * @interface JsonPatch
 */
export interface JsonPatch {
    /**
     * This field is used together with operation \"move\" and uses JSON Pointer notation.  Learn more [about JSON Pointers](https://datatracker.ietf.org/doc/html/rfc6901#section-5).
     * @type {string}
     * @memberof JsonPatch
     */
    'from'?: string;
    /**
     * The JSON Patch operation
     * @type {string}
     * @memberof JsonPatch
     */
    'op': JsonPatchOpEnum;
    /**
     * The JSON Pointer to the target key
     * @type {string}
     * @memberof JsonPatch
     */
    'path': string;
    /**
     * The value to be used. Only available for `add` and `replace` operations.
     * @type {any}
     * @memberof JsonPatch
     */
    'value'?: any;
}
export declare const JsonPatchOpEnum: {
    readonly Add: "add";
    readonly Remove: "remove";
    readonly Replace: "replace";
    readonly Move: "move";
    readonly Copy: "copy";
    readonly Test: "test";
};
export declare type JsonPatchOpEnum = typeof JsonPatchOpEnum[keyof typeof JsonPatchOpEnum];
/**
 *
 * @export
 * @interface JsonWebKey
 */
export interface JsonWebKey {
    /**
     * The \"alg\" (algorithm) parameter identifies the algorithm intended for use with the key.  The values used should either be registered in the IANA \"JSON Web Signature and Encryption Algorithms\" registry established by [JWA] or be a value that contains a Collision- Resistant Name.
     * @type {string}
     * @memberof JsonWebKey
     */
    'alg': string;
    /**
     *
     * @type {string}
     * @memberof JsonWebKey
     */
    'crv'?: string;
    /**
     *
     * @type {string}
     * @memberof JsonWebKey
     */
    'd'?: string;
    /**
     *
     * @type {string}
     * @memberof JsonWebKey
     */
    'dp'?: string;
    /**
     *
     * @type {string}
     * @memberof JsonWebKey
     */
    'dq'?: string;
    /**
     *
     * @type {string}
     * @memberof JsonWebKey
     */
    'e'?: string;
    /**
     *
     * @type {string}
     * @memberof JsonWebKey
     */
    'k'?: string;
    /**
     * The \"kid\" (key ID) parameter is used to match a specific key.  This is used, for instance, to choose among a set of keys within a JWK Set during key rollover.  The structure of the \"kid\" value is unspecified.  When \"kid\" values are used within a JWK Set, different keys within the JWK Set SHOULD use distinct \"kid\" values.  (One example in which different keys might use the same \"kid\" value is if they have different \"kty\" (key type) values but are considered to be equivalent alternatives by the application using them.)  The \"kid\" value is a case-sensitive string.
     * @type {string}
     * @memberof JsonWebKey
     */
    'kid': string;
    /**
     * The \"kty\" (key type) parameter identifies the cryptographic algorithm family used with the key, such as \"RSA\" or \"EC\". \"kty\" values should either be registered in the IANA \"JSON Web Key Types\" registry established by [JWA] or be a value that contains a Collision- Resistant Name.  The \"kty\" value is a case-sensitive string.
     * @type {string}
     * @memberof JsonWebKey
     */
    'kty': string;
    /**
     *
     * @type {string}
     * @memberof JsonWebKey
     */
    'n'?: string;
    /**
     *
     * @type {string}
     * @memberof JsonWebKey
     */
    'p'?: string;
    /**
     *
     * @type {string}
     * @memberof JsonWebKey
     */
    'q'?: string;
    /**
     *
     * @type {string}
     * @memberof JsonWebKey
     */
    'qi'?: string;
    /**
     * Use (\"public key use\") identifies the intended use of the public key. The \"use\" parameter is employed to indicate whether a public key is used for encrypting data or verifying the signature on data. Values are commonly \"sig\" (signature) or \"enc\" (encryption).
     * @type {string}
     * @memberof JsonWebKey
     */
    'use': string;
    /**
     *
     * @type {string}
     * @memberof JsonWebKey
     */
    'x'?: string;
    /**
     * The \"x5c\" (X.509 certificate chain) parameter contains a chain of one or more PKIX certificates [RFC5280].  The certificate chain is represented as a JSON array of certificate value strings.  Each string in the array is a base64-encoded (Section 4 of [RFC4648] -- not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value. The PKIX certificate containing the key value MUST be the first certificate.
     * @type {Array<string>}
     * @memberof JsonWebKey
     */
    'x5c'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof JsonWebKey
     */
    'y'?: string;
}
/**
 * It is important that this model object is named JSONWebKeySet for \"swagger generate spec\" to generate only on definition of a JSONWebKeySet. Since one with the same name is previously defined as client.Client.JSONWebKeys and this one is last, this one will be effectively written in the swagger spec.
 * @export
 * @interface JsonWebKeySet
 */
export interface JsonWebKeySet {
    /**
     * The value of the \"keys\" parameter is an array of JSON Web Key (JWK) values. By default, the order of the JWK values within the array does not imply an order of preference among them, although applications of JWK Sets can choose to assign a meaning to the order for their purposes, if desired.
     * @type {Array<JsonWebKey>}
     * @memberof JsonWebKeySet
     */
    'keys'?: Array<JsonWebKey>;
}
/**
 *
 * @export
 * @interface KetoNamespace
 */
export interface KetoNamespace {
    /**
     *
     * @type {number}
     * @memberof KetoNamespace
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof KetoNamespace
     */
    'name'?: string;
}
/**
 * Together the name and identity uuid are a unique index constraint. This prevents a user from having schemas with the same name. This also allows schemas to have the same name across the system.
 * @export
 * @interface ManagedIdentitySchema
 */
export interface ManagedIdentitySchema {
    /**
     * The gcs file name  This is a randomly generated name which is used to uniquely identify the file on the blob storage
     * @type {string}
     * @memberof ManagedIdentitySchema
     */
    'blob_name': string;
    /**
     * The publicly accessible url of the schema
     * @type {string}
     * @memberof ManagedIdentitySchema
     */
    'blob_url': string;
    /**
     * The Content Hash  Contains a hash of the schema\'s content.
     * @type {string}
     * @memberof ManagedIdentitySchema
     */
    'content_hash'?: string;
    /**
     * The Schema\'s Creation Date
     * @type {string}
     * @memberof ManagedIdentitySchema
     */
    'created_at': string;
    /**
     * The schema\'s ID.
     * @type {string}
     * @memberof ManagedIdentitySchema
     */
    'id': string;
    /**
     * The schema name  This is set by the user and is for them to easily recognise their schema
     * @type {string}
     * @memberof ManagedIdentitySchema
     */
    'name': string;
    /**
     * Last Time Schema was Updated
     * @type {string}
     * @memberof ManagedIdentitySchema
     */
    'updated_at': string;
}
/**
 *
 * @export
 * @interface ManagedIdentitySchemaValidationResult
 */
export interface ManagedIdentitySchemaValidationResult {
    /**
     *
     * @type {string}
     * @memberof ManagedIdentitySchemaValidationResult
     */
    'message'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ManagedIdentitySchemaValidationResult
     */
    'valid'?: boolean;
}
/**
 *
 * @export
 * @interface Message
 */
export interface Message {
    /**
     *
     * @type {string}
     * @memberof Message
     */
    'body'?: string;
    /**
     * CreatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof Message
     */
    'created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof Message
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof Message
     */
    'recipient'?: string;
    /**
     *
     * @type {number}
     * @memberof Message
     */
    'send_count'?: number;
    /**
     *
     * @type {CourierMessageStatus}
     * @memberof Message
     */
    'status'?: CourierMessageStatus;
    /**
     *
     * @type {string}
     * @memberof Message
     */
    'subject'?: string;
    /**
     *
     * @type {string}
     * @memberof Message
     */
    'template_type'?: string;
    /**
     *
     * @type {CourierMessageType}
     * @memberof Message
     */
    'type'?: CourierMessageType;
    /**
     * UpdatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof Message
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface Namespace
 */
export interface Namespace {
    /**
     * Name of the namespace.
     * @type {string}
     * @memberof Namespace
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface NeedsPrivilegedSessionError
 */
export interface NeedsPrivilegedSessionError {
    /**
     * The status code
     * @type {number}
     * @memberof NeedsPrivilegedSessionError
     */
    'code'?: number;
    /**
     * Debug information  This field is often not exposed to protect against leaking sensitive information.
     * @type {string}
     * @memberof NeedsPrivilegedSessionError
     */
    'debug'?: string;
    /**
     * Further error details
     * @type {{ [key: string]: any; }}
     * @memberof NeedsPrivilegedSessionError
     */
    'details'?: {
        [key: string]: any;
    };
    /**
     * The error ID  Useful when trying to identify various errors in application logic.
     * @type {string}
     * @memberof NeedsPrivilegedSessionError
     */
    'id'?: string;
    /**
     * Error message  The error\'s message.
     * @type {string}
     * @memberof NeedsPrivilegedSessionError
     */
    'message': string;
    /**
     * A human-readable reason for the error
     * @type {string}
     * @memberof NeedsPrivilegedSessionError
     */
    'reason'?: string;
    /**
     * Points to where to redirect the user to next.
     * @type {string}
     * @memberof NeedsPrivilegedSessionError
     */
    'redirect_browser_to': string;
    /**
     * The request ID  The request ID is often exposed internally in order to trace errors across service architectures. This is often a UUID.
     * @type {string}
     * @memberof NeedsPrivilegedSessionError
     */
    'request'?: string;
    /**
     * The status description
     * @type {string}
     * @memberof NeedsPrivilegedSessionError
     */
    'status'?: string;
}
/**
 *
 * @export
 * @interface NormalizedProject
 */
export interface NormalizedProject {
    /**
     * The Project\'s Creation Date
     * @type {string}
     * @memberof NormalizedProject
     */
    'created_at': string;
    /**
     *
     * @type {NormalizedProjectRevision}
     * @memberof NormalizedProject
     */
    'current_revision': NormalizedProjectRevision;
    /**
     *
     * @type {Array<string>}
     * @memberof NormalizedProject
     */
    'hosts': Array<string>;
    /**
     * The project\'s ID.
     * @type {string}
     * @memberof NormalizedProject
     */
    'id': string;
    /**
     *
     * @type {Array<NormalizedProjectRevision>}
     * @memberof NormalizedProject
     */
    'revisions': Array<NormalizedProjectRevision>;
    /**
     * The project\'s slug
     * @type {string}
     * @memberof NormalizedProject
     */
    'slug': string;
    /**
     * The state of the project. running Running halted Halted
     * @type {string}
     * @memberof NormalizedProject
     */
    'state': NormalizedProjectStateEnum;
    /**
     *
     * @type {string}
     * @memberof NormalizedProject
     */
    'subscription_id'?: string | null;
    /**
     * Last Time Project was Updated
     * @type {string}
     * @memberof NormalizedProject
     */
    'updated_at': string;
}
export declare const NormalizedProjectStateEnum: {
    readonly Running: "running";
    readonly Halted: "halted";
};
export declare type NormalizedProjectStateEnum = typeof NormalizedProjectStateEnum[keyof typeof NormalizedProjectStateEnum];
/**
 *
 * @export
 * @interface NormalizedProjectRevision
 */
export interface NormalizedProjectRevision {
    /**
     * The Project\'s Revision Creation Date
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'created_at'?: string;
    /**
     * Automatically grant authorized OAuth2 Scope in OAuth2 Client Credentials Flow.  Each OAuth2 Client is allowed to request a predefined OAuth2 Scope (for example `read write`). If this option is enabled, the full scope is automatically granted when performing the OAuth2 Client Credentials flow.  If disabled, the OAuth2 Client has to request the scope in the OAuth2 request by providing the `scope` query parameter.  Setting this option to true is common if you need compatibility with MITREid.  This governs the \"oauth2.client_credentials.default_grant_allowed_scope\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'hydra_oauth2_client_credentials_default_grant_allowed_scope'?: boolean;
    /**
     * Configures if the issued at (`iat`) claim is required in the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants (RFC7523).  If set to `false`, the `iat` claim is required. Set this value to `true` only after careful consideration.  This governs the \"oauth2.grant.jwt.iat_optional\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'hydra_oauth2_grant_jwt_iat_optional'?: boolean;
    /**
     * Configures if the JSON Web Token ID (`jti`) claim is required in the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants (RFC7523).  If set to `false`, the `jti` claim is required. Set this value to `true` only after careful consideration.  This governs the \"oauth2.grant.jwt.jti_optional\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'hydra_oauth2_grant_jwt_jti_optional'?: boolean;
    /**
     * Configures what the maximum age of a JWT assertion used in the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants (RFC7523) can be.  This feature uses the `exp` claim and `iat` claim to calculate assertion age. Assertions exceeding the max age will be denied.  Useful as a safety measure and recommended to keep below 720h.  This governs the \"oauth2.grant.jwt.max_ttl\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_oauth2_grant_jwt_max_ttl'?: string;
    /**
     * Configures whether PKCE should be enforced for all OAuth2 Clients.  This governs the \"oauth2.pkce.enforced\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'hydra_oauth2_pkce_enforced'?: boolean;
    /**
     * Configures whether PKCE should be enforced for OAuth2 Clients without a client secret (public clients).  This governs the \"oauth2.pkce.enforced_for_public_clients\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'hydra_oauth2_pkce_enforced_for_public_clients'?: boolean;
    /**
     * Sets the Refresh Token Hook Endpoint. If set this endpoint will be called during the OAuth2 Token Refresh grant update the OAuth2 Access Token claims.  This governs the \"oauth2.refresh_token_hook\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_oauth2_refresh_token_hook'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof NormalizedProjectRevision
     */
    'hydra_oauth2_session_allowed_top_level_claims'?: Array<string>;
    /**
     * Set to true if you want to exclude claim `nbf (not before)` part of access token.  This governs the \"oauth2.session.exclude_not_before_claim\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'hydra_oauth2_session_exclude_not_before_claim'?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof NormalizedProjectRevision
     */
    'hydra_oidc_dynamic_client_registration_default_scope'?: Array<string>;
    /**
     * Configures OpenID Connect Dynamic Client Registration.  This governs the \"oidc.dynamic_client_registration.enabled\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'hydra_oidc_dynamic_client_registration_enabled'?: boolean;
    /**
     * Configures OpenID Connect Discovery and overwrites the pairwise algorithm  This governs the \"oidc.subject_identifiers.pairwise_salt\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_oidc_subject_identifiers_pairwise_salt'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof NormalizedProjectRevision
     */
    'hydra_oidc_subject_identifiers_supported_types'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof NormalizedProjectRevision
     */
    'hydra_secrets_cookie'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof NormalizedProjectRevision
     */
    'hydra_secrets_system'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof NormalizedProjectRevision
     */
    'hydra_serve_admin_cors_allowed_origins'?: Array<string>;
    /**
     * Configures the Ory Hydra CORS Settings  This governs the \"serve.admin.cors.enabled\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'hydra_serve_admin_cors_enabled'?: boolean;
    /**
     * Configures the Ory Hydra Cookie Same Site Legacy Workaround  This governs the \"serve.cookies.same_site_legacy_workaround\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'hydra_serve_cookies_same_site_legacy_workaround'?: boolean;
    /**
     * Configures the Ory Hydra Cookie Same Site Mode  This governs the \"serve.cookies.same_site_mode\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_serve_cookies_same_site_mode'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof NormalizedProjectRevision
     */
    'hydra_serve_public_cors_allowed_origins'?: Array<string>;
    /**
     * Configures the Ory Hydra CORS Settings  This governs the \"serve.public.cors.enabled\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'hydra_serve_public_cors_enabled'?: boolean;
    /**
     * Defines access token type. jwt is a bad idea, see https://www.ory.sh/docs/hydra/advanced#json-web-tokens  This governs the \"strategies.access_token\" setting.
     * @type {any}
     * @memberof NormalizedProjectRevision
     */
    'hydra_strategies_access_token'?: any;
    /**
     * Defines how scopes are matched. For more details have a look at https://github.com/ory/fosite#scopes  This governs the \"strategies.scope\" setting.
     * @type {any}
     * @memberof NormalizedProjectRevision
     */
    'hydra_strategies_scope'?: any;
    /**
     * This governs the \"ttl.access_token\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_ttl_access_token'?: string;
    /**
     * Configures how long refresh tokens are valid.  Set to -1 for refresh tokens to never expire. This is not recommended!  This governs the \"ttl.auth_code\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_ttl_auth_code'?: string;
    /**
     * This governs the \"ttl.id_token\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_ttl_id_token'?: string;
    /**
     * Configures how long a user login and consent flow may take.  This governs the \"ttl.login_consent_request\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_ttl_login_consent_request'?: string;
    /**
     * Configures how long refresh tokens are valid.  Set to -1 for refresh tokens to never expire. This is not recommended!  This governs the \"ttl.refresh_token\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_ttl_refresh_token'?: string;
    /**
     * Sets the OAuth2 Consent Endpoint URL of the OAuth2 User Login & Consent flow.  Defaults to Ory Cloud\'s Managed UI if left empty.  This governs the \"urls.consent\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_urls_consent'?: string;
    /**
     * Sets the OAuth2 Error URL of the OAuth2 User Login & Consent flow.  Defaults to Ory Cloud\'s Managed UI if left empty.  This governs the \"urls.error\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_urls_error'?: string;
    /**
     * Sets the OAuth2 Login Endpoint URL of the OAuth2 User Login & Consent flow.  Defaults to Ory Cloud\'s Managed UI if left empty.  This governs the \"urls.login\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_urls_login'?: string;
    /**
     * Sets the logout endpoint.  Defaults to Ory Cloud\'s Managed UI if left empty.  This governs the \"urls.logout\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_urls_logout'?: string;
    /**
     * When an OAuth2-related user agent requests to log out, they will be redirected to this url afterwards per default.  Defaults to Ory Cloud\'s Managed UI in development and your application in production mode when a custom domain is connected.  This governs the \"urls.post_logout_redirect\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_urls_post_logout_redirect'?: string;
    /**
     * This value will be used as the issuer in access and ID tokens. It must be specified and using HTTPS protocol, unless the development mode is enabled.  In Ory Cloud it will be very rare that you want to modify this value. If left empty, it will default to the correct value for Ory Cloud.  This governs the \"urls.self.issuer\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_urls_self_issuer'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof NormalizedProjectRevision
     */
    'hydra_webfinger_jwks_broadcast_keys'?: Array<string>;
    /**
     * Configures OpenID Connect Discovery and overwrites the OAuth2 Authorization URL.  This governs the \"webfinger.oidc.discovery.auth_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_webfinger_oidc_discovery_auth_url'?: string;
    /**
     * Configures OpenID Connect Discovery and overwrites the OpenID Connect Dynamic Client Registration Endpoint.  This governs the \"webfinger.oidc.discovery.client_registration_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_webfinger_oidc_discovery_client_registration_url'?: string;
    /**
     * Configures OpenID Connect Discovery and overwrites the JWKS URL.  This governs the \"webfinger.oidc.discovery.jwks_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_webfinger_oidc_discovery_jwks_url'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof NormalizedProjectRevision
     */
    'hydra_webfinger_oidc_discovery_supported_claims'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof NormalizedProjectRevision
     */
    'hydra_webfinger_oidc_discovery_supported_scope'?: Array<string>;
    /**
     * Configures OpenID Connect Discovery and overwrites the OAuth2 Token URL.  This governs the \"webfinger.oidc.discovery.token_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_webfinger_oidc_discovery_token_url'?: string;
    /**
     * Configures OpenID Connect Discovery and overwrites userinfo endpoint to be advertised at the OpenID Connect Discovery endpoint /.well-known/openid-configuration. Defaults to Ory Hydra\'s userinfo endpoint at /userinfo. Set this value if you want to handle this endpoint yourself.  This governs the \"webfinger.oidc.discovery.userinfo_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_webfinger_oidc_discovery_userinfo_url'?: string;
    /**
     * The revision ID.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'id'?: string;
    /**
     * The Revisions\' Keto Namespace Configuration  The string is a URL pointing to an OPL file with the configuration.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'keto_namespace_configuration'?: string;
    /**
     *
     * @type {Array<KetoNamespace>}
     * @memberof NormalizedProjectRevision
     */
    'keto_namespaces'?: Array<KetoNamespace>;
    /**
     *
     * @type {number}
     * @memberof NormalizedProjectRevision
     */
    'keto_read_max_depth'?: number | null;
    /**
     * Configures the Ory Kratos Cookie SameSite Attribute  This governs the \"cookies.same_site\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_cookies_same_site'?: string;
    /**
     * Configures the Ory Kratos SMTP Connection URI  This governs the \"courier.smtp.connection_uri\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_smtp_connection_uri'?: string;
    /**
     * Configures the Ory Kratos SMTP From Address  This governs the \"courier.smtp.from_address\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_smtp_from_address'?: string;
    /**
     * Configures the Ory Kratos SMTP From Name  This governs the \"courier.smtp.from_name\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_smtp_from_name'?: string;
    /**
     * NullJSONRawMessage represents a json.RawMessage that works well with JSON, SQL, and Swagger and is NULLable-
     * @type {object}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_smtp_headers'?: object;
    /**
     * Configures the Ory Kratos Invalid Recovery via Code Email Body HTML Template  This governs the \"courier.smtp.templates.recovery_code.invalid.email.body.html\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_recovery_code_invalid_email_body_html'?: string;
    /**
     * Configures the Ory Kratos Invalid Recovery via Code Email Body Plaintext Template  This governs the \"courier.smtp.templates.recovery_code.invalid.email.body.plaintext\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_recovery_code_invalid_email_body_plaintext'?: string;
    /**
     * Configures the Ory Kratos Invalid Recovery via Code Email Subject Template  This governs the \"courier.smtp.templates.recovery_code.invalid.email.body.html\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_recovery_code_invalid_email_subject'?: string;
    /**
     * Configures the Ory Kratos Valid Recovery via Code Email Body HTML Template  This governs the \"courier.smtp.templates.recovery_code.valid.email.body.html\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_recovery_code_valid_email_body_html'?: string;
    /**
     * Configures the Ory Kratos Valid Recovery via Code Email Body Plaintext Template  This governs the \"courier.smtp.templates.recovery_code.valid.email.body.plaintext\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_recovery_code_valid_email_body_plaintext'?: string;
    /**
     * Configures the Ory Kratos Valid Recovery via Code Email Subject Template  This governs the \"courier.smtp.templates.recovery_code.valid.email.subject\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_recovery_code_valid_email_subject'?: string;
    /**
     * Configures the Ory Kratos Invalid Recovery Email Body HTML Template  This governs the \"courier.smtp.templates.recovery.invalid.email.body.html\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_recovery_invalid_email_body_html'?: string;
    /**
     * Configures the Ory Kratos Invalid Recovery Email Body Plaintext Template  This governs the \"courier.smtp.templates.recovery.invalid.email.body.plaintext\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_recovery_invalid_email_body_plaintext'?: string;
    /**
     * Configures the Ory Kratos Invalid Recovery Email Subject Template  This governs the \"courier.smtp.templates.recovery.invalid.email.body.html\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_recovery_invalid_email_subject'?: string;
    /**
     * Configures the Ory Kratos Valid Recovery Email Body HTML Template  This governs the \"courier.smtp.templates.recovery.valid.email.body.html\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_recovery_valid_email_body_html'?: string;
    /**
     * Configures the Ory Kratos Valid Recovery Email Body Plaintext Template  This governs the \"courier.smtp.templates.recovery.valid.email.body.plaintext\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_recovery_valid_email_body_plaintext'?: string;
    /**
     * Configures the Ory Kratos Valid Recovery Email Subject Template  This governs the \"courier.smtp.templates.recovery.valid.email.subject\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_recovery_valid_email_subject'?: string;
    /**
     * Configures the Ory Kratos Invalid Verification Email Body HTML Template  This governs the \"courier.smtp.templates.verification.invalid.email.body.html\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_verification_invalid_email_body_html'?: string;
    /**
     * Configures the Ory Kratos Invalid Verification Email Body Plaintext Template  This governs the \"courier.smtp.templates.recovery.invalid.email.body.plaintext\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_verification_invalid_email_body_plaintext'?: string;
    /**
     * Configures the Ory Kratos Invalid Verification Email Subject Template  This governs the \"courier.smtp.templates.verification.invalid.email.subject\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_verification_invalid_email_subject'?: string;
    /**
     * Configures the Ory Kratos Valid Verification Email Body HTML Template  This governs the \"courier.smtp.templates.verification.valid.email.body.html\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_verification_valid_email_body_html'?: string;
    /**
     * Configures the Ory Kratos Valid Verification Email Body Plaintext Template  This governs the \"courier.smtp.templates.recovery.valid.email.body.plaintext\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_verification_valid_email_body_plaintext'?: string;
    /**
     * Configures the Ory Kratos Valid Verification Email Subject Template  This governs the \"courier.smtp.templates.verification.valid.email.subject\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_verification_valid_email_subject'?: string;
    /**
     *
     * @type {Array<NormalizedProjectRevisionIdentitySchema>}
     * @memberof NormalizedProjectRevision
     */
    'kratos_identity_schemas'?: Array<NormalizedProjectRevisionIdentitySchema>;
    /**
     *
     * @type {Array<string>}
     * @memberof NormalizedProjectRevision
     */
    'kratos_secrets_cipher'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof NormalizedProjectRevision
     */
    'kratos_secrets_cookie'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof NormalizedProjectRevision
     */
    'kratos_secrets_default'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_allowed_return_urls'?: Array<string>;
    /**
     * Configures the Ory Kratos Default Return URL  This governs the \"selfservice.allowed_return_urls\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_default_browser_return_url'?: string;
    /**
     * Configures the Ory Kratos Error UI URL  This governs the \"selfservice.flows.error.ui_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_error_ui_url'?: string;
    /**
     *
     * @type {Array<NormalizedProjectRevisionHook>}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_hooks'?: Array<NormalizedProjectRevisionHook>;
    /**
     * Configures the Ory Kratos Login Default Return URL  This governs the \"selfservice.flows.login.after.default_browser_return_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_login_after_default_browser_return_url'?: string;
    /**
     * Configures the Ory Kratos Login After OIDC Default Return URL  This governs the \"selfservice.flows.login.after.oidc.default_browser_return_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_login_after_oidc_default_browser_return_url'?: string;
    /**
     * Configures the Ory Kratos Login After Password Default Return URL  This governs the \"selfservice.flows.login.after.password.default_browser_return_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_login_after_password_default_browser_return_url'?: string;
    /**
     * Configures the Ory Kratos Login After WebAuthn Default Return URL  This governs the \"selfservice.flows.login.after.webauthn.default_browser_return_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_login_after_webauthn_default_browser_return_url'?: string;
    /**
     * Configures the Ory Kratos Login Lifespan  This governs the \"selfservice.flows.login.lifespan\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_login_lifespan'?: string;
    /**
     * Configures the Ory Kratos Login UI URL  This governs the \"selfservice.flows.login.ui_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_login_ui_url'?: string;
    /**
     * Configures the Ory Kratos Logout Default Return URL  This governs the \"selfservice.flows.logout.after.default_browser_return_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_logout_after_default_browser_return_url'?: string;
    /**
     * Configures the Ory Kratos Recovery Default Return URL  This governs the \"selfservice.flows.recovery.after.default_browser_return_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_recovery_after_default_browser_return_url'?: string;
    /**
     * Configures the Ory Kratos Recovery Enabled Setting  This governs the \"selfservice.flows.recovery.enabled\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_recovery_enabled'?: boolean;
    /**
     * Configures the Ory Kratos Recovery Lifespan  This governs the \"selfservice.flows.recovery.lifespan\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_recovery_lifespan'?: string;
    /**
     * Configures the Ory Kratos Recovery UI URL  This governs the \"selfservice.flows.recovery.ui_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_recovery_ui_url'?: string;
    /**
     * Configures the Ory Kratos Recovery strategy to use (\"link\" or \"code\")  This governs the \"selfservice.flows.recovery.use\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_recovery_use'?: string;
    /**
     * Configures the Ory Kratos Registration Default Return URL  This governs the \"selfservice.flows.registration.after.default_browser_return_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_registration_after_default_browser_return_url'?: string;
    /**
     * Configures the Ory Kratos Registration After OIDC Default Return URL  This governs the \"selfservice.flows.registration.after.oidc.default_browser_return_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_registration_after_oidc_default_browser_return_url'?: string;
    /**
     * Configures the Ory Kratos Registration After Password Default Return URL  This governs the \"selfservice.flows.registration.after.password.default_browser_return_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_registration_after_password_default_browser_return_url'?: string;
    /**
     * Configures the Ory Kratos Registration After Password Default Return URL  This governs the \"selfservice.flows.registration.after.password.default_browser_return_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_registration_after_webauthn_default_browser_return_url'?: string;
    /**
     * Configures the Whether Ory Kratos Registration is Enabled  This governs the \"selfservice.flows.registration.enabled\" setting.0
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_registration_enabled'?: boolean;
    /**
     * Configures the Ory Kratos Registration Lifespan  This governs the \"selfservice.flows.registration.lifespan\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_registration_lifespan'?: string;
    /**
     * Configures the Ory Kratos Registration UI URL  This governs the \"selfservice.flows.registration.ui_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_registration_ui_url'?: string;
    /**
     * Configures the Ory Kratos Settings Default Return URL  This governs the \"selfservice.flows.settings.after.default_browser_return_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_settings_after_default_browser_return_url'?: string;
    /**
     * Configures the Ory Kratos Settings Default Return URL After Updating Passwords  This governs the \"selfservice.flows.settings.after.password.default_browser_return_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_settings_after_password_default_browser_return_url'?: string;
    /**
     * Configures the Ory Kratos Settings Default Return URL After Updating Profiles  This governs the \"selfservice.flows.settings.after.profile.default_browser_return_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_settings_after_profile_default_browser_return_url'?: string;
    /**
     * Configures the Ory Kratos Settings Lifespan  This governs the \"selfservice.flows.settings.lifespan\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_settings_lifespan'?: string;
    /**
     * Configures the Ory Kratos Settings Privileged Session Max Age  This governs the \"selfservice.flows.settings.privileged_session_max_age\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_settings_privileged_session_max_age'?: string;
    /**
     * Configures the Ory Kratos Settings Required AAL  This governs the \"selfservice.flows.settings.required_aal\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_settings_required_aal'?: string;
    /**
     * Configures the Ory Kratos Settings UI URL  This governs the \"selfservice.flows.settings.ui_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_settings_ui_url'?: string;
    /**
     * Configures the Ory Kratos Verification Default Return URL  This governs the \"selfservice.flows.verification.after.default_browser_return_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_verification_after_default_browser_return_url'?: string;
    /**
     * Configures the Ory Kratos Verification Enabled Setting  This governs the \"selfservice.flows.verification.enabled\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_verification_enabled'?: boolean;
    /**
     * Configures the Ory Kratos Verification Lifespan  This governs the \"selfservice.flows.verification.lifespan\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_verification_lifespan'?: string;
    /**
     * Configures the Ory Kratos Verification UI URL  This governs the \"selfservice.flows.verification.ui_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_verification_ui_url'?: string;
    /**
     * Configures the Ory Kratos Code Method\'s lifespan  This governs the \"selfservice.methods.code.config.lifespan\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_code_config_lifespan'?: string;
    /**
     * Configures whether Ory Kratos Code Method is enabled  This governs the \"selfservice.methods.code.enabled\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_code_enabled'?: boolean;
    /**
     * Configures the Base URL which Recovery, Verification, and Login Links Point to  It is recommended to leave this value empty. It will be appropriately configured to the best matching domain (e.g. when using custom domains) automatically.  This governs the \"selfservice.methods.link.config.base_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_link_config_base_url'?: string;
    /**
     * Configures the Ory Kratos Link Method\'s lifespan  This governs the \"selfservice.methods.link.config.lifespan\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_link_config_lifespan'?: string;
    /**
     * Configures whether Ory Kratos Link Method is enabled  This governs the \"selfservice.methods.link.enabled\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_link_enabled'?: boolean;
    /**
     * Configures whether Ory Kratos TOTP Lookup Secret is enabled  This governs the \"selfservice.methods.lookup_secret.enabled\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_lookup_secret_enabled'?: boolean;
    /**
     * Configures the Ory Kratos Third Party / OpenID Connect base redirect URI  This governs the \"selfservice.methods.oidc.config.base_redirect_uri\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_oidc_config_base_redirect_uri'?: string;
    /**
     *
     * @type {Array<NormalizedProjectRevisionThirdPartyProvider>}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_oidc_config_providers'?: Array<NormalizedProjectRevisionThirdPartyProvider>;
    /**
     * Configures whether Ory Kratos Third Party / OpenID Connect Login is enabled  This governs the \"selfservice.methods.oidc.enabled\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_oidc_enabled'?: boolean;
    /**
     * Configures whether Ory Kratos Password HIBP Checks is enabled  This governs the \"selfservice.methods.password.config.haveibeenpwned_enabled\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_password_config_haveibeenpwned_enabled'?: boolean;
    /**
     * Configures whether Ory Kratos Password should disable the similarity policy.  This governs the \"selfservice.methods.password.config.identifier_similarity_check_enabled\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_password_config_identifier_similarity_check_enabled'?: boolean;
    /**
     * Configures whether Ory Kratos Password Should ignore HIBPWND Network Errors  This governs the \"selfservice.methods.password.config.ignore_network_errors\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_password_config_ignore_network_errors'?: boolean;
    /**
     * Configures Ory Kratos Password Max Breaches Detection  This governs the \"selfservice.methods.password.config.max_breaches\" setting.
     * @type {number}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_password_config_max_breaches'?: number;
    /**
     * Configures the minimum length of passwords.  This governs the \"selfservice.methods.password.config.min_password_length\" setting.
     * @type {number}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_password_config_min_password_length'?: number;
    /**
     * Configures whether Ory Kratos Password Method is enabled  This governs the \"selfservice.methods.password.enabled\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_password_enabled'?: boolean;
    /**
     * Configures whether Ory Kratos Profile Method is enabled  This governs the \"selfservice.methods.profile.enabled\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_profile_enabled'?: boolean;
    /**
     * Configures Ory Kratos TOTP Issuer  This governs the \"selfservice.methods.totp.config.issuer\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_totp_config_issuer'?: string;
    /**
     * Configures whether Ory Kratos TOTP Method is enabled  This governs the \"selfservice.methods.totp.enabled\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_totp_enabled'?: boolean;
    /**
     * Configures whether Ory Kratos Webauthn is used for passwordless flows  This governs the \"selfservice.methods.webauthn.config.passwordless\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_webauthn_config_passwordless'?: boolean;
    /**
     * Configures the Ory Kratos Webauthn RP Display Name  This governs the \"selfservice.methods.webauthn.config.rp.display_name\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_webauthn_config_rp_display_name'?: string;
    /**
     * Configures the Ory Kratos Webauthn RP Icon  This governs the \"selfservice.methods.webauthn.config.rp.icon\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_webauthn_config_rp_icon'?: string;
    /**
     * Configures the Ory Kratos Webauthn RP ID  This governs the \"selfservice.methods.webauthn.config.rp.id\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_webauthn_config_rp_id'?: string;
    /**
     * Configures the Ory Kratos Webauthn RP Origin  This governs the \"selfservice.methods.webauthn.config.rp.origin\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_webauthn_config_rp_origin'?: string;
    /**
     * Configures whether Ory Kratos Webauthn is enabled  This governs the \"selfservice.methods.webauthn.enabled\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_webauthn_enabled'?: boolean;
    /**
     * Configures the Ory Kratos Session Cookie Persistent Attribute  This governs the \"session.cookie.persistent\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_session_cookie_persistent'?: boolean;
    /**
     * Configures the Ory Kratos Session Cookie SameSite Attribute  This governs the \"session.cookie.same_site\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_session_cookie_same_site'?: string;
    /**
     * Configures the Ory Kratos Session Lifespan  This governs the \"session.lifespan\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_session_lifespan'?: string;
    /**
     * Configures the Ory Kratos Session Whoami AAL requirement  This governs the \"session.whoami.required_aal\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_session_whoami_required_aal'?: string;
    /**
     * The project\'s name.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'name': string;
    /**
     * Whether this project is in production mode or not.  In development mode, a low-security profile is used making it easier to develop against your, for example, local environment.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'production'?: boolean;
    /**
     * The Revision\'s Project ID
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'project_id'?: string;
    /**
     * Last Time Project\'s Revision was Updated
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface NormalizedProjectRevisionHook
 */
export interface NormalizedProjectRevisionHook {
    /**
     * The Hooks Config Key
     * @type {string}
     * @memberof NormalizedProjectRevisionHook
     */
    'config_key': string;
    /**
     * The Project\'s Revision Creation Date
     * @type {string}
     * @memberof NormalizedProjectRevisionHook
     */
    'created_at'?: string;
    /**
     * The Hook Type
     * @type {string}
     * @memberof NormalizedProjectRevisionHook
     */
    'hook': string;
    /**
     * ID of the entry
     * @type {string}
     * @memberof NormalizedProjectRevisionHook
     */
    'id'?: string;
    /**
     * The Revision\'s ID this schema belongs to
     * @type {string}
     * @memberof NormalizedProjectRevisionHook
     */
    'project_revision_id'?: string;
    /**
     * Last Time Project\'s Revision was Updated
     * @type {string}
     * @memberof NormalizedProjectRevisionHook
     */
    'updated_at'?: string;
    /**
     * Whether to send the API Key in the HTTP Header or as a HTTP Cookie
     * @type {string}
     * @memberof NormalizedProjectRevisionHook
     */
    'web_hook_config_auth_api_key_in'?: string;
    /**
     * The name of the api key
     * @type {string}
     * @memberof NormalizedProjectRevisionHook
     */
    'web_hook_config_auth_api_key_name'?: string;
    /**
     * The value of the api key
     * @type {string}
     * @memberof NormalizedProjectRevisionHook
     */
    'web_hook_config_auth_api_key_value'?: string;
    /**
     * The password to be sent in the HTTP Basic Auth Header
     * @type {string}
     * @memberof NormalizedProjectRevisionHook
     */
    'web_hook_config_auth_basic_auth_password'?: string;
    /**
     * The username to be sent in the HTTP Basic Auth Header
     * @type {string}
     * @memberof NormalizedProjectRevisionHook
     */
    'web_hook_config_auth_basic_auth_user'?: string;
    /**
     * HTTP Auth Method to use for the Web-Hook
     * @type {string}
     * @memberof NormalizedProjectRevisionHook
     */
    'web_hook_config_auth_type'?: string;
    /**
     * URI pointing to the JsonNet template used for Web-Hook payload generation. Only used for those HTTP methods, which support HTTP body payloads.
     * @type {string}
     * @memberof NormalizedProjectRevisionHook
     */
    'web_hook_config_body'?: string;
    /**
     * If enabled allows the web hook to interrupt / abort the self-service flow. It only applies to certain flows (registration/verification/login/settings) and requires a valid response format.
     * @type {boolean}
     * @memberof NormalizedProjectRevisionHook
     */
    'web_hook_config_can_interrupt'?: boolean;
    /**
     * The HTTP method to use (GET, POST, etc) for the Web-Hook
     * @type {string}
     * @memberof NormalizedProjectRevisionHook
     */
    'web_hook_config_method'?: string;
    /**
     * Whether to ignore the Web Hook response
     * @type {boolean}
     * @memberof NormalizedProjectRevisionHook
     */
    'web_hook_config_response_ignore'?: boolean;
    /**
     * The URL the Web-Hook should call
     * @type {string}
     * @memberof NormalizedProjectRevisionHook
     */
    'web_hook_config_url'?: string;
}
/**
 *
 * @export
 * @interface NormalizedProjectRevisionIdentitySchema
 */
export interface NormalizedProjectRevisionIdentitySchema {
    /**
     * The Project\'s Revision Creation Date
     * @type {string}
     * @memberof NormalizedProjectRevisionIdentitySchema
     */
    'created_at'?: string;
    /**
     * The unique ID of this entry.
     * @type {string}
     * @memberof NormalizedProjectRevisionIdentitySchema
     */
    'id'?: string;
    /**
     *
     * @type {ManagedIdentitySchema}
     * @memberof NormalizedProjectRevisionIdentitySchema
     */
    'identity_schema'?: ManagedIdentitySchema;
    /**
     *
     * @type {string}
     * @memberof NormalizedProjectRevisionIdentitySchema
     */
    'identity_schema_id'?: string | null;
    /**
     * The imported (named) ID of the Identity Schema referenced in the Ory Kratos config.
     * @type {string}
     * @memberof NormalizedProjectRevisionIdentitySchema
     */
    'import_id'?: string;
    /**
     * The ImportURL can be used to import an Identity Schema from a bse64 encoded string. In the future, this key also support HTTPS and other sources!  If you import an Ory Kratos configuration, this would be akin to the `identity.schemas.#.url` key.  The configuration will always return the import URL when you fetch it from the API.
     * @type {string}
     * @memberof NormalizedProjectRevisionIdentitySchema
     */
    'import_url'?: string;
    /**
     * If true sets the default schema for identities  Only one schema can ever be the default schema. If you try to add two schemas with default to true, the request will fail.
     * @type {boolean}
     * @memberof NormalizedProjectRevisionIdentitySchema
     */
    'is_default'?: boolean;
    /**
     * Use a preset instead of a custom identity schema.
     * @type {string}
     * @memberof NormalizedProjectRevisionIdentitySchema
     */
    'preset'?: string;
    /**
     * The Revision\'s ID this schema belongs to
     * @type {string}
     * @memberof NormalizedProjectRevisionIdentitySchema
     */
    'project_revision_id'?: string;
    /**
     * Last Time Project\'s Revision was Updated
     * @type {string}
     * @memberof NormalizedProjectRevisionIdentitySchema
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface NormalizedProjectRevisionThirdPartyProvider
 */
export interface NormalizedProjectRevisionThirdPartyProvider {
    /**
     *
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'apple_private_key'?: string | null;
    /**
     * Apple Private Key Identifier  Sign In with Apple Private Key Identifier needed for generating a JWT token for client secret
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'apple_private_key_id'?: string;
    /**
     * Apple Developer Team ID  Apple Developer Team ID needed for generating a JWT token for client secret
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'apple_team_id'?: string;
    /**
     * AuthURL is the authorize url, typically something like: https://example.org/oauth2/auth Should only be used when the OAuth2 / OpenID Connect server is not supporting OpenID Connect Discovery and when `provider` is set to `generic`.
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'auth_url'?: string;
    /**
     * Tenant is the Azure AD Tenant to use for authentication, and must be set when `provider` is set to `microsoft`.  Can be either `common`, `organizations`, `consumers` for a multitenant application or a specific tenant like `8eaef023-2b34-4da1-9baa-8bc8c9d6a490` or `contoso.onmicrosoft.com`.
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'azure_tenant'?: string;
    /**
     * ClientID is the application\'s Client ID.
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'client_id'?: string;
    /**
     *
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'client_secret'?: string | null;
    /**
     * The Project\'s Revision Creation Date
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'id'?: string;
    /**
     * IssuerURL is the OpenID Connect Server URL. You can leave this empty if `provider` is not set to `generic`. If set, neither `auth_url` nor `token_url` are required.
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'issuer_url'?: string;
    /**
     * Label represents an optional label which can be used in the UI generation.
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'label'?: string;
    /**
     * Mapper specifies the JSONNet code snippet which uses the OpenID Connect Provider\'s data (e.g. GitHub or Google profile information) to hydrate the identity\'s data.  It can be either a URL (file://, http(s)://, base64://) or an inline JSONNet code snippet.
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'mapper_url'?: string;
    /**
     * The Revision\'s ID this schema belongs to
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'project_revision_id'?: string;
    /**
     * Provider is either \"generic\" for a generic OAuth 2.0 / OpenID Connect Provider or one of: generic google github gitlab microsoft discord slack facebook vk yandex apple
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'provider'?: string;
    /**
     * ID is the provider\'s ID
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'provider_id'?: string;
    /**
     *
     * @type {object}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'requested_claims'?: object;
    /**
     *
     * @type {Array<string>}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'scope'?: Array<string>;
    /**
     * TokenURL is the token url, typically something like: https://example.org/oauth2/token  Should only be used when the OAuth2 / OpenID Connect server is not supporting OpenID Connect Discovery and when `provider` is set to `generic`.
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'token_url'?: string;
    /**
     * Last Time Project\'s Revision was Updated
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'updated_at'?: string;
}
/**
 *  unknown Unknown free Free start_up_monthly StartUpMonthly start_up_yearly StartUpYearly business_monthly BusinessMonthly business_yearly BusinessYearly custom Custom
 * @export
 * @enum {string}
 */
export declare const NullPlan: {
    readonly Unknown: "unknown";
    readonly Free: "free";
    readonly StartUpMonthly: "start_up_monthly";
    readonly StartUpYearly: "start_up_yearly";
    readonly BusinessMonthly: "business_monthly";
    readonly BusinessYearly: "business_yearly";
    readonly Custom: "custom";
};
export declare type NullPlan = typeof NullPlan[keyof typeof NullPlan];
/**
 *
 * @export
 * @interface OAuth2AccessRequest
 */
export interface OAuth2AccessRequest {
    /**
     * ClientID is the identifier of the OAuth 2.0 client.
     * @type {string}
     * @memberof OAuth2AccessRequest
     */
    'client_id'?: string;
    /**
     * GrantTypes is the requests grant types.
     * @type {Array<string>}
     * @memberof OAuth2AccessRequest
     */
    'grant_types'?: Array<string>;
    /**
     * GrantedAudience is the list of audiences granted to the OAuth 2.0 client.
     * @type {Array<string>}
     * @memberof OAuth2AccessRequest
     */
    'granted_audience'?: Array<string>;
    /**
     * GrantedScopes is the list of scopes granted to the OAuth 2.0 client.
     * @type {Array<string>}
     * @memberof OAuth2AccessRequest
     */
    'granted_scopes'?: Array<string>;
}
/**
 * An API error caused by Ory\'s OAuth 2.0 APIs.
 * @export
 * @interface OAuth2ApiError
 */
export interface OAuth2ApiError {
    /**
     * Name is the error name.
     * @type {string}
     * @memberof OAuth2ApiError
     */
    'error'?: string;
    /**
     * Debug contains debug information. This is usually not available and has to be enabled.
     * @type {string}
     * @memberof OAuth2ApiError
     */
    'error_debug'?: string;
    /**
     * Description contains further information on the nature of the error.
     * @type {string}
     * @memberof OAuth2ApiError
     */
    'error_description'?: string;
    /**
     * Code represents the error status code (404, 403, 401, ...).
     * @type {number}
     * @memberof OAuth2ApiError
     */
    'status_code'?: number;
}
/**
 *
 * @export
 * @interface OAuth2Client
 */
export interface OAuth2Client {
    /**
     *
     * @type {Array<string>}
     * @memberof OAuth2Client
     */
    'allowed_cors_origins'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof OAuth2Client
     */
    'audience'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof OAuth2Client
     */
    'authorization_code_grant_access_token_lifespan'?: string | null;
    /**
     *
     * @type {string}
     * @memberof OAuth2Client
     */
    'authorization_code_grant_id_token_lifespan'?: string | null;
    /**
     *
     * @type {string}
     * @memberof OAuth2Client
     */
    'authorization_code_grant_refresh_token_lifespan'?: string | null;
    /**
     * Boolean value specifying whether the RP requires that a sid (session ID) Claim be included in the Logout Token to identify the RP session with the OP when the backchannel_logout_uri is used. If omitted, the default value is false.
     * @type {boolean}
     * @memberof OAuth2Client
     */
    'backchannel_logout_session_required'?: boolean;
    /**
     * RP URL that will cause the RP to log itself out when sent a Logout Token by the OP.
     * @type {string}
     * @memberof OAuth2Client
     */
    'backchannel_logout_uri'?: string;
    /**
     *
     * @type {string}
     * @memberof OAuth2Client
     */
    'client_credentials_grant_access_token_lifespan'?: string | null;
    /**
     * ID is the id for this client.  The ID is autogenerated and immutable.
     * @type {string}
     * @memberof OAuth2Client
     */
    'client_id'?: string;
    /**
     * Name is the human-readable string name of the client to be presented to the end-user during authorization.
     * @type {string}
     * @memberof OAuth2Client
     */
    'client_name'?: string;
    /**
     * Secret is the client\'s secret. The secret will be included in the create request as cleartext, and then never again. The secret is stored using BCrypt so it is impossible to recover it. Tell your users that they need to write the secret down as it will not be made available again.
     * @type {string}
     * @memberof OAuth2Client
     */
    'client_secret'?: string;
    /**
     * SecretExpiresAt is an integer holding the time at which the client secret will expire or 0 if it will not expire. The time is represented as the number of seconds from 1970-01-01T00:00:00Z as measured in UTC until the date/time of expiration.  This feature is currently not supported and it\'s value will always be set to 0.
     * @type {number}
     * @memberof OAuth2Client
     */
    'client_secret_expires_at'?: number;
    /**
     * ClientURI is an URL string of a web page providing information about the client. If present, the server SHOULD display this URL to the end-user in a clickable fashion.
     * @type {string}
     * @memberof OAuth2Client
     */
    'client_uri'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof OAuth2Client
     */
    'contacts'?: Array<string>;
    /**
     * CreatedAt returns the timestamp of the client\'s creation.
     * @type {string}
     * @memberof OAuth2Client
     */
    'created_at'?: string;
    /**
     * Boolean value specifying whether the RP requires that iss (issuer) and sid (session ID) query parameters be included to identify the RP session with the OP when the frontchannel_logout_uri is used. If omitted, the default value is false.
     * @type {boolean}
     * @memberof OAuth2Client
     */
    'frontchannel_logout_session_required'?: boolean;
    /**
     * RP URL that will cause the RP to log itself out when rendered in an iframe by the OP. An iss (issuer) query parameter and a sid (session ID) query parameter MAY be included by the OP to enable the RP to validate the request and to determine which of the potentially multiple sessions is to be logged out; if either is included, both MUST be.
     * @type {string}
     * @memberof OAuth2Client
     */
    'frontchannel_logout_uri'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof OAuth2Client
     */
    'grant_types'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof OAuth2Client
     */
    'implicit_grant_access_token_lifespan'?: string | null;
    /**
     *
     * @type {string}
     * @memberof OAuth2Client
     */
    'implicit_grant_id_token_lifespan'?: string | null;
    /**
     *
     * @type {object}
     * @memberof OAuth2Client
     */
    'jwks'?: object;
    /**
     * URL for the Client\'s JSON Web Key Set [JWK] document. If the Client signs requests to the Server, it contains the signing key(s) the Server uses to validate signatures from the Client. The JWK Set MAY also contain the Client\'s encryption keys(s), which are used by the Server to encrypt responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key\'s intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.
     * @type {string}
     * @memberof OAuth2Client
     */
    'jwks_uri'?: string;
    /**
     *
     * @type {string}
     * @memberof OAuth2Client
     */
    'jwt_bearer_grant_access_token_lifespan'?: string | null;
    /**
     * LogoURI is an URL string that references a logo for the client.
     * @type {string}
     * @memberof OAuth2Client
     */
    'logo_uri'?: string;
    /**
     *
     * @type {object}
     * @memberof OAuth2Client
     */
    'metadata'?: object;
    /**
     * Owner is a string identifying the owner of the OAuth 2.0 Client.
     * @type {string}
     * @memberof OAuth2Client
     */
    'owner'?: string;
    /**
     *
     * @type {string}
     * @memberof OAuth2Client
     */
    'password_grant_access_token_lifespan'?: string | null;
    /**
     *
     * @type {string}
     * @memberof OAuth2Client
     */
    'password_grant_refresh_token_lifespan'?: string | null;
    /**
     * PolicyURI is a URL string that points to a human-readable privacy policy document that describes how the deployment organization collects, uses, retains, and discloses personal data.
     * @type {string}
     * @memberof OAuth2Client
     */
    'policy_uri'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof OAuth2Client
     */
    'post_logout_redirect_uris'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof OAuth2Client
     */
    'redirect_uris'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof OAuth2Client
     */
    'refresh_token_grant_access_token_lifespan'?: string | null;
    /**
     *
     * @type {string}
     * @memberof OAuth2Client
     */
    'refresh_token_grant_id_token_lifespan'?: string | null;
    /**
     *
     * @type {string}
     * @memberof OAuth2Client
     */
    'refresh_token_grant_refresh_token_lifespan'?: string | null;
    /**
     * RegistrationAccessToken can be used to update, get, or delete the OAuth2 Client.
     * @type {string}
     * @memberof OAuth2Client
     */
    'registration_access_token'?: string;
    /**
     * RegistrationClientURI is the URL used to update, get, or delete the OAuth2 Client.
     * @type {string}
     * @memberof OAuth2Client
     */
    'registration_client_uri'?: string;
    /**
     * JWS [JWS] alg algorithm [JWA] that MUST be used for signing Request Objects sent to the OP. All Request Objects from this Client MUST be rejected, if not signed with this algorithm.
     * @type {string}
     * @memberof OAuth2Client
     */
    'request_object_signing_alg'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof OAuth2Client
     */
    'request_uris'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof OAuth2Client
     */
    'response_types'?: Array<string>;
    /**
     * Scope is a string containing a space-separated list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client can use when requesting access tokens.
     * @type {string}
     * @memberof OAuth2Client
     */
    'scope'?: string;
    /**
     * URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP. The URL references a file with a single JSON array of redirect_uri values.
     * @type {string}
     * @memberof OAuth2Client
     */
    'sector_identifier_uri'?: string;
    /**
     * SubjectType requested for responses to this Client. The subject_types_supported Discovery parameter contains a list of the supported subject_type values for this server. Valid types include `pairwise` and `public`.
     * @type {string}
     * @memberof OAuth2Client
     */
    'subject_type'?: string;
    /**
     * Requested Client Authentication method for the Token Endpoint. The options are client_secret_post, client_secret_basic, private_key_jwt, and none.
     * @type {string}
     * @memberof OAuth2Client
     */
    'token_endpoint_auth_method'?: string;
    /**
     * Requested Client Authentication signing algorithm for the Token Endpoint.
     * @type {string}
     * @memberof OAuth2Client
     */
    'token_endpoint_auth_signing_alg'?: string;
    /**
     * TermsOfServiceURI is a URL string that points to a human-readable terms of service document for the client that describes a contractual relationship between the end-user and the client that the end-user accepts when authorizing the client.
     * @type {string}
     * @memberof OAuth2Client
     */
    'tos_uri'?: string;
    /**
     * UpdatedAt returns the timestamp of the last update.
     * @type {string}
     * @memberof OAuth2Client
     */
    'updated_at'?: string;
    /**
     * JWS alg algorithm [JWA] REQUIRED for signing UserInfo Responses. If this is specified, the response will be JWT [JWT] serialized, and signed using JWS. The default, if omitted, is for the UserInfo Response to return the Claims as a UTF-8 encoded JSON object using the application/json content-type.
     * @type {string}
     * @memberof OAuth2Client
     */
    'userinfo_signed_response_alg'?: string;
}
/**
 *
 * @export
 * @interface OAuth2ConsentRequest
 */
export interface OAuth2ConsentRequest {
    /**
     * ACR represents the Authentication AuthorizationContext Class Reference value for this authentication session. You can use it to express that, for example, a user authenticated using two factor authentication.
     * @type {string}
     * @memberof OAuth2ConsentRequest
     */
    'acr'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof OAuth2ConsentRequest
     */
    'amr'?: Array<string>;
    /**
     * ID is the identifier (\"authorization challenge\") of the consent authorization request. It is used to identify the session.
     * @type {string}
     * @memberof OAuth2ConsentRequest
     */
    'challenge': string;
    /**
     *
     * @type {OAuth2Client}
     * @memberof OAuth2ConsentRequest
     */
    'client'?: OAuth2Client;
    /**
     *
     * @type {object}
     * @memberof OAuth2ConsentRequest
     */
    'context'?: object;
    /**
     * LoginChallenge is the login challenge this consent challenge belongs to. It can be used to associate a login and consent request in the login & consent app.
     * @type {string}
     * @memberof OAuth2ConsentRequest
     */
    'login_challenge'?: string;
    /**
     * LoginSessionID is the login session ID. If the user-agent reuses a login session (via cookie / remember flag) this ID will remain the same. If the user-agent did not have an existing authentication session (e.g. remember is false) this will be a new random value. This value is used as the \"sid\" parameter in the ID Token and in OIDC Front-/Back- channel logout. It\'s value can generally be used to associate consecutive login requests by a certain user.
     * @type {string}
     * @memberof OAuth2ConsentRequest
     */
    'login_session_id'?: string;
    /**
     *
     * @type {OAuth2ConsentRequestOpenIDConnectContext}
     * @memberof OAuth2ConsentRequest
     */
    'oidc_context'?: OAuth2ConsentRequestOpenIDConnectContext;
    /**
     * RequestURL is the original OAuth 2.0 Authorization URL requested by the OAuth 2.0 client. It is the URL which initiates the OAuth 2.0 Authorization Code or OAuth 2.0 Implicit flow. This URL is typically not needed, but might come in handy if you want to deal with additional request parameters.
     * @type {string}
     * @memberof OAuth2ConsentRequest
     */
    'request_url'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof OAuth2ConsentRequest
     */
    'requested_access_token_audience'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof OAuth2ConsentRequest
     */
    'requested_scope'?: Array<string>;
    /**
     * Skip, if true, implies that the client has requested the same scopes from the same user previously. If true, you must not ask the user to grant the requested scopes. You must however either allow or deny the consent request using the usual API call.
     * @type {boolean}
     * @memberof OAuth2ConsentRequest
     */
    'skip'?: boolean;
    /**
     * Subject is the user ID of the end-user that authenticated. Now, that end user needs to grant or deny the scope requested by the OAuth 2.0 client.
     * @type {string}
     * @memberof OAuth2ConsentRequest
     */
    'subject'?: string;
}
/**
 *
 * @export
 * @interface OAuth2ConsentRequestOpenIDConnectContext
 */
export interface OAuth2ConsentRequestOpenIDConnectContext {
    /**
     * ACRValues is the Authentication AuthorizationContext Class Reference requested in the OAuth 2.0 Authorization request. It is a parameter defined by OpenID Connect and expresses which level of authentication (e.g. 2FA) is required.  OpenID Connect defines it as follows: > Requested Authentication AuthorizationContext Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference. The Authentication AuthorizationContext Class satisfied by the authentication performed is returned as the acr Claim Value, as specified in Section 2. The acr Claim is requested as a Voluntary Claim by this parameter.
     * @type {Array<string>}
     * @memberof OAuth2ConsentRequestOpenIDConnectContext
     */
    'acr_values'?: Array<string>;
    /**
     * Display is a string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User. The defined values are: page: The Authorization Server SHOULD display the authentication and consent UI consistent with a full User Agent page view. If the display parameter is not specified, this is the default display mode. popup: The Authorization Server SHOULD display the authentication and consent UI consistent with a popup User Agent window. The popup User Agent window should be of an appropriate size for a login-focused dialog and should not obscure the entire window that it is popping up over. touch: The Authorization Server SHOULD display the authentication and consent UI consistent with a device that leverages a touch interface. wap: The Authorization Server SHOULD display the authentication and consent UI consistent with a \"feature phone\" type display.  The Authorization Server MAY also attempt to detect the capabilities of the User Agent and present an appropriate display.
     * @type {string}
     * @memberof OAuth2ConsentRequestOpenIDConnectContext
     */
    'display'?: string;
    /**
     * IDTokenHintClaims are the claims of the ID Token previously issued by the Authorization Server being passed as a hint about the End-User\'s current or past authenticated session with the Client.
     * @type {{ [key: string]: object; }}
     * @memberof OAuth2ConsentRequestOpenIDConnectContext
     */
    'id_token_hint_claims'?: {
        [key: string]: object;
    };
    /**
     * LoginHint hints about the login identifier the End-User might use to log in (if necessary). This hint can be used by an RP if it first asks the End-User for their e-mail address (or other identifier) and then wants to pass that value as a hint to the discovered authorization service. This value MAY also be a phone number in the format specified for the phone_number Claim. The use of this parameter is optional.
     * @type {string}
     * @memberof OAuth2ConsentRequestOpenIDConnectContext
     */
    'login_hint'?: string;
    /**
     * UILocales is the End-User\'id preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value \"fr-CA fr en\" represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.
     * @type {Array<string>}
     * @memberof OAuth2ConsentRequestOpenIDConnectContext
     */
    'ui_locales'?: Array<string>;
}
/**
 *
 * @export
 * @interface OAuth2ConsentSession
 */
export interface OAuth2ConsentSession {
    /**
     *
     * @type {Array<string>}
     * @memberof OAuth2ConsentSession
     */
    'allowed_top_level_claims'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof OAuth2ConsentSession
     */
    'client_id'?: string;
    /**
     *
     * @type {string}
     * @memberof OAuth2ConsentSession
     */
    'consent_challenge'?: string;
    /**
     *
     * @type {boolean}
     * @memberof OAuth2ConsentSession
     */
    'exclude_not_before_claim'?: boolean;
    /**
     *
     * @type {OAuth2ConsentSessionExpiresAt}
     * @memberof OAuth2ConsentSession
     */
    'expires_at'?: OAuth2ConsentSessionExpiresAt;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof OAuth2ConsentSession
     */
    'extra'?: {
        [key: string]: object;
    };
    /**
     *
     * @type {Headers}
     * @memberof OAuth2ConsentSession
     */
    'headers'?: Headers;
    /**
     *
     * @type {IDTokenClaims}
     * @memberof OAuth2ConsentSession
     */
    'id_token_claims'?: IDTokenClaims;
    /**
     *
     * @type {string}
     * @memberof OAuth2ConsentSession
     */
    'kid'?: string;
    /**
     *
     * @type {string}
     * @memberof OAuth2ConsentSession
     */
    'subject'?: string;
    /**
     *
     * @type {string}
     * @memberof OAuth2ConsentSession
     */
    'username'?: string;
}
/**
 *
 * @export
 * @interface OAuth2ConsentSessionExpiresAt
 */
export interface OAuth2ConsentSessionExpiresAt {
    /**
     *
     * @type {string}
     * @memberof OAuth2ConsentSessionExpiresAt
     */
    'access_token'?: string;
    /**
     *
     * @type {string}
     * @memberof OAuth2ConsentSessionExpiresAt
     */
    'authorize_code'?: string;
    /**
     *
     * @type {string}
     * @memberof OAuth2ConsentSessionExpiresAt
     */
    'id_token'?: string;
    /**
     *
     * @type {string}
     * @memberof OAuth2ConsentSessionExpiresAt
     */
    'par_context'?: string;
    /**
     *
     * @type {string}
     * @memberof OAuth2ConsentSessionExpiresAt
     */
    'refresh_token'?: string;
}
/**
 *
 * @export
 * @interface OAuth2LoginRequest
 */
export interface OAuth2LoginRequest {
    /**
     * ID is the identifier (\"login challenge\") of the login request. It is used to identify the session.
     * @type {string}
     * @memberof OAuth2LoginRequest
     */
    'challenge': string;
    /**
     *
     * @type {OAuth2Client}
     * @memberof OAuth2LoginRequest
     */
    'client': OAuth2Client;
    /**
     *
     * @type {OAuth2ConsentRequestOpenIDConnectContext}
     * @memberof OAuth2LoginRequest
     */
    'oidc_context'?: OAuth2ConsentRequestOpenIDConnectContext;
    /**
     * RequestURL is the original OAuth 2.0 Authorization URL requested by the OAuth 2.0 client. It is the URL which initiates the OAuth 2.0 Authorization Code or OAuth 2.0 Implicit flow. This URL is typically not needed, but might come in handy if you want to deal with additional request parameters.
     * @type {string}
     * @memberof OAuth2LoginRequest
     */
    'request_url': string;
    /**
     *
     * @type {Array<string>}
     * @memberof OAuth2LoginRequest
     */
    'requested_access_token_audience': Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof OAuth2LoginRequest
     */
    'requested_scope': Array<string>;
    /**
     * SessionID is the login session ID. If the user-agent reuses a login session (via cookie / remember flag) this ID will remain the same. If the user-agent did not have an existing authentication session (e.g. remember is false) this will be a new random value. This value is used as the \"sid\" parameter in the ID Token and in OIDC Front-/Back- channel logout. It\'s value can generally be used to associate consecutive login requests by a certain user.
     * @type {string}
     * @memberof OAuth2LoginRequest
     */
    'session_id'?: string;
    /**
     * Skip, if true, implies that the client has requested the same scopes from the same user previously. If true, you can skip asking the user to grant the requested scopes, and simply forward the user to the redirect URL.  This feature allows you to update / set session information.
     * @type {boolean}
     * @memberof OAuth2LoginRequest
     */
    'skip': boolean;
    /**
     * Subject is the user ID of the end-user that authenticated. Now, that end user needs to grant or deny the scope requested by the OAuth 2.0 client. If this value is set and `skip` is true, you MUST include this subject type when accepting the login request, or the request will fail.
     * @type {string}
     * @memberof OAuth2LoginRequest
     */
    'subject': string;
}
/**
 *
 * @export
 * @interface OAuth2LogoutRequest
 */
export interface OAuth2LogoutRequest {
    /**
     * Challenge is the identifier (\"logout challenge\") of the logout authentication request. It is used to identify the session.
     * @type {string}
     * @memberof OAuth2LogoutRequest
     */
    'challenge'?: string;
    /**
     *
     * @type {OAuth2Client}
     * @memberof OAuth2LogoutRequest
     */
    'client'?: OAuth2Client;
    /**
     * RequestURL is the original Logout URL requested.
     * @type {string}
     * @memberof OAuth2LogoutRequest
     */
    'request_url'?: string;
    /**
     * RPInitiated is set to true if the request was initiated by a Relying Party (RP), also known as an OAuth 2.0 Client.
     * @type {boolean}
     * @memberof OAuth2LogoutRequest
     */
    'rp_initiated'?: boolean;
    /**
     * SessionID is the login session ID that was requested to log out.
     * @type {string}
     * @memberof OAuth2LogoutRequest
     */
    'sid'?: string;
    /**
     * Subject is the user for whom the logout was request.
     * @type {string}
     * @memberof OAuth2LogoutRequest
     */
    'subject'?: string;
}
/**
 * OAuth2 Token Response
 * @export
 * @interface OAuth2TokenResponse
 */
export interface OAuth2TokenResponse {
    /**
     * The access token issued by the authorization server.
     * @type {string}
     * @memberof OAuth2TokenResponse
     */
    'access_token'?: string;
    /**
     * The lifetime in seconds of the access token.  For example, the value \"3600\" denotes that the access token will expire in one hour from the time the response was generated.
     * @type {number}
     * @memberof OAuth2TokenResponse
     */
    'expires_in'?: number;
    /**
     * To retrieve a refresh token request the id_token scope.
     * @type {number}
     * @memberof OAuth2TokenResponse
     */
    'id_token'?: number;
    /**
     * The refresh token, which can be used to obtain new access tokens. To retrieve it add the scope \"offline\" to your access token request.
     * @type {string}
     * @memberof OAuth2TokenResponse
     */
    'refresh_token'?: string;
    /**
     * The scope of the access token
     * @type {number}
     * @memberof OAuth2TokenResponse
     */
    'scope'?: number;
    /**
     * The type of the token issued
     * @type {string}
     * @memberof OAuth2TokenResponse
     */
    'token_type'?: string;
}
/**
 * It includes links to several endpoints (for example `/oauth2/token`) and exposes information on supported signature algorithms among others.
 * @export
 * @interface OidcConfiguration
 */
export interface OidcConfiguration {
    /**
     * URL of the OP\'s OAuth 2.0 Authorization Endpoint.
     * @type {string}
     * @memberof OidcConfiguration
     */
    'authorization_endpoint': string;
    /**
     * Boolean value specifying whether the OP can pass a sid (session ID) Claim in the Logout Token to identify the RP session with the OP. If supported, the sid Claim is also included in ID Tokens issued by the OP
     * @type {boolean}
     * @memberof OidcConfiguration
     */
    'backchannel_logout_session_supported'?: boolean;
    /**
     * Boolean value specifying whether the OP supports back-channel logout, with true indicating support.
     * @type {boolean}
     * @memberof OidcConfiguration
     */
    'backchannel_logout_supported'?: boolean;
    /**
     * Boolean value specifying whether the OP supports use of the claims parameter, with true indicating support.
     * @type {boolean}
     * @memberof OidcConfiguration
     */
    'claims_parameter_supported'?: boolean;
    /**
     * JSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply values for. Note that for privacy or other reasons, this might not be an exhaustive list.
     * @type {Array<string>}
     * @memberof OidcConfiguration
     */
    'claims_supported'?: Array<string>;
    /**
     * JSON array containing a list of Proof Key for Code Exchange (PKCE) [RFC7636] code challenge methods supported by this authorization server.
     * @type {Array<string>}
     * @memberof OidcConfiguration
     */
    'code_challenge_methods_supported'?: Array<string>;
    /**
     * URL at the OP to which an RP can perform a redirect to request that the End-User be logged out at the OP.
     * @type {string}
     * @memberof OidcConfiguration
     */
    'end_session_endpoint'?: string;
    /**
     * Boolean value specifying whether the OP can pass iss (issuer) and sid (session ID) query parameters to identify the RP session with the OP when the frontchannel_logout_uri is used. If supported, the sid Claim is also included in ID Tokens issued by the OP.
     * @type {boolean}
     * @memberof OidcConfiguration
     */
    'frontchannel_logout_session_supported'?: boolean;
    /**
     * Boolean value specifying whether the OP supports HTTP-based logout, with true indicating support.
     * @type {boolean}
     * @memberof OidcConfiguration
     */
    'frontchannel_logout_supported'?: boolean;
    /**
     * JSON array containing a list of the OAuth 2.0 Grant Type values that this OP supports.
     * @type {Array<string>}
     * @memberof OidcConfiguration
     */
    'grant_types_supported'?: Array<string>;
    /**
     * Algorithm used to sign OpenID Connect ID Tokens.
     * @type {Array<string>}
     * @memberof OidcConfiguration
     */
    'id_token_signed_response_alg': Array<string>;
    /**
     * JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for the ID Token to encode the Claims in a JWT.
     * @type {Array<string>}
     * @memberof OidcConfiguration
     */
    'id_token_signing_alg_values_supported': Array<string>;
    /**
     * URL using the https scheme with no query or fragment component that the OP asserts as its IssuerURL Identifier. If IssuerURL discovery is supported , this value MUST be identical to the issuer value returned by WebFinger. This also MUST be identical to the iss Claim value in ID Tokens issued from this IssuerURL.
     * @type {string}
     * @memberof OidcConfiguration
     */
    'issuer': string;
    /**
     * URL of the OP\'s JSON Web Key Set [JWK] document. This contains the signing key(s) the RP uses to validate signatures from the OP. The JWK Set MAY also contain the Server\'s encryption key(s), which are used by RPs to encrypt requests to the Server. When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key\'s intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.
     * @type {string}
     * @memberof OidcConfiguration
     */
    'jwks_uri': string;
    /**
     * URL of the OP\'s Dynamic Client Registration Endpoint.
     * @type {string}
     * @memberof OidcConfiguration
     */
    'registration_endpoint'?: string;
    /**
     * JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for Request Objects, which are described in Section 6.1 of OpenID Connect Core 1.0 [OpenID.Core]. These algorithms are used both when the Request Object is passed by value (using the request parameter) and when it is passed by reference (using the request_uri parameter).
     * @type {Array<string>}
     * @memberof OidcConfiguration
     */
    'request_object_signing_alg_values_supported'?: Array<string>;
    /**
     * Boolean value specifying whether the OP supports use of the request parameter, with true indicating support.
     * @type {boolean}
     * @memberof OidcConfiguration
     */
    'request_parameter_supported'?: boolean;
    /**
     * Boolean value specifying whether the OP supports use of the request_uri parameter, with true indicating support.
     * @type {boolean}
     * @memberof OidcConfiguration
     */
    'request_uri_parameter_supported'?: boolean;
    /**
     * Boolean value specifying whether the OP requires any request_uri values used to be pre-registered using the request_uris registration parameter.
     * @type {boolean}
     * @memberof OidcConfiguration
     */
    'require_request_uri_registration'?: boolean;
    /**
     * JSON array containing a list of the OAuth 2.0 response_mode values that this OP supports.
     * @type {Array<string>}
     * @memberof OidcConfiguration
     */
    'response_modes_supported'?: Array<string>;
    /**
     * JSON array containing a list of the OAuth 2.0 response_type values that this OP supports. Dynamic OpenID Providers MUST support the code, id_token, and the token id_token Response Type values.
     * @type {Array<string>}
     * @memberof OidcConfiguration
     */
    'response_types_supported': Array<string>;
    /**
     * URL of the authorization server\'s OAuth 2.0 revocation endpoint.
     * @type {string}
     * @memberof OidcConfiguration
     */
    'revocation_endpoint'?: string;
    /**
     * SON array containing a list of the OAuth 2.0 [RFC6749] scope values that this server supports. The server MUST support the openid scope value. Servers MAY choose not to advertise some supported scope values even when this parameter is used
     * @type {Array<string>}
     * @memberof OidcConfiguration
     */
    'scopes_supported'?: Array<string>;
    /**
     * JSON array containing a list of the Subject Identifier types that this OP supports. Valid types include pairwise and public.
     * @type {Array<string>}
     * @memberof OidcConfiguration
     */
    'subject_types_supported': Array<string>;
    /**
     * URL of the OP\'s OAuth 2.0 Token Endpoint
     * @type {string}
     * @memberof OidcConfiguration
     */
    'token_endpoint': string;
    /**
     * JSON array containing a list of Client Authentication methods supported by this Token Endpoint. The options are client_secret_post, client_secret_basic, client_secret_jwt, and private_key_jwt, as described in Section 9 of OpenID Connect Core 1.0
     * @type {Array<string>}
     * @memberof OidcConfiguration
     */
    'token_endpoint_auth_methods_supported'?: Array<string>;
    /**
     * URL of the OP\'s UserInfo Endpoint.
     * @type {string}
     * @memberof OidcConfiguration
     */
    'userinfo_endpoint'?: string;
    /**
     * Algorithm used to sign OpenID Connect Userinfo Responses.
     * @type {Array<string>}
     * @memberof OidcConfiguration
     */
    'userinfo_signed_response_alg': Array<string>;
    /**
     * JSON array containing a list of the JWS [JWS] signing algorithms (alg values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT].
     * @type {Array<string>}
     * @memberof OidcConfiguration
     */
    'userinfo_signing_alg_values_supported'?: Array<string>;
}
/**
 * The userinfo response
 * @export
 * @interface OidcUserInfo
 */
export interface OidcUserInfo {
    /**
     * End-User\'s birthday, represented as an ISO 8601:2004 [ISO8601‑2004] YYYY-MM-DD format. The year MAY be 0000, indicating that it is omitted. To represent only the year, YYYY format is allowed. Note that depending on the underlying platform\'s date related function, providing just year can result in varying month and day, so the implementers need to take this factor into account to correctly process the dates.
     * @type {string}
     * @memberof OidcUserInfo
     */
    'birthdate'?: string;
    /**
     * End-User\'s preferred e-mail address. Its value MUST conform to the RFC 5322 [RFC5322] addr-spec syntax. The RP MUST NOT rely upon this value being unique, as discussed in Section 5.7.
     * @type {string}
     * @memberof OidcUserInfo
     */
    'email'?: string;
    /**
     * True if the End-User\'s e-mail address has been verified; otherwise false. When this Claim Value is true, this means that the OP took affirmative steps to ensure that this e-mail address was controlled by the End-User at the time the verification was performed. The means by which an e-mail address is verified is context-specific, and dependent upon the trust framework or contractual agreements within which the parties are operating.
     * @type {boolean}
     * @memberof OidcUserInfo
     */
    'email_verified'?: boolean;
    /**
     * Surname(s) or last name(s) of the End-User. Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.
     * @type {string}
     * @memberof OidcUserInfo
     */
    'family_name'?: string;
    /**
     * End-User\'s gender. Values defined by this specification are female and male. Other values MAY be used when neither of the defined values are applicable.
     * @type {string}
     * @memberof OidcUserInfo
     */
    'gender'?: string;
    /**
     * Given name(s) or first name(s) of the End-User. Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.
     * @type {string}
     * @memberof OidcUserInfo
     */
    'given_name'?: string;
    /**
     * End-User\'s locale, represented as a BCP47 [RFC5646] language tag. This is typically an ISO 639-1 Alpha-2 [ISO639‑1] language code in lowercase and an ISO 3166-1 Alpha-2 [ISO3166‑1] country code in uppercase, separated by a dash. For example, en-US or fr-CA. As a compatibility note, some implementations have used an underscore as the separator rather than a dash, for example, en_US; Relying Parties MAY choose to accept this locale syntax as well.
     * @type {string}
     * @memberof OidcUserInfo
     */
    'locale'?: string;
    /**
     * Middle name(s) of the End-User. Note that in some cultures, people can have multiple middle names; all can be present, with the names being separated by space characters. Also note that in some cultures, middle names are not used.
     * @type {string}
     * @memberof OidcUserInfo
     */
    'middle_name'?: string;
    /**
     * End-User\'s full name in displayable form including all name parts, possibly including titles and suffixes, ordered according to the End-User\'s locale and preferences.
     * @type {string}
     * @memberof OidcUserInfo
     */
    'name'?: string;
    /**
     * Casual name of the End-User that may or may not be the same as the given_name. For instance, a nickname value of Mike might be returned alongside a given_name value of Michael.
     * @type {string}
     * @memberof OidcUserInfo
     */
    'nickname'?: string;
    /**
     * End-User\'s preferred telephone number. E.164 [E.164] is RECOMMENDED as the format of this Claim, for example, +1 (425) 555-1212 or +56 (2) 687 2400. If the phone number contains an extension, it is RECOMMENDED that the extension be represented using the RFC 3966 [RFC3966] extension syntax, for example, +1 (604) 555-1234;ext=5678.
     * @type {string}
     * @memberof OidcUserInfo
     */
    'phone_number'?: string;
    /**
     * True if the End-User\'s phone number has been verified; otherwise false. When this Claim Value is true, this means that the OP took affirmative steps to ensure that this phone number was controlled by the End-User at the time the verification was performed. The means by which a phone number is verified is context-specific, and dependent upon the trust framework or contractual agreements within which the parties are operating. When true, the phone_number Claim MUST be in E.164 format and any extensions MUST be represented in RFC 3966 format.
     * @type {boolean}
     * @memberof OidcUserInfo
     */
    'phone_number_verified'?: boolean;
    /**
     * URL of the End-User\'s profile picture. This URL MUST refer to an image file (for example, a PNG, JPEG, or GIF image file), rather than to a Web page containing an image. Note that this URL SHOULD specifically reference a profile photo of the End-User suitable for displaying when describing the End-User, rather than an arbitrary photo taken by the End-User.
     * @type {string}
     * @memberof OidcUserInfo
     */
    'picture'?: string;
    /**
     * Non-unique shorthand name by which the End-User wishes to be referred to at the RP, such as janedoe or j.doe. This value MAY be any valid JSON string including special characters such as @, /, or whitespace.
     * @type {string}
     * @memberof OidcUserInfo
     */
    'preferred_username'?: string;
    /**
     * URL of the End-User\'s profile page. The contents of this Web page SHOULD be about the End-User.
     * @type {string}
     * @memberof OidcUserInfo
     */
    'profile'?: string;
    /**
     * Subject - Identifier for the End-User at the IssuerURL.
     * @type {string}
     * @memberof OidcUserInfo
     */
    'sub'?: string;
    /**
     * Time the End-User\'s information was last updated. Its value is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time.
     * @type {number}
     * @memberof OidcUserInfo
     */
    'updated_at'?: number;
    /**
     * URL of the End-User\'s Web page or blog. This Web page SHOULD contain information published by the End-User or an organization that the End-User is affiliated with.
     * @type {string}
     * @memberof OidcUserInfo
     */
    'website'?: string;
    /**
     * String from zoneinfo [zoneinfo] time zone database representing the End-User\'s time zone. For example, Europe/Paris or America/Los_Angeles.
     * @type {string}
     * @memberof OidcUserInfo
     */
    'zoneinfo'?: string;
}
/**
 *
 * @export
 * @interface Pagination
 */
export interface Pagination {
    /**
     * Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
     * @type {number}
     * @memberof Pagination
     */
    'page'?: number;
    /**
     * Items per page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     * @type {number}
     * @memberof Pagination
     */
    'page_size'?: number;
    /**
     * Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     * @type {string}
     * @memberof Pagination
     */
    'page_token'?: string;
    /**
     * Items per Page  This is the number of items per page.
     * @type {number}
     * @memberof Pagination
     */
    'per_page'?: number;
}
/**
 *
 * @export
 * @interface PaginationHeaders
 */
export interface PaginationHeaders {
    /**
     * The link header contains pagination links.  For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).  in: header
     * @type {string}
     * @memberof PaginationHeaders
     */
    'link'?: string;
    /**
     * The total number of clients.  in: header
     * @type {string}
     * @memberof PaginationHeaders
     */
    'x-total-count'?: string;
}
/**
 *
 * @export
 * @interface ParseError
 */
export interface ParseError {
    /**
     *
     * @type {SourcePosition}
     * @memberof ParseError
     */
    'end'?: SourcePosition;
    /**
     *
     * @type {string}
     * @memberof ParseError
     */
    'message'?: string;
    /**
     *
     * @type {SourcePosition}
     * @memberof ParseError
     */
    'start'?: SourcePosition;
}
/**
 *
 * @export
 * @interface PatchDelta
 */
export interface PatchDelta {
    /**
     *
     * @type {string}
     * @memberof PatchDelta
     */
    'action'?: PatchDeltaActionEnum;
    /**
     *
     * @type {RelationTuple}
     * @memberof PatchDelta
     */
    'relation_tuple'?: RelationTuple;
}
export declare const PatchDeltaActionEnum: {
    readonly Insert: "insert";
    readonly Delete: "delete";
};
export declare type PatchDeltaActionEnum = typeof PatchDeltaActionEnum[keyof typeof PatchDeltaActionEnum];
/**
 *
 * @export
 * @interface PostCheckOplSyntaxResponse
 */
export interface PostCheckOplSyntaxResponse {
    /**
     * The list of syntax errors
     * @type {Array<ParseError>}
     * @memberof PostCheckOplSyntaxResponse
     */
    'errors'?: Array<ParseError>;
}
/**
 * The response used to return used consent requests same as HandledLoginRequest, just with consent_request exposed as json
 * @export
 * @interface PreviousOAuth2ConsentSession
 */
export interface PreviousOAuth2ConsentSession {
    /**
     *
     * @type {OAuth2ConsentRequest}
     * @memberof PreviousOAuth2ConsentSession
     */
    'consent_request'?: OAuth2ConsentRequest;
    /**
     *
     * @type {Array<string>}
     * @memberof PreviousOAuth2ConsentSession
     */
    'grant_access_token_audience'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof PreviousOAuth2ConsentSession
     */
    'grant_scope'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof PreviousOAuth2ConsentSession
     */
    'handled_at'?: string;
    /**
     * Remember, if set to true, tells ORY Hydra to remember this consent authorization and reuse it if the same client asks the same user for the same, or a subset of, scope.
     * @type {boolean}
     * @memberof PreviousOAuth2ConsentSession
     */
    'remember'?: boolean;
    /**
     * RememberFor sets how long the consent authorization should be remembered for in seconds. If set to `0`, the authorization will be remembered indefinitely.
     * @type {number}
     * @memberof PreviousOAuth2ConsentSession
     */
    'remember_for'?: number;
    /**
     *
     * @type {AcceptOAuth2ConsentRequestSession}
     * @memberof PreviousOAuth2ConsentSession
     */
    'session'?: AcceptOAuth2ConsentRequestSession;
}
/**
 *
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * The project\'s ID.
     * @type {string}
     * @memberof Project
     */
    'id': string;
    /**
     * The name of the project.
     * @type {string}
     * @memberof Project
     */
    'name': string;
    /**
     * The configuration revision ID.
     * @type {string}
     * @memberof Project
     */
    'revision_id': string;
    /**
     *
     * @type {ProjectServices}
     * @memberof Project
     */
    'services': ProjectServices;
    /**
     * The project\'s slug
     * @type {string}
     * @memberof Project
     */
    'slug': string;
    /**
     * The state of the project. running Running halted Halted
     * @type {string}
     * @memberof Project
     */
    'state': ProjectStateEnum;
}
export declare const ProjectStateEnum: {
    readonly Running: "running";
    readonly Halted: "halted";
};
export declare type ProjectStateEnum = typeof ProjectStateEnum[keyof typeof ProjectStateEnum];
/**
 *
 * @export
 * @interface ProjectApiKey
 */
export interface ProjectApiKey {
    /**
     * The token\'s ID.
     * @type {string}
     * @memberof ProjectApiKey
     */
    'id': string;
    /**
     * The Token\'s Name  Set this to help you remember, for example, where you use the token.
     * @type {string}
     * @memberof ProjectApiKey
     */
    'name': string;
    /**
     * The token\'s owner
     * @type {string}
     * @memberof ProjectApiKey
     */
    'owner_id': string;
    /**
     * The Token\'s Project ID
     * @type {string}
     * @memberof ProjectApiKey
     */
    'project_id'?: string;
    /**
     * The token\'s value
     * @type {string}
     * @memberof ProjectApiKey
     */
    'value'?: string;
}
/**
 *
 * @export
 * @interface ProjectHost
 */
export interface ProjectHost {
    /**
     * The project\'s host.
     * @type {string}
     * @memberof ProjectHost
     */
    'host': string;
    /**
     * The mapping\'s ID.
     * @type {string}
     * @memberof ProjectHost
     */
    'id': string;
    /**
     * The Revision\'s Project ID
     * @type {string}
     * @memberof ProjectHost
     */
    'project_id': string;
}
/**
 *
 * @export
 * @interface ProjectInvite
 */
export interface ProjectInvite {
    /**
     * The Project\'s Revision Creation Date
     * @type {string}
     * @memberof ProjectInvite
     */
    'created_at': string;
    /**
     * The invite\'s ID.
     * @type {string}
     * @memberof ProjectInvite
     */
    'id': string;
    /**
     * The invitee\'s email
     * @type {string}
     * @memberof ProjectInvite
     */
    'invitee_email': string;
    /**
     *
     * @type {string}
     * @memberof ProjectInvite
     */
    'invitee_id'?: string | null;
    /**
     * The invite owner\'s email Usually the project\'s owner email
     * @type {string}
     * @memberof ProjectInvite
     */
    'owner_email': string;
    /**
     * The invite owner\'s ID Usually the project\'s owner
     * @type {string}
     * @memberof ProjectInvite
     */
    'owner_id': string;
    /**
     * The Project\'s ID this invite is associated with
     * @type {string}
     * @memberof ProjectInvite
     */
    'project_id': string;
    /**
     * The invite\'s status Keeps track of the invites status such as pending, accepted, declined, expired
     * @type {string}
     * @memberof ProjectInvite
     */
    'status': string;
    /**
     * Last Time Project\'s Revision was Updated
     * @type {string}
     * @memberof ProjectInvite
     */
    'updated_at': string;
}
/**
 *
 * @export
 * @interface ProjectMetadata
 */
export interface ProjectMetadata {
    /**
     * The Project\'s Creation Date
     * @type {string}
     * @memberof ProjectMetadata
     */
    'created_at': string;
    /**
     *
     * @type {Array<string>}
     * @memberof ProjectMetadata
     */
    'hosts': Array<string>;
    /**
     * The project\'s ID.
     * @type {string}
     * @memberof ProjectMetadata
     */
    'id': string;
    /**
     * The project\'s name if set
     * @type {string}
     * @memberof ProjectMetadata
     */
    'name': string;
    /**
     * The project\'s slug
     * @type {string}
     * @memberof ProjectMetadata
     */
    'slug'?: string;
    /**
     * The state of the project. running Running halted Halted
     * @type {string}
     * @memberof ProjectMetadata
     */
    'state': ProjectMetadataStateEnum;
    /**
     *
     * @type {string}
     * @memberof ProjectMetadata
     */
    'subscription_id'?: string | null;
    /**
     * Last Time Project was Updated
     * @type {string}
     * @memberof ProjectMetadata
     */
    'updated_at': string;
}
export declare const ProjectMetadataStateEnum: {
    readonly Running: "running";
    readonly Halted: "halted";
};
export declare type ProjectMetadataStateEnum = typeof ProjectMetadataStateEnum[keyof typeof ProjectMetadataStateEnum];
/**
 *
 * @export
 * @interface ProjectServiceIdentity
 */
export interface ProjectServiceIdentity {
    /**
     *
     * @type {object}
     * @memberof ProjectServiceIdentity
     */
    'config': object;
}
/**
 *
 * @export
 * @interface ProjectServiceOAuth2
 */
export interface ProjectServiceOAuth2 {
    /**
     *
     * @type {object}
     * @memberof ProjectServiceOAuth2
     */
    'config': object;
}
/**
 *
 * @export
 * @interface ProjectServicePermission
 */
export interface ProjectServicePermission {
    /**
     *
     * @type {object}
     * @memberof ProjectServicePermission
     */
    'config': object;
}
/**
 *
 * @export
 * @interface ProjectServices
 */
export interface ProjectServices {
    /**
     *
     * @type {ProjectServiceIdentity}
     * @memberof ProjectServices
     */
    'identity'?: ProjectServiceIdentity;
    /**
     *
     * @type {ProjectServiceOAuth2}
     * @memberof ProjectServices
     */
    'oauth2'?: ProjectServiceOAuth2;
    /**
     *
     * @type {ProjectServicePermission}
     * @memberof ProjectServices
     */
    'permission'?: ProjectServicePermission;
}
/**
 *
 * @export
 * @interface ProvisionMockSubscriptionPayload
 */
export interface ProvisionMockSubscriptionPayload {
    /**
     *
     * @type {string}
     * @memberof ProvisionMockSubscriptionPayload
     */
    'identity_id': string;
    /**
     *
     * @type {string}
     * @memberof ProvisionMockSubscriptionPayload
     */
    'plan_or_price': string;
}
/**
 *
 * @export
 * @interface QuotaCustomDomains
 */
export interface QuotaCustomDomains {
    /**
     *
     * @type {number}
     * @memberof QuotaCustomDomains
     */
    'available_domains'?: number;
    /**
     *
     * @type {boolean}
     * @memberof QuotaCustomDomains
     */
    'can_use'?: boolean;
    /**
     *
     * @type {number}
     * @memberof QuotaCustomDomains
     */
    'used_domains'?: number;
}
/**
 *
 * @export
 * @interface QuotaProjectMemberSeats
 */
export interface QuotaProjectMemberSeats {
    /**
     *
     * @type {string}
     * @memberof QuotaProjectMemberSeats
     */
    'project_id'?: string;
    /**
     *
     * @type {number}
     * @memberof QuotaProjectMemberSeats
     */
    'remaining_seats'?: number;
    /**
     *
     * @type {number}
     * @memberof QuotaProjectMemberSeats
     */
    'total_seats'?: number;
}
/**
 *
 * @export
 * @interface RecoveryIdentityAddress
 */
export interface RecoveryIdentityAddress {
    /**
     * CreatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof RecoveryIdentityAddress
     */
    'created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof RecoveryIdentityAddress
     */
    'id': string;
    /**
     * UpdatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof RecoveryIdentityAddress
     */
    'updated_at'?: string;
    /**
     *
     * @type {string}
     * @memberof RecoveryIdentityAddress
     */
    'value': string;
    /**
     *
     * @type {string}
     * @memberof RecoveryIdentityAddress
     */
    'via': string;
}
/**
 *
 * @export
 * @interface RefreshTokenHookRequest
 */
export interface RefreshTokenHookRequest {
    /**
     * ClientID is the identifier of the OAuth 2.0 client.
     * @type {string}
     * @memberof RefreshTokenHookRequest
     */
    'client_id'?: string;
    /**
     * GrantedAudience is the list of audiences granted to the OAuth 2.0 client.
     * @type {Array<string>}
     * @memberof RefreshTokenHookRequest
     */
    'granted_audience'?: Array<string>;
    /**
     * GrantedScopes is the list of scopes granted to the OAuth 2.0 client.
     * @type {Array<string>}
     * @memberof RefreshTokenHookRequest
     */
    'granted_scopes'?: Array<string>;
    /**
     *
     * @type {OAuth2AccessRequest}
     * @memberof RefreshTokenHookRequest
     */
    'requester'?: OAuth2AccessRequest;
    /**
     *
     * @type {OAuth2ConsentSession}
     * @memberof RefreshTokenHookRequest
     */
    'session'?: OAuth2ConsentSession;
    /**
     * Subject is the identifier of the authenticated end-user.
     * @type {string}
     * @memberof RefreshTokenHookRequest
     */
    'subject'?: string;
}
/**
 *
 * @export
 * @interface RefreshTokenHookResponse
 */
export interface RefreshTokenHookResponse {
    /**
     *
     * @type {AcceptOAuth2ConsentRequestSession}
     * @memberof RefreshTokenHookResponse
     */
    'session'?: AcceptOAuth2ConsentRequestSession;
}
/**
 *
 * @export
 * @interface RejectOAuth2Request
 */
export interface RejectOAuth2Request {
    /**
     * The error should follow the OAuth2 error format (e.g. `invalid_request`, `login_required`).  Defaults to `request_denied`.
     * @type {string}
     * @memberof RejectOAuth2Request
     */
    'error'?: string;
    /**
     * Debug contains information to help resolve the problem as a developer. Usually not exposed to the public but only in the server logs.
     * @type {string}
     * @memberof RejectOAuth2Request
     */
    'error_debug'?: string;
    /**
     * Description of the error in a human readable format.
     * @type {string}
     * @memberof RejectOAuth2Request
     */
    'error_description'?: string;
    /**
     * Hint to help resolve the error.
     * @type {string}
     * @memberof RejectOAuth2Request
     */
    'error_hint'?: string;
    /**
     * Represents the HTTP status code of the error (e.g. 401 or 403)  Defaults to 400
     * @type {number}
     * @memberof RejectOAuth2Request
     */
    'status_code'?: number;
}
/**
 *
 * @export
 * @interface RelationQuery
 */
export interface RelationQuery {
    /**
     * Namespace to query
     * @type {string}
     * @memberof RelationQuery
     */
    'namespace'?: string;
    /**
     * Object to query
     * @type {string}
     * @memberof RelationQuery
     */
    'object'?: string;
    /**
     * Relation to query
     * @type {string}
     * @memberof RelationQuery
     */
    'relation'?: string;
    /**
     * SubjectID to query  Either SubjectSet or SubjectID can be provided.
     * @type {string}
     * @memberof RelationQuery
     */
    'subject_id'?: string;
    /**
     *
     * @type {SubjectSet}
     * @memberof RelationQuery
     */
    'subject_set'?: SubjectSet;
}
/**
 *
 * @export
 * @interface RelationTuple
 */
export interface RelationTuple {
    /**
     * Namespace of the Relation Tuple
     * @type {string}
     * @memberof RelationTuple
     */
    'namespace': string;
    /**
     * Object of the Relation Tuple
     * @type {string}
     * @memberof RelationTuple
     */
    'object': string;
    /**
     * Relation of the Relation Tuple
     * @type {string}
     * @memberof RelationTuple
     */
    'relation': string;
    /**
     * SubjectID of the Relation Tuple  Either SubjectSet or SubjectID can be provided.
     * @type {string}
     * @memberof RelationTuple
     */
    'subject_id'?: string;
    /**
     *
     * @type {SubjectSet}
     * @memberof RelationTuple
     */
    'subject_set'?: SubjectSet;
}
/**
 *
 * @export
 * @interface RevokedSessions
 */
export interface RevokedSessions {
    /**
     * The number of sessions that were revoked.
     * @type {number}
     * @memberof RevokedSessions
     */
    'count'?: number;
}
/**
 *
 * @export
 * @interface SchemaPatch
 */
export interface SchemaPatch {
    /**
     * The json schema
     * @type {object}
     * @memberof SchemaPatch
     */
    'data': object;
    /**
     * The user defined schema name
     * @type {string}
     * @memberof SchemaPatch
     */
    'name': string;
}
/**
 *
 * @export
 * @interface SelfServiceBrowserLocationChangeRequiredError
 */
export interface SelfServiceBrowserLocationChangeRequiredError {
    /**
     * The status code
     * @type {number}
     * @memberof SelfServiceBrowserLocationChangeRequiredError
     */
    'code'?: number;
    /**
     * Debug information  This field is often not exposed to protect against leaking sensitive information.
     * @type {string}
     * @memberof SelfServiceBrowserLocationChangeRequiredError
     */
    'debug'?: string;
    /**
     * Further error details
     * @type {{ [key: string]: any; }}
     * @memberof SelfServiceBrowserLocationChangeRequiredError
     */
    'details'?: {
        [key: string]: any;
    };
    /**
     * The error ID  Useful when trying to identify various errors in application logic.
     * @type {string}
     * @memberof SelfServiceBrowserLocationChangeRequiredError
     */
    'id'?: string;
    /**
     * Error message  The error\'s message.
     * @type {string}
     * @memberof SelfServiceBrowserLocationChangeRequiredError
     */
    'message': string;
    /**
     * A human-readable reason for the error
     * @type {string}
     * @memberof SelfServiceBrowserLocationChangeRequiredError
     */
    'reason'?: string;
    /**
     * Since when the flow has expired
     * @type {string}
     * @memberof SelfServiceBrowserLocationChangeRequiredError
     */
    'redirect_browser_to'?: string;
    /**
     * The request ID  The request ID is often exposed internally in order to trace errors across service architectures. This is often a UUID.
     * @type {string}
     * @memberof SelfServiceBrowserLocationChangeRequiredError
     */
    'request'?: string;
    /**
     * The status description
     * @type {string}
     * @memberof SelfServiceBrowserLocationChangeRequiredError
     */
    'status'?: string;
}
/**
 *
 * @export
 * @interface SelfServiceError
 */
export interface SelfServiceError {
    /**
     * CreatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof SelfServiceError
     */
    'created_at'?: string;
    /**
     *
     * @type {object}
     * @memberof SelfServiceError
     */
    'error'?: object;
    /**
     * ID of the error container.
     * @type {string}
     * @memberof SelfServiceError
     */
    'id': string;
    /**
     * UpdatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof SelfServiceError
     */
    'updated_at'?: string;
}
/**
 * Is sent when a flow is expired
 * @export
 * @interface SelfServiceFlowExpiredError
 */
export interface SelfServiceFlowExpiredError {
    /**
     * The status code
     * @type {number}
     * @memberof SelfServiceFlowExpiredError
     */
    'code'?: number;
    /**
     * Debug information  This field is often not exposed to protect against leaking sensitive information.
     * @type {string}
     * @memberof SelfServiceFlowExpiredError
     */
    'debug'?: string;
    /**
     * Further error details
     * @type {{ [key: string]: any; }}
     * @memberof SelfServiceFlowExpiredError
     */
    'details'?: {
        [key: string]: any;
    };
    /**
     * The error ID  Useful when trying to identify various errors in application logic.
     * @type {string}
     * @memberof SelfServiceFlowExpiredError
     */
    'id'?: string;
    /**
     * Error message  The error\'s message.
     * @type {string}
     * @memberof SelfServiceFlowExpiredError
     */
    'message': string;
    /**
     * A human-readable reason for the error
     * @type {string}
     * @memberof SelfServiceFlowExpiredError
     */
    'reason'?: string;
    /**
     * The request ID  The request ID is often exposed internally in order to trace errors across service architectures. This is often a UUID.
     * @type {string}
     * @memberof SelfServiceFlowExpiredError
     */
    'request'?: string;
    /**
     * A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.
     * @type {number}
     * @memberof SelfServiceFlowExpiredError
     */
    'since'?: number;
    /**
     * The status description
     * @type {string}
     * @memberof SelfServiceFlowExpiredError
     */
    'status'?: string;
    /**
     * The flow ID that should be used for the new flow as it contains the correct messages.
     * @type {string}
     * @memberof SelfServiceFlowExpiredError
     */
    'use_flow_id'?: string;
}
/**
 * This object represents a login flow. A login flow is initiated at the \"Initiate Login API / Browser Flow\" endpoint by a client.  Once a login flow is completed successfully, a session cookie or session token will be issued.
 * @export
 * @interface SelfServiceLoginFlow
 */
export interface SelfServiceLoginFlow {
    /**
     *
     * @type {IdentityCredentialsType}
     * @memberof SelfServiceLoginFlow
     */
    'active'?: IdentityCredentialsType;
    /**
     * CreatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof SelfServiceLoginFlow
     */
    'created_at'?: string;
    /**
     * ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to log in, a new flow has to be initiated.
     * @type {string}
     * @memberof SelfServiceLoginFlow
     */
    'expires_at': string;
    /**
     * ID represents the flow\'s unique ID. When performing the login flow, this represents the id in the login UI\'s query parameter: http://<selfservice.flows.login.ui_url>/?flow=<flow_id>
     * @type {string}
     * @memberof SelfServiceLoginFlow
     */
    'id': string;
    /**
     * IssuedAt is the time (UTC) when the flow started.
     * @type {string}
     * @memberof SelfServiceLoginFlow
     */
    'issued_at': string;
    /**
     * Refresh stores whether this login flow should enforce re-authentication.
     * @type {boolean}
     * @memberof SelfServiceLoginFlow
     */
    'refresh'?: boolean;
    /**
     * RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL\'s path or query for example.
     * @type {string}
     * @memberof SelfServiceLoginFlow
     */
    'request_url': string;
    /**
     *
     * @type {AuthenticatorAssuranceLevel}
     * @memberof SelfServiceLoginFlow
     */
    'requested_aal'?: AuthenticatorAssuranceLevel;
    /**
     * ReturnTo contains the requested return_to URL.
     * @type {string}
     * @memberof SelfServiceLoginFlow
     */
    'return_to'?: string;
    /**
     * The flow type can either be `api` or `browser`.
     * @type {string}
     * @memberof SelfServiceLoginFlow
     */
    'type': string;
    /**
     *
     * @type {UiContainer}
     * @memberof SelfServiceLoginFlow
     */
    'ui': UiContainer;
    /**
     * UpdatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof SelfServiceLoginFlow
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface SelfServiceLogoutUrl
 */
export interface SelfServiceLogoutUrl {
    /**
     * LogoutToken can be used to perform logout using AJAX.
     * @type {string}
     * @memberof SelfServiceLogoutUrl
     */
    'logout_token': string;
    /**
     * LogoutURL can be opened in a browser to sign the user out.  format: uri
     * @type {string}
     * @memberof SelfServiceLogoutUrl
     */
    'logout_url': string;
}
/**
 *
 * @export
 * @interface SelfServiceRecoveryCode
 */
export interface SelfServiceRecoveryCode {
    /**
     * Expires At is the timestamp of when the recovery flow expires  The timestamp when the recovery link expires.
     * @type {string}
     * @memberof SelfServiceRecoveryCode
     */
    'expires_at'?: string;
    /**
     * RecoveryCode is the code that can be used to recover the account
     * @type {string}
     * @memberof SelfServiceRecoveryCode
     */
    'recovery_code': string;
    /**
     * RecoveryLink with flow  This link opens the recovery UI with an empty `code` field.
     * @type {string}
     * @memberof SelfServiceRecoveryCode
     */
    'recovery_link': string;
}
/**
 * This request is used when an identity wants to recover their account.  We recommend reading the [Account Recovery Documentation](../self-service/flows/password-reset-account-recovery)
 * @export
 * @interface SelfServiceRecoveryFlow
 */
export interface SelfServiceRecoveryFlow {
    /**
     * Active, if set, contains the recovery method that is being used. It is initially not set.
     * @type {string}
     * @memberof SelfServiceRecoveryFlow
     */
    'active'?: string;
    /**
     * ExpiresAt is the time (UTC) when the request expires. If the user still wishes to update the setting, a new request has to be initiated.
     * @type {string}
     * @memberof SelfServiceRecoveryFlow
     */
    'expires_at': string;
    /**
     * ID represents the request\'s unique ID. When performing the recovery flow, this represents the id in the recovery ui\'s query parameter: http://<selfservice.flows.recovery.ui_url>?request=<id>
     * @type {string}
     * @memberof SelfServiceRecoveryFlow
     */
    'id': string;
    /**
     * IssuedAt is the time (UTC) when the request occurred.
     * @type {string}
     * @memberof SelfServiceRecoveryFlow
     */
    'issued_at': string;
    /**
     * RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL\'s path or query for example.
     * @type {string}
     * @memberof SelfServiceRecoveryFlow
     */
    'request_url': string;
    /**
     * ReturnTo contains the requested return_to URL.
     * @type {string}
     * @memberof SelfServiceRecoveryFlow
     */
    'return_to'?: string;
    /**
     *
     * @type {SelfServiceRecoveryFlowState}
     * @memberof SelfServiceRecoveryFlow
     */
    'state': SelfServiceRecoveryFlowState;
    /**
     * The flow type can either be `api` or `browser`.
     * @type {string}
     * @memberof SelfServiceRecoveryFlow
     */
    'type': string;
    /**
     *
     * @type {UiContainer}
     * @memberof SelfServiceRecoveryFlow
     */
    'ui': UiContainer;
}
/**
 * The state represents the state of the recovery flow.  choose_method: ask the user to choose a method (e.g. recover account via email) sent_email: the email has been sent to the user passed_challenge: the request was successful and the recovery challenge was passed.
 * @export
 * @enum {string}
 */
export declare const SelfServiceRecoveryFlowState: {
    readonly ChooseMethod: "choose_method";
    readonly SentEmail: "sent_email";
    readonly PassedChallenge: "passed_challenge";
};
export declare type SelfServiceRecoveryFlowState = typeof SelfServiceRecoveryFlowState[keyof typeof SelfServiceRecoveryFlowState];
/**
 *
 * @export
 * @interface SelfServiceRecoveryLink
 */
export interface SelfServiceRecoveryLink {
    /**
     * Recovery Link Expires At  The timestamp when the recovery link expires.
     * @type {string}
     * @memberof SelfServiceRecoveryLink
     */
    'expires_at'?: string;
    /**
     * Recovery Link  This link can be used to recover the account.
     * @type {string}
     * @memberof SelfServiceRecoveryLink
     */
    'recovery_link': string;
}
/**
 *
 * @export
 * @interface SelfServiceRegistrationFlow
 */
export interface SelfServiceRegistrationFlow {
    /**
     *
     * @type {IdentityCredentialsType}
     * @memberof SelfServiceRegistrationFlow
     */
    'active'?: IdentityCredentialsType;
    /**
     * ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to log in, a new flow has to be initiated.
     * @type {string}
     * @memberof SelfServiceRegistrationFlow
     */
    'expires_at': string;
    /**
     * ID represents the flow\'s unique ID. When performing the registration flow, this represents the id in the registration ui\'s query parameter: http://<selfservice.flows.registration.ui_url>/?flow=<id>
     * @type {string}
     * @memberof SelfServiceRegistrationFlow
     */
    'id': string;
    /**
     * IssuedAt is the time (UTC) when the flow occurred.
     * @type {string}
     * @memberof SelfServiceRegistrationFlow
     */
    'issued_at': string;
    /**
     * RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL\'s path or query for example.
     * @type {string}
     * @memberof SelfServiceRegistrationFlow
     */
    'request_url': string;
    /**
     * ReturnTo contains the requested return_to URL.
     * @type {string}
     * @memberof SelfServiceRegistrationFlow
     */
    'return_to'?: string;
    /**
     * The flow type can either be `api` or `browser`.
     * @type {string}
     * @memberof SelfServiceRegistrationFlow
     */
    'type': string;
    /**
     *
     * @type {UiContainer}
     * @memberof SelfServiceRegistrationFlow
     */
    'ui': UiContainer;
}
/**
 * This flow is used when an identity wants to update settings (e.g. profile data, passwords, ...) in a selfservice manner.  We recommend reading the [User Settings Documentation](../self-service/flows/user-settings)
 * @export
 * @interface SelfServiceSettingsFlow
 */
export interface SelfServiceSettingsFlow {
    /**
     * Active, if set, contains the registration method that is being used. It is initially not set.
     * @type {string}
     * @memberof SelfServiceSettingsFlow
     */
    'active'?: string;
    /**
     * ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to update the setting, a new flow has to be initiated.
     * @type {string}
     * @memberof SelfServiceSettingsFlow
     */
    'expires_at': string;
    /**
     * ID represents the flow\'s unique ID. When performing the settings flow, this represents the id in the settings ui\'s query parameter: http://<selfservice.flows.settings.ui_url>?flow=<id>
     * @type {string}
     * @memberof SelfServiceSettingsFlow
     */
    'id': string;
    /**
     *
     * @type {Identity}
     * @memberof SelfServiceSettingsFlow
     */
    'identity': Identity;
    /**
     * IssuedAt is the time (UTC) when the flow occurred.
     * @type {string}
     * @memberof SelfServiceSettingsFlow
     */
    'issued_at': string;
    /**
     * RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL\'s path or query for example.
     * @type {string}
     * @memberof SelfServiceSettingsFlow
     */
    'request_url': string;
    /**
     * ReturnTo contains the requested return_to URL.
     * @type {string}
     * @memberof SelfServiceSettingsFlow
     */
    'return_to'?: string;
    /**
     *
     * @type {SelfServiceSettingsFlowState}
     * @memberof SelfServiceSettingsFlow
     */
    'state': SelfServiceSettingsFlowState;
    /**
     * The flow type can either be `api` or `browser`.
     * @type {string}
     * @memberof SelfServiceSettingsFlow
     */
    'type': string;
    /**
     *
     * @type {UiContainer}
     * @memberof SelfServiceSettingsFlow
     */
    'ui': UiContainer;
}
/**
 * show_form: No user data has been collected, or it is invalid, and thus the form should be shown. success: Indicates that the settings flow has been updated successfully with the provided data. Done will stay true when repeatedly checking. If set to true, done will revert back to false only when a flow with invalid (e.g. \"please use a valid phone number\") data was sent.
 * @export
 * @enum {string}
 */
export declare const SelfServiceSettingsFlowState: {
    readonly ShowForm: "show_form";
    readonly Success: "success";
};
export declare type SelfServiceSettingsFlowState = typeof SelfServiceSettingsFlowState[keyof typeof SelfServiceSettingsFlowState];
/**
 * Used to verify an out-of-band communication channel such as an email address or a phone number.  For more information head over to: https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation
 * @export
 * @interface SelfServiceVerificationFlow
 */
export interface SelfServiceVerificationFlow {
    /**
     * Active, if set, contains the registration method that is being used. It is initially not set.
     * @type {string}
     * @memberof SelfServiceVerificationFlow
     */
    'active'?: string;
    /**
     * ExpiresAt is the time (UTC) when the request expires. If the user still wishes to verify the address, a new request has to be initiated.
     * @type {string}
     * @memberof SelfServiceVerificationFlow
     */
    'expires_at'?: string;
    /**
     * ID represents the request\'s unique ID. When performing the verification flow, this represents the id in the verify ui\'s query parameter: http://<selfservice.flows.verification.ui_url>?request=<id>  type: string format: uuid
     * @type {string}
     * @memberof SelfServiceVerificationFlow
     */
    'id': string;
    /**
     * IssuedAt is the time (UTC) when the request occurred.
     * @type {string}
     * @memberof SelfServiceVerificationFlow
     */
    'issued_at'?: string;
    /**
     * RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL\'s path or query for example.
     * @type {string}
     * @memberof SelfServiceVerificationFlow
     */
    'request_url'?: string;
    /**
     * ReturnTo contains the requested return_to URL.
     * @type {string}
     * @memberof SelfServiceVerificationFlow
     */
    'return_to'?: string;
    /**
     *
     * @type {SelfServiceVerificationFlowState}
     * @memberof SelfServiceVerificationFlow
     */
    'state': SelfServiceVerificationFlowState;
    /**
     * The flow type can either be `api` or `browser`.
     * @type {string}
     * @memberof SelfServiceVerificationFlow
     */
    'type': string;
    /**
     *
     * @type {UiContainer}
     * @memberof SelfServiceVerificationFlow
     */
    'ui': UiContainer;
}
/**
 * The state represents the state of the verification flow.  choose_method: ask the user to choose a method (e.g. recover account via email) sent_email: the email has been sent to the user passed_challenge: the request was successful and the recovery challenge was passed.
 * @export
 * @enum {string}
 */
export declare const SelfServiceVerificationFlowState: {
    readonly ChooseMethod: "choose_method";
    readonly SentEmail: "sent_email";
    readonly PassedChallenge: "passed_challenge";
};
export declare type SelfServiceVerificationFlowState = typeof SelfServiceVerificationFlowState[keyof typeof SelfServiceVerificationFlowState];
/**
 * A Session
 * @export
 * @interface Session
 */
export interface Session {
    /**
     * Active state. If false the session is no longer active.
     * @type {boolean}
     * @memberof Session
     */
    'active'?: boolean;
    /**
     * The Session Authentication Timestamp  When this session was authenticated at. If multi-factor authentication was used this is the time when the last factor was authenticated (e.g. the TOTP code challenge was completed).
     * @type {string}
     * @memberof Session
     */
    'authenticated_at'?: string;
    /**
     * A list of authenticators which were used to authenticate the session.
     * @type {Array<SessionAuthenticationMethod>}
     * @memberof Session
     */
    'authentication_methods'?: Array<SessionAuthenticationMethod>;
    /**
     *
     * @type {AuthenticatorAssuranceLevel}
     * @memberof Session
     */
    'authenticator_assurance_level'?: AuthenticatorAssuranceLevel;
    /**
     * Devices has history of all endpoints where the session was used
     * @type {Array<SessionDevice>}
     * @memberof Session
     */
    'devices'?: Array<SessionDevice>;
    /**
     * The Session Expiry  When this session expires at.
     * @type {string}
     * @memberof Session
     */
    'expires_at'?: string;
    /**
     * Session ID
     * @type {string}
     * @memberof Session
     */
    'id': string;
    /**
     *
     * @type {Identity}
     * @memberof Session
     */
    'identity': Identity;
    /**
     * The Session Issuance Timestamp  When this session was issued at. Usually equal or close to `authenticated_at`.
     * @type {string}
     * @memberof Session
     */
    'issued_at'?: string;
}
/**
 * A singular authenticator used during authentication / login.
 * @export
 * @interface SessionAuthenticationMethod
 */
export interface SessionAuthenticationMethod {
    /**
     *
     * @type {AuthenticatorAssuranceLevel}
     * @memberof SessionAuthenticationMethod
     */
    'aal'?: AuthenticatorAssuranceLevel;
    /**
     * When the authentication challenge was completed.
     * @type {string}
     * @memberof SessionAuthenticationMethod
     */
    'completed_at'?: string;
    /**
     *
     * @type {string}
     * @memberof SessionAuthenticationMethod
     */
    'method'?: SessionAuthenticationMethodMethodEnum;
}
export declare const SessionAuthenticationMethodMethodEnum: {
    readonly LinkRecovery: "link_recovery";
    readonly CodeRecovery: "code_recovery";
    readonly Password: "password";
    readonly Totp: "totp";
    readonly Oidc: "oidc";
    readonly Webauthn: "webauthn";
    readonly LookupSecret: "lookup_secret";
    readonly V06LegacySession: "v0.6_legacy_session";
};
export declare type SessionAuthenticationMethodMethodEnum = typeof SessionAuthenticationMethodMethodEnum[keyof typeof SessionAuthenticationMethodMethodEnum];
/**
 * Device corresponding to a Session
 * @export
 * @interface SessionDevice
 */
export interface SessionDevice {
    /**
     * Device record ID
     * @type {string}
     * @memberof SessionDevice
     */
    'id': string;
    /**
     * IPAddress of the client
     * @type {string}
     * @memberof SessionDevice
     */
    'ip_address'?: string;
    /**
     * Geo Location corresponding to the IP Address
     * @type {string}
     * @memberof SessionDevice
     */
    'location'?: string;
    /**
     * UserAgent of the client
     * @type {string}
     * @memberof SessionDevice
     */
    'user_agent'?: string;
}
/**
 *
 * @export
 * @interface SettingsProfileFormConfig
 */
export interface SettingsProfileFormConfig {
    /**
     * Action should be used as the form action URL `<form action=\"{{ .Action }}\" method=\"post\">`.
     * @type {string}
     * @memberof SettingsProfileFormConfig
     */
    'action': string;
    /**
     *
     * @type {Array<UiText>}
     * @memberof SettingsProfileFormConfig
     */
    'messages'?: Array<UiText>;
    /**
     * Method is the form method (e.g. POST)
     * @type {string}
     * @memberof SettingsProfileFormConfig
     */
    'method': string;
    /**
     *
     * @type {Array<UiNode>}
     * @memberof SettingsProfileFormConfig
     */
    'nodes': Array<UiNode>;
}
/**
 *
 * @export
 * @interface SourcePosition
 */
export interface SourcePosition {
    /**
     *
     * @type {number}
     * @memberof SourcePosition
     */
    'Line'?: number;
    /**
     *
     * @type {number}
     * @memberof SourcePosition
     */
    'column'?: number;
}
/**
 *
 * @export
 * @interface StripeCustomerResponse
 */
export interface StripeCustomerResponse {
    /**
     *
     * @type {string}
     * @memberof StripeCustomerResponse
     */
    'id'?: string;
}
/**
 *
 * @export
 * @interface SubjectSet
 */
export interface SubjectSet {
    /**
     * Namespace of the Subject Set
     * @type {string}
     * @memberof SubjectSet
     */
    'namespace': string;
    /**
     * Object of the Subject Set
     * @type {string}
     * @memberof SubjectSet
     */
    'object': string;
    /**
     * Relation of the Subject Set
     * @type {string}
     * @memberof SubjectSet
     */
    'relation': string;
}
/**
 *
 * @export
 * @interface SubmitSelfServiceFlowWithWebAuthnRegistrationMethod
 */
export interface SubmitSelfServiceFlowWithWebAuthnRegistrationMethod {
    /**
     * Register a WebAuthn Security Key  It is expected that the JSON returned by the WebAuthn registration process is included here.
     * @type {string}
     * @memberof SubmitSelfServiceFlowWithWebAuthnRegistrationMethod
     */
    'webauthn_register'?: string;
    /**
     * Name of the WebAuthn Security Key to be Added  A human-readable name for the security key which will be added.
     * @type {string}
     * @memberof SubmitSelfServiceFlowWithWebAuthnRegistrationMethod
     */
    'webauthn_register_displayname'?: string;
}
/**
 * @type SubmitSelfServiceLoginFlowBody
 * @export
 */
export declare type SubmitSelfServiceLoginFlowBody = SubmitSelfServiceLoginFlowWithLookupSecretMethodBody | SubmitSelfServiceLoginFlowWithOidcMethodBody | SubmitSelfServiceLoginFlowWithPasswordMethodBody | SubmitSelfServiceLoginFlowWithTotpMethodBody | SubmitSelfServiceLoginFlowWithWebAuthnMethodBody;
/**
 *
 * @export
 * @interface SubmitSelfServiceLoginFlowWithLookupSecretMethodBody
 */
export interface SubmitSelfServiceLoginFlowWithLookupSecretMethodBody {
    /**
     * Sending the anti-csrf token is only required for browser login flows.
     * @type {string}
     * @memberof SubmitSelfServiceLoginFlowWithLookupSecretMethodBody
     */
    'csrf_token'?: string;
    /**
     * The lookup secret.
     * @type {string}
     * @memberof SubmitSelfServiceLoginFlowWithLookupSecretMethodBody
     */
    'lookup_secret': string;
    /**
     * Method should be set to \"lookup_secret\" when logging in using the lookup_secret strategy.
     * @type {string}
     * @memberof SubmitSelfServiceLoginFlowWithLookupSecretMethodBody
     */
    'method': string;
}
/**
 * SubmitSelfServiceLoginFlowWithOidcMethodBody is used to decode the login form payload when using the oidc method.
 * @export
 * @interface SubmitSelfServiceLoginFlowWithOidcMethodBody
 */
export interface SubmitSelfServiceLoginFlowWithOidcMethodBody {
    /**
     * The CSRF Token
     * @type {string}
     * @memberof SubmitSelfServiceLoginFlowWithOidcMethodBody
     */
    'csrf_token'?: string;
    /**
     * Method to use  This field must be set to `oidc` when using the oidc method.
     * @type {string}
     * @memberof SubmitSelfServiceLoginFlowWithOidcMethodBody
     */
    'method': string;
    /**
     * The provider to register with
     * @type {string}
     * @memberof SubmitSelfServiceLoginFlowWithOidcMethodBody
     */
    'provider': string;
    /**
     * The identity traits. This is a placeholder for the registration flow.
     * @type {object}
     * @memberof SubmitSelfServiceLoginFlowWithOidcMethodBody
     */
    'traits'?: object;
}
/**
 *
 * @export
 * @interface SubmitSelfServiceLoginFlowWithPasswordMethodBody
 */
export interface SubmitSelfServiceLoginFlowWithPasswordMethodBody {
    /**
     * Sending the anti-csrf token is only required for browser login flows.
     * @type {string}
     * @memberof SubmitSelfServiceLoginFlowWithPasswordMethodBody
     */
    'csrf_token'?: string;
    /**
     * Identifier is the email or username of the user trying to log in.
     * @type {string}
     * @memberof SubmitSelfServiceLoginFlowWithPasswordMethodBody
     */
    'identifier': string;
    /**
     * Method should be set to \"password\" when logging in using the identifier and password strategy.
     * @type {string}
     * @memberof SubmitSelfServiceLoginFlowWithPasswordMethodBody
     */
    'method': string;
    /**
     * The user\'s password.
     * @type {string}
     * @memberof SubmitSelfServiceLoginFlowWithPasswordMethodBody
     */
    'password': string;
    /**
     * Identifier is the email or username of the user trying to log in. This field is deprecated!
     * @type {string}
     * @memberof SubmitSelfServiceLoginFlowWithPasswordMethodBody
     */
    'password_identifier'?: string;
}
/**
 *
 * @export
 * @interface SubmitSelfServiceLoginFlowWithTotpMethodBody
 */
export interface SubmitSelfServiceLoginFlowWithTotpMethodBody {
    /**
     * Sending the anti-csrf token is only required for browser login flows.
     * @type {string}
     * @memberof SubmitSelfServiceLoginFlowWithTotpMethodBody
     */
    'csrf_token'?: string;
    /**
     * Method should be set to \"totp\" when logging in using the TOTP strategy.
     * @type {string}
     * @memberof SubmitSelfServiceLoginFlowWithTotpMethodBody
     */
    'method': string;
    /**
     * The TOTP code.
     * @type {string}
     * @memberof SubmitSelfServiceLoginFlowWithTotpMethodBody
     */
    'totp_code': string;
}
/**
 *
 * @export
 * @interface SubmitSelfServiceLoginFlowWithWebAuthnMethodBody
 */
export interface SubmitSelfServiceLoginFlowWithWebAuthnMethodBody {
    /**
     * Sending the anti-csrf token is only required for browser login flows.
     * @type {string}
     * @memberof SubmitSelfServiceLoginFlowWithWebAuthnMethodBody
     */
    'csrf_token'?: string;
    /**
     * Identifier is the email or username of the user trying to log in.
     * @type {string}
     * @memberof SubmitSelfServiceLoginFlowWithWebAuthnMethodBody
     */
    'identifier': string;
    /**
     * Method should be set to \"webAuthn\" when logging in using the WebAuthn strategy.
     * @type {string}
     * @memberof SubmitSelfServiceLoginFlowWithWebAuthnMethodBody
     */
    'method': string;
    /**
     * Login a WebAuthn Security Key  This must contain the ID of the WebAuthN connection.
     * @type {string}
     * @memberof SubmitSelfServiceLoginFlowWithWebAuthnMethodBody
     */
    'webauthn_login'?: string;
}
/**
 * nolint:deadcode,unused
 * @export
 * @interface SubmitSelfServiceLogoutFlowWithoutBrowserBody
 */
export interface SubmitSelfServiceLogoutFlowWithoutBrowserBody {
    /**
     * The Session Token  Invalidate this session token.
     * @type {string}
     * @memberof SubmitSelfServiceLogoutFlowWithoutBrowserBody
     */
    'session_token': string;
}
/**
 * @type SubmitSelfServiceRecoveryFlowBody
 * @export
 */
export declare type SubmitSelfServiceRecoveryFlowBody = SubmitSelfServiceRecoveryFlowWithCodeMethodBody | SubmitSelfServiceRecoveryFlowWithLinkMethodBody;
/**
 *
 * @export
 * @interface SubmitSelfServiceRecoveryFlowWithCodeMethodBody
 */
export interface SubmitSelfServiceRecoveryFlowWithCodeMethodBody {
    /**
     * Code from recovery email  Sent to the user once a recovery has been initiated and is used to prove that the user is in possession of the email
     * @type {string}
     * @memberof SubmitSelfServiceRecoveryFlowWithCodeMethodBody
     */
    'code'?: string;
    /**
     * Sending the anti-csrf token is only required for browser login flows.
     * @type {string}
     * @memberof SubmitSelfServiceRecoveryFlowWithCodeMethodBody
     */
    'csrf_token'?: string;
    /**
     * Email to Recover  Needs to be set when initiating the flow. If the email is a registered recovery email, a recovery link will be sent. If the email is not known, a email with details on what happened will be sent instead.  format: email
     * @type {string}
     * @memberof SubmitSelfServiceRecoveryFlowWithCodeMethodBody
     */
    'email'?: string;
    /**
     * Method supports `link` and `code` only right now.
     * @type {string}
     * @memberof SubmitSelfServiceRecoveryFlowWithCodeMethodBody
     */
    'method': string;
}
/**
 *
 * @export
 * @interface SubmitSelfServiceRecoveryFlowWithLinkMethodBody
 */
export interface SubmitSelfServiceRecoveryFlowWithLinkMethodBody {
    /**
     * Sending the anti-csrf token is only required for browser login flows.
     * @type {string}
     * @memberof SubmitSelfServiceRecoveryFlowWithLinkMethodBody
     */
    'csrf_token'?: string;
    /**
     * Email to Recover  Needs to be set when initiating the flow. If the email is a registered recovery email, a recovery link will be sent. If the email is not known, a email with details on what happened will be sent instead.  format: email
     * @type {string}
     * @memberof SubmitSelfServiceRecoveryFlowWithLinkMethodBody
     */
    'email': string;
    /**
     * Method supports `link` only right now.
     * @type {string}
     * @memberof SubmitSelfServiceRecoveryFlowWithLinkMethodBody
     */
    'method': string;
}
/**
 * @type SubmitSelfServiceRegistrationFlowBody
 * @export
 */
export declare type SubmitSelfServiceRegistrationFlowBody = SubmitSelfServiceRegistrationFlowWithOidcMethodBody | SubmitSelfServiceRegistrationFlowWithPasswordMethodBody | SubmitSelfServiceRegistrationFlowWithWebAuthnMethodBody;
/**
 * SubmitSelfServiceRegistrationFlowWithOidcMethodBody is used to decode the registration form payload when using the oidc method.
 * @export
 * @interface SubmitSelfServiceRegistrationFlowWithOidcMethodBody
 */
export interface SubmitSelfServiceRegistrationFlowWithOidcMethodBody {
    /**
     * The CSRF Token
     * @type {string}
     * @memberof SubmitSelfServiceRegistrationFlowWithOidcMethodBody
     */
    'csrf_token'?: string;
    /**
     * Method to use  This field must be set to `oidc` when using the oidc method.
     * @type {string}
     * @memberof SubmitSelfServiceRegistrationFlowWithOidcMethodBody
     */
    'method': string;
    /**
     * The provider to register with
     * @type {string}
     * @memberof SubmitSelfServiceRegistrationFlowWithOidcMethodBody
     */
    'provider': string;
    /**
     * The identity traits
     * @type {object}
     * @memberof SubmitSelfServiceRegistrationFlowWithOidcMethodBody
     */
    'traits'?: object;
}
/**
 * SubmitSelfServiceRegistrationFlowWithPasswordMethodBody is used to decode the registration form payload when using the password method.
 * @export
 * @interface SubmitSelfServiceRegistrationFlowWithPasswordMethodBody
 */
export interface SubmitSelfServiceRegistrationFlowWithPasswordMethodBody {
    /**
     * The CSRF Token
     * @type {string}
     * @memberof SubmitSelfServiceRegistrationFlowWithPasswordMethodBody
     */
    'csrf_token'?: string;
    /**
     * Method to use  This field must be set to `password` when using the password method.
     * @type {string}
     * @memberof SubmitSelfServiceRegistrationFlowWithPasswordMethodBody
     */
    'method': string;
    /**
     * Password to sign the user up with
     * @type {string}
     * @memberof SubmitSelfServiceRegistrationFlowWithPasswordMethodBody
     */
    'password': string;
    /**
     * The identity\'s traits
     * @type {object}
     * @memberof SubmitSelfServiceRegistrationFlowWithPasswordMethodBody
     */
    'traits': object;
}
/**
 *
 * @export
 * @interface SubmitSelfServiceRegistrationFlowWithWebAuthnMethodBody
 */
export interface SubmitSelfServiceRegistrationFlowWithWebAuthnMethodBody {
    /**
     * CSRFToken is the anti-CSRF token
     * @type {string}
     * @memberof SubmitSelfServiceRegistrationFlowWithWebAuthnMethodBody
     */
    'csrf_token'?: string;
    /**
     * Method  Should be set to \"webauthn\" when trying to add, update, or remove a webAuthn pairing.
     * @type {string}
     * @memberof SubmitSelfServiceRegistrationFlowWithWebAuthnMethodBody
     */
    'method': string;
    /**
     * The identity\'s traits
     * @type {object}
     * @memberof SubmitSelfServiceRegistrationFlowWithWebAuthnMethodBody
     */
    'traits': object;
    /**
     * Register a WebAuthn Security Key  It is expected that the JSON returned by the WebAuthn registration process is included here.
     * @type {string}
     * @memberof SubmitSelfServiceRegistrationFlowWithWebAuthnMethodBody
     */
    'webauthn_register'?: string;
    /**
     * Name of the WebAuthn Security Key to be Added  A human-readable name for the security key which will be added.
     * @type {string}
     * @memberof SubmitSelfServiceRegistrationFlowWithWebAuthnMethodBody
     */
    'webauthn_register_displayname'?: string;
}
/**
 * @type SubmitSelfServiceSettingsFlowBody
 * @export
 */
export declare type SubmitSelfServiceSettingsFlowBody = SubmitSelfServiceSettingsFlowWithLookupMethodBody | SubmitSelfServiceSettingsFlowWithOidcMethodBody | SubmitSelfServiceSettingsFlowWithPasswordMethodBody | SubmitSelfServiceSettingsFlowWithProfileMethodBody | SubmitSelfServiceSettingsFlowWithTotpMethodBody | SubmitSelfServiceSettingsFlowWithWebAuthnMethodBody;
/**
 *
 * @export
 * @interface SubmitSelfServiceSettingsFlowWithLookupMethodBody
 */
export interface SubmitSelfServiceSettingsFlowWithLookupMethodBody {
    /**
     * CSRFToken is the anti-CSRF token
     * @type {string}
     * @memberof SubmitSelfServiceSettingsFlowWithLookupMethodBody
     */
    'csrf_token'?: string;
    /**
     * If set to true will save the regenerated lookup secrets
     * @type {boolean}
     * @memberof SubmitSelfServiceSettingsFlowWithLookupMethodBody
     */
    'lookup_secret_confirm'?: boolean;
    /**
     * Disables this method if true.
     * @type {boolean}
     * @memberof SubmitSelfServiceSettingsFlowWithLookupMethodBody
     */
    'lookup_secret_disable'?: boolean;
    /**
     * If set to true will regenerate the lookup secrets
     * @type {boolean}
     * @memberof SubmitSelfServiceSettingsFlowWithLookupMethodBody
     */
    'lookup_secret_regenerate'?: boolean;
    /**
     * If set to true will reveal the lookup secrets
     * @type {boolean}
     * @memberof SubmitSelfServiceSettingsFlowWithLookupMethodBody
     */
    'lookup_secret_reveal'?: boolean;
    /**
     * Method  Should be set to \"lookup\" when trying to add, update, or remove a lookup pairing.
     * @type {string}
     * @memberof SubmitSelfServiceSettingsFlowWithLookupMethodBody
     */
    'method': string;
}
/**
 * nolint:deadcode,unused
 * @export
 * @interface SubmitSelfServiceSettingsFlowWithOidcMethodBody
 */
export interface SubmitSelfServiceSettingsFlowWithOidcMethodBody {
    /**
     * Flow ID is the flow\'s ID.  in: query
     * @type {string}
     * @memberof SubmitSelfServiceSettingsFlowWithOidcMethodBody
     */
    'flow'?: string;
    /**
     * Link this provider  Either this or `unlink` must be set.  type: string in: body
     * @type {string}
     * @memberof SubmitSelfServiceSettingsFlowWithOidcMethodBody
     */
    'link'?: string;
    /**
     * Method  Should be set to profile when trying to update a profile.
     * @type {string}
     * @memberof SubmitSelfServiceSettingsFlowWithOidcMethodBody
     */
    'method': string;
    /**
     * The identity\'s traits  in: body
     * @type {object}
     * @memberof SubmitSelfServiceSettingsFlowWithOidcMethodBody
     */
    'traits'?: object;
    /**
     * Unlink this provider  Either this or `link` must be set.  type: string in: body
     * @type {string}
     * @memberof SubmitSelfServiceSettingsFlowWithOidcMethodBody
     */
    'unlink'?: string;
}
/**
 *
 * @export
 * @interface SubmitSelfServiceSettingsFlowWithPasswordMethodBody
 */
export interface SubmitSelfServiceSettingsFlowWithPasswordMethodBody {
    /**
     * CSRFToken is the anti-CSRF token
     * @type {string}
     * @memberof SubmitSelfServiceSettingsFlowWithPasswordMethodBody
     */
    'csrf_token'?: string;
    /**
     * Method  Should be set to password when trying to update a password.
     * @type {string}
     * @memberof SubmitSelfServiceSettingsFlowWithPasswordMethodBody
     */
    'method': string;
    /**
     * Password is the updated password
     * @type {string}
     * @memberof SubmitSelfServiceSettingsFlowWithPasswordMethodBody
     */
    'password': string;
}
/**
 * nolint:deadcode,unused
 * @export
 * @interface SubmitSelfServiceSettingsFlowWithProfileMethodBody
 */
export interface SubmitSelfServiceSettingsFlowWithProfileMethodBody {
    /**
     * The Anti-CSRF Token  This token is only required when performing browser flows.
     * @type {string}
     * @memberof SubmitSelfServiceSettingsFlowWithProfileMethodBody
     */
    'csrf_token'?: string;
    /**
     * Method  Should be set to profile when trying to update a profile.
     * @type {string}
     * @memberof SubmitSelfServiceSettingsFlowWithProfileMethodBody
     */
    'method': string;
    /**
     * Traits contains all of the identity\'s traits.
     * @type {object}
     * @memberof SubmitSelfServiceSettingsFlowWithProfileMethodBody
     */
    'traits': object;
}
/**
 *
 * @export
 * @interface SubmitSelfServiceSettingsFlowWithTotpMethodBody
 */
export interface SubmitSelfServiceSettingsFlowWithTotpMethodBody {
    /**
     * CSRFToken is the anti-CSRF token
     * @type {string}
     * @memberof SubmitSelfServiceSettingsFlowWithTotpMethodBody
     */
    'csrf_token'?: string;
    /**
     * Method  Should be set to \"totp\" when trying to add, update, or remove a totp pairing.
     * @type {string}
     * @memberof SubmitSelfServiceSettingsFlowWithTotpMethodBody
     */
    'method': string;
    /**
     * ValidationTOTP must contain a valid TOTP based on the
     * @type {string}
     * @memberof SubmitSelfServiceSettingsFlowWithTotpMethodBody
     */
    'totp_code'?: string;
    /**
     * UnlinkTOTP if true will remove the TOTP pairing, effectively removing the credential. This can be used to set up a new TOTP device.
     * @type {boolean}
     * @memberof SubmitSelfServiceSettingsFlowWithTotpMethodBody
     */
    'totp_unlink'?: boolean;
}
/**
 *
 * @export
 * @interface SubmitSelfServiceSettingsFlowWithWebAuthnMethodBody
 */
export interface SubmitSelfServiceSettingsFlowWithWebAuthnMethodBody {
    /**
     * CSRFToken is the anti-CSRF token
     * @type {string}
     * @memberof SubmitSelfServiceSettingsFlowWithWebAuthnMethodBody
     */
    'csrf_token'?: string;
    /**
     * Method  Should be set to \"webauthn\" when trying to add, update, or remove a webAuthn pairing.
     * @type {string}
     * @memberof SubmitSelfServiceSettingsFlowWithWebAuthnMethodBody
     */
    'method': string;
    /**
     * Register a WebAuthn Security Key  It is expected that the JSON returned by the WebAuthn registration process is included here.
     * @type {string}
     * @memberof SubmitSelfServiceSettingsFlowWithWebAuthnMethodBody
     */
    'webauthn_register'?: string;
    /**
     * Name of the WebAuthn Security Key to be Added  A human-readable name for the security key which will be added.
     * @type {string}
     * @memberof SubmitSelfServiceSettingsFlowWithWebAuthnMethodBody
     */
    'webauthn_register_displayname'?: string;
    /**
     * Remove a WebAuthn Security Key  This must contain the ID of the WebAuthN connection.
     * @type {string}
     * @memberof SubmitSelfServiceSettingsFlowWithWebAuthnMethodBody
     */
    'webauthn_remove'?: string;
}
/**
 * @type SubmitSelfServiceVerificationFlowBody
 * nolint:deadcode,unused
 * @export
 */
export declare type SubmitSelfServiceVerificationFlowBody = SubmitSelfServiceVerificationFlowWithLinkMethodBody;
/**
 *
 * @export
 * @interface SubmitSelfServiceVerificationFlowWithLinkMethodBody
 */
export interface SubmitSelfServiceVerificationFlowWithLinkMethodBody {
    /**
     * Sending the anti-csrf token is only required for browser login flows.
     * @type {string}
     * @memberof SubmitSelfServiceVerificationFlowWithLinkMethodBody
     */
    'csrf_token'?: string;
    /**
     * Email to Verify  Needs to be set when initiating the flow. If the email is a registered verification email, a verification link will be sent. If the email is not known, a email with details on what happened will be sent instead.  format: email
     * @type {string}
     * @memberof SubmitSelfServiceVerificationFlowWithLinkMethodBody
     */
    'email': string;
    /**
     * Method supports `link` only right now.
     * @type {string}
     * @memberof SubmitSelfServiceVerificationFlowWithLinkMethodBody
     */
    'method': string;
}
/**
 *
 * @export
 * @interface Subscription
 */
export interface Subscription {
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    'created_at': string;
    /**
     * The currently active plan of the subscription unknown Unknown free Free start_up_monthly StartUpMonthly start_up_yearly StartUpYearly business_monthly BusinessMonthly business_yearly BusinessYearly custom Custom
     * @type {string}
     * @memberof Subscription
     */
    'current_plan': SubscriptionCurrentPlanEnum;
    /**
     * The ID of the stripe customer
     * @type {string}
     * @memberof Subscription
     */
    'customer_id': string;
    /**
     * The ID of the subscription
     * @type {string}
     * @memberof Subscription
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    'ongoing_stripe_checkout_id'?: string | null;
    /**
     * Until when the subscription is payed
     * @type {string}
     * @memberof Subscription
     */
    'payed_until': string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    'plan_changes_at'?: string;
    /**
     *
     * @type {NullPlan}
     * @memberof Subscription
     */
    'plan_changes_to': NullPlan;
    /**
     * For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this state can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` state. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal state, the open invoice will be voided and no further invoices will be generated.  A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.  If subscription `collection_method=charge_automatically` it becomes `past_due` when payment to renew it fails and `canceled` or `unpaid` (depending on your subscriptions settings) when Stripe has exhausted all payment retry attempts.  If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
     * @type {string}
     * @memberof Subscription
     */
    'status': string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    'updated_at': string;
}
export declare const SubscriptionCurrentPlanEnum: {
    readonly Unknown: "unknown";
    readonly Free: "free";
    readonly StartUpMonthly: "start_up_monthly";
    readonly StartUpYearly: "start_up_yearly";
    readonly BusinessMonthly: "business_monthly";
    readonly BusinessYearly: "business_yearly";
    readonly Custom: "custom";
};
export declare type SubscriptionCurrentPlanEnum = typeof SubscriptionCurrentPlanEnum[keyof typeof SubscriptionCurrentPlanEnum];
/**
 *
 * @export
 * @interface SuccessfulOAuth2RequestResponse
 */
export interface SuccessfulOAuth2RequestResponse {
    /**
     * RedirectURL is the URL which you should redirect the user to once the authentication process is completed.
     * @type {string}
     * @memberof SuccessfulOAuth2RequestResponse
     */
    'redirect_to': string;
}
/**
 *
 * @export
 * @interface SuccessfulProjectUpdate
 */
export interface SuccessfulProjectUpdate {
    /**
     *
     * @type {Project}
     * @memberof SuccessfulProjectUpdate
     */
    'project': Project;
    /**
     * Import Warnings  Not all configuration items can be imported to Ory Cloud. For example, setting the port does not make sense because Ory Cloud provides the runtime and networking.  This field contains warnings where configuration keys were found but can not be imported. These keys will be ignored by Ory Cloud. This field will help you understand why certain configuration keys might not be respected!
     * @type {Array<Warning>}
     * @memberof SuccessfulProjectUpdate
     */
    'warnings': Array<Warning>;
}
/**
 * The Response for Login Flows via API
 * @export
 * @interface SuccessfulSelfServiceLoginWithoutBrowser
 */
export interface SuccessfulSelfServiceLoginWithoutBrowser {
    /**
     *
     * @type {Session}
     * @memberof SuccessfulSelfServiceLoginWithoutBrowser
     */
    'session': Session;
    /**
     * The Session Token  A session token is equivalent to a session cookie, but it can be sent in the HTTP Authorization Header:  Authorization: bearer ${session-token}  The session token is only issued for API flows, not for Browser flows!
     * @type {string}
     * @memberof SuccessfulSelfServiceLoginWithoutBrowser
     */
    'session_token'?: string;
}
/**
 * The Response for Registration Flows via API
 * @export
 * @interface SuccessfulSelfServiceRegistrationWithoutBrowser
 */
export interface SuccessfulSelfServiceRegistrationWithoutBrowser {
    /**
     *
     * @type {Identity}
     * @memberof SuccessfulSelfServiceRegistrationWithoutBrowser
     */
    'identity': Identity;
    /**
     *
     * @type {Session}
     * @memberof SuccessfulSelfServiceRegistrationWithoutBrowser
     */
    'session'?: Session;
    /**
     * The Session Token  This field is only set when the session hook is configured as a post-registration hook.  A session token is equivalent to a session cookie, but it can be sent in the HTTP Authorization Header:  Authorization: bearer ${session-token}  The session token is only issued for API flows, not for Browser flows!
     * @type {string}
     * @memberof SuccessfulSelfServiceRegistrationWithoutBrowser
     */
    'session_token'?: string;
}
/**
 *
 * @export
 * @interface TokenPagination
 */
export interface TokenPagination {
    /**
     * Items per page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     * @type {number}
     * @memberof TokenPagination
     */
    'page_size'?: number;
    /**
     * Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     * @type {string}
     * @memberof TokenPagination
     */
    'page_token'?: string;
}
/**
 *
 * @export
 * @interface TokenPaginationHeaders
 */
export interface TokenPaginationHeaders {
    /**
     * The link header contains pagination links.  For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).  in: header
     * @type {string}
     * @memberof TokenPaginationHeaders
     */
    'link'?: string;
    /**
     * The total number of clients.  in: header
     * @type {string}
     * @memberof TokenPaginationHeaders
     */
    'x-total-count'?: string;
}
/**
 *
 * @export
 * @interface TrustedOAuth2JwtGrantIssuer
 */
export interface TrustedOAuth2JwtGrantIssuer {
    /**
     * The \"allow_any_subject\" indicates that the issuer is allowed to have any principal as the subject of the JWT.
     * @type {boolean}
     * @memberof TrustedOAuth2JwtGrantIssuer
     */
    'allow_any_subject'?: boolean;
    /**
     * The \"created_at\" indicates, when grant was created.
     * @type {string}
     * @memberof TrustedOAuth2JwtGrantIssuer
     */
    'created_at'?: string;
    /**
     * The \"expires_at\" indicates, when grant will expire, so we will reject assertion from \"issuer\" targeting \"subject\".
     * @type {string}
     * @memberof TrustedOAuth2JwtGrantIssuer
     */
    'expires_at'?: string;
    /**
     *
     * @type {string}
     * @memberof TrustedOAuth2JwtGrantIssuer
     */
    'id'?: string;
    /**
     * The \"issuer\" identifies the principal that issued the JWT assertion (same as \"iss\" claim in JWT).
     * @type {string}
     * @memberof TrustedOAuth2JwtGrantIssuer
     */
    'issuer'?: string;
    /**
     *
     * @type {TrustedOAuth2JwtGrantJsonWebKey}
     * @memberof TrustedOAuth2JwtGrantIssuer
     */
    'public_key'?: TrustedOAuth2JwtGrantJsonWebKey;
    /**
     * The \"scope\" contains list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749])
     * @type {Array<string>}
     * @memberof TrustedOAuth2JwtGrantIssuer
     */
    'scope'?: Array<string>;
    /**
     * The \"subject\" identifies the principal that is the subject of the JWT.
     * @type {string}
     * @memberof TrustedOAuth2JwtGrantIssuer
     */
    'subject'?: string;
}
/**
 *
 * @export
 * @interface TrustedOAuth2JwtGrantJsonWebKey
 */
export interface TrustedOAuth2JwtGrantJsonWebKey {
    /**
     * The \"key_id\" is key unique identifier (same as kid header in jws/jwt).
     * @type {string}
     * @memberof TrustedOAuth2JwtGrantJsonWebKey
     */
    'kid'?: string;
    /**
     * The \"set\" is basically a name for a group(set) of keys. Will be the same as \"issuer\" in grant.
     * @type {string}
     * @memberof TrustedOAuth2JwtGrantJsonWebKey
     */
    'set'?: string;
}
/**
 * Container represents a HTML Form. The container can work with both HTTP Form and JSON requests
 * @export
 * @interface UiContainer
 */
export interface UiContainer {
    /**
     * Action should be used as the form action URL `<form action=\"{{ .Action }}\" method=\"post\">`.
     * @type {string}
     * @memberof UiContainer
     */
    'action': string;
    /**
     *
     * @type {Array<UiText>}
     * @memberof UiContainer
     */
    'messages'?: Array<UiText>;
    /**
     * Method is the form method (e.g. POST)
     * @type {string}
     * @memberof UiContainer
     */
    'method': string;
    /**
     *
     * @type {Array<UiNode>}
     * @memberof UiContainer
     */
    'nodes': Array<UiNode>;
}
/**
 * Nodes are represented as HTML elements or their native UI equivalents. For example, a node can be an `<img>` tag, or an `<input element>` but also `some plain text`.
 * @export
 * @interface UiNode
 */
export interface UiNode {
    /**
     *
     * @type {UiNodeAttributes}
     * @memberof UiNode
     */
    'attributes': UiNodeAttributes;
    /**
     * Group specifies which group (e.g. password authenticator) this node belongs to. default DefaultGroup password PasswordGroup oidc OpenIDConnectGroup profile ProfileGroup link LinkGroup code CodeGroup totp TOTPGroup lookup_secret LookupGroup webauthn WebAuthnGroup
     * @type {string}
     * @memberof UiNode
     */
    'group': UiNodeGroupEnum;
    /**
     *
     * @type {Array<UiText>}
     * @memberof UiNode
     */
    'messages': Array<UiText>;
    /**
     *
     * @type {UiNodeMeta}
     * @memberof UiNode
     */
    'meta': UiNodeMeta;
    /**
     * The node\'s type text Text input Input img Image a Anchor script Script
     * @type {string}
     * @memberof UiNode
     */
    'type': UiNodeTypeEnum;
}
export declare const UiNodeGroupEnum: {
    readonly Default: "default";
    readonly Password: "password";
    readonly Oidc: "oidc";
    readonly Profile: "profile";
    readonly Link: "link";
    readonly Code: "code";
    readonly Totp: "totp";
    readonly LookupSecret: "lookup_secret";
    readonly Webauthn: "webauthn";
};
export declare type UiNodeGroupEnum = typeof UiNodeGroupEnum[keyof typeof UiNodeGroupEnum];
export declare const UiNodeTypeEnum: {
    readonly Text: "text";
    readonly Input: "input";
    readonly Img: "img";
    readonly A: "a";
    readonly Script: "script";
};
export declare type UiNodeTypeEnum = typeof UiNodeTypeEnum[keyof typeof UiNodeTypeEnum];
/**
 *
 * @export
 * @interface UiNodeAnchorAttributes
 */
export interface UiNodeAnchorAttributes {
    /**
     * The link\'s href (destination) URL.  format: uri
     * @type {string}
     * @memberof UiNodeAnchorAttributes
     */
    'href': string;
    /**
     * A unique identifier
     * @type {string}
     * @memberof UiNodeAnchorAttributes
     */
    'id': string;
    /**
     * NodeType represents this node\'s types. It is a mirror of `node.type` and is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is \"a\".
     * @type {string}
     * @memberof UiNodeAnchorAttributes
     */
    'node_type': string;
    /**
     *
     * @type {UiText}
     * @memberof UiNodeAnchorAttributes
     */
    'title': UiText;
}
/**
 * @type UiNodeAttributes
 * @export
 */
export declare type UiNodeAttributes = UiNodeAnchorAttributes | UiNodeImageAttributes | UiNodeInputAttributes | UiNodeScriptAttributes | UiNodeTextAttributes;
/**
 *
 * @export
 * @interface UiNodeImageAttributes
 */
export interface UiNodeImageAttributes {
    /**
     * Height of the image
     * @type {number}
     * @memberof UiNodeImageAttributes
     */
    'height': number;
    /**
     * A unique identifier
     * @type {string}
     * @memberof UiNodeImageAttributes
     */
    'id': string;
    /**
     * NodeType represents this node\'s types. It is a mirror of `node.type` and is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is \"img\".
     * @type {string}
     * @memberof UiNodeImageAttributes
     */
    'node_type': string;
    /**
     * The image\'s source URL.  format: uri
     * @type {string}
     * @memberof UiNodeImageAttributes
     */
    'src': string;
    /**
     * Width of the image
     * @type {number}
     * @memberof UiNodeImageAttributes
     */
    'width': number;
}
/**
 * InputAttributes represents the attributes of an input node
 * @export
 * @interface UiNodeInputAttributes
 */
export interface UiNodeInputAttributes {
    /**
     * The autocomplete attribute for the input. email InputAttributeAutocompleteEmail tel InputAttributeAutocompleteTel url InputAttributeAutocompleteUrl current-password InputAttributeAutocompleteCurrentPassword new-password InputAttributeAutocompleteNewPassword one-time-code InputAttributeAutocompleteOneTimeCode
     * @type {string}
     * @memberof UiNodeInputAttributes
     */
    'autocomplete'?: UiNodeInputAttributesAutocompleteEnum;
    /**
     * Sets the input\'s disabled field to true or false.
     * @type {boolean}
     * @memberof UiNodeInputAttributes
     */
    'disabled': boolean;
    /**
     *
     * @type {UiText}
     * @memberof UiNodeInputAttributes
     */
    'label'?: UiText;
    /**
     * The input\'s element name.
     * @type {string}
     * @memberof UiNodeInputAttributes
     */
    'name': string;
    /**
     * NodeType represents this node\'s types. It is a mirror of `node.type` and is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is \"input\".
     * @type {string}
     * @memberof UiNodeInputAttributes
     */
    'node_type': string;
    /**
     * OnClick may contain javascript which should be executed on click. This is primarily used for WebAuthn.
     * @type {string}
     * @memberof UiNodeInputAttributes
     */
    'onclick'?: string;
    /**
     * The input\'s pattern.
     * @type {string}
     * @memberof UiNodeInputAttributes
     */
    'pattern'?: string;
    /**
     * Mark this input field as required.
     * @type {boolean}
     * @memberof UiNodeInputAttributes
     */
    'required'?: boolean;
    /**
     * The input\'s element type. text InputAttributeTypeText password InputAttributeTypePassword number InputAttributeTypeNumber checkbox InputAttributeTypeCheckbox hidden InputAttributeTypeHidden email InputAttributeTypeEmail tel InputAttributeTypeTel submit InputAttributeTypeSubmit button InputAttributeTypeButton datetime-local InputAttributeTypeDateTimeLocal date InputAttributeTypeDate url InputAttributeTypeURI
     * @type {string}
     * @memberof UiNodeInputAttributes
     */
    'type': UiNodeInputAttributesTypeEnum;
    /**
     * The input\'s value.
     * @type {any}
     * @memberof UiNodeInputAttributes
     */
    'value'?: any | null;
}
export declare const UiNodeInputAttributesAutocompleteEnum: {
    readonly Email: "email";
    readonly Tel: "tel";
    readonly Url: "url";
    readonly CurrentPassword: "current-password";
    readonly NewPassword: "new-password";
    readonly OneTimeCode: "one-time-code";
};
export declare type UiNodeInputAttributesAutocompleteEnum = typeof UiNodeInputAttributesAutocompleteEnum[keyof typeof UiNodeInputAttributesAutocompleteEnum];
export declare const UiNodeInputAttributesTypeEnum: {
    readonly Text: "text";
    readonly Password: "password";
    readonly Number: "number";
    readonly Checkbox: "checkbox";
    readonly Hidden: "hidden";
    readonly Email: "email";
    readonly Tel: "tel";
    readonly Submit: "submit";
    readonly Button: "button";
    readonly DatetimeLocal: "datetime-local";
    readonly Date: "date";
    readonly Url: "url";
};
export declare type UiNodeInputAttributesTypeEnum = typeof UiNodeInputAttributesTypeEnum[keyof typeof UiNodeInputAttributesTypeEnum];
/**
 * This might include a label and other information that can optionally be used to render UIs.
 * @export
 * @interface UiNodeMeta
 */
export interface UiNodeMeta {
    /**
     *
     * @type {UiText}
     * @memberof UiNodeMeta
     */
    'label'?: UiText;
}
/**
 *
 * @export
 * @interface UiNodeScriptAttributes
 */
export interface UiNodeScriptAttributes {
    /**
     * The script async type
     * @type {boolean}
     * @memberof UiNodeScriptAttributes
     */
    'async': boolean;
    /**
     * The script cross origin policy
     * @type {string}
     * @memberof UiNodeScriptAttributes
     */
    'crossorigin': string;
    /**
     * A unique identifier
     * @type {string}
     * @memberof UiNodeScriptAttributes
     */
    'id': string;
    /**
     * The script\'s integrity hash
     * @type {string}
     * @memberof UiNodeScriptAttributes
     */
    'integrity': string;
    /**
     * NodeType represents this node\'s types. It is a mirror of `node.type` and is primarily used to allow compatibility with OpenAPI 3.0. In this struct it technically always is \"script\".
     * @type {string}
     * @memberof UiNodeScriptAttributes
     */
    'node_type': string;
    /**
     * Nonce for CSP  A nonce you may want to use to improve your Content Security Policy. You do not have to use this value but if you want to improve your CSP policies you may use it. You can also choose to use your own nonce value!
     * @type {string}
     * @memberof UiNodeScriptAttributes
     */
    'nonce': string;
    /**
     * The script referrer policy
     * @type {string}
     * @memberof UiNodeScriptAttributes
     */
    'referrerpolicy': string;
    /**
     * The script source
     * @type {string}
     * @memberof UiNodeScriptAttributes
     */
    'src': string;
    /**
     * The script MIME type
     * @type {string}
     * @memberof UiNodeScriptAttributes
     */
    'type': string;
}
/**
 *
 * @export
 * @interface UiNodeTextAttributes
 */
export interface UiNodeTextAttributes {
    /**
     * A unique identifier
     * @type {string}
     * @memberof UiNodeTextAttributes
     */
    'id': string;
    /**
     * NodeType represents this node\'s types. It is a mirror of `node.type` and is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is \"text\".
     * @type {string}
     * @memberof UiNodeTextAttributes
     */
    'node_type': string;
    /**
     *
     * @type {UiText}
     * @memberof UiNodeTextAttributes
     */
    'text': UiText;
}
/**
 *
 * @export
 * @interface UiText
 */
export interface UiText {
    /**
     * The message\'s context. Useful when customizing messages.
     * @type {object}
     * @memberof UiText
     */
    'context'?: object;
    /**
     *
     * @type {number}
     * @memberof UiText
     */
    'id': number;
    /**
     * The message text. Written in american english.
     * @type {string}
     * @memberof UiText
     */
    'text': string;
    /**
     *
     * @type {string}
     * @memberof UiText
     */
    'type': string;
}
/**
 *
 * @export
 * @interface UpdateCustomHostnameBody
 */
export interface UpdateCustomHostnameBody {
    /**
     * The domain where cookies will be set. Has to be a parent domain of the custom hostname to work.
     * @type {string}
     * @memberof UpdateCustomHostnameBody
     */
    'cookie_domain'?: string;
    /**
     * CORS Allowed origins for the custom hostname.
     * @type {Array<string>}
     * @memberof UpdateCustomHostnameBody
     */
    'cors_allowed_origins'?: Array<string>;
    /**
     * CORS Enabled for the custom hostname.
     * @type {boolean}
     * @memberof UpdateCustomHostnameBody
     */
    'cors_enabled'?: boolean;
    /**
     * The custom hostname where the API will be exposed.
     * @type {string}
     * @memberof UpdateCustomHostnameBody
     */
    'hostname'?: string;
}
/**
 * The OIDC Hybrid grant type inherits token lifespan configuration from the implicit grant.
 * @export
 * @interface UpdateOAuth2ClientLifespans
 */
export interface UpdateOAuth2ClientLifespans {
    /**
     *
     * @type {string}
     * @memberof UpdateOAuth2ClientLifespans
     */
    'authorization_code_grant_access_token_lifespan'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UpdateOAuth2ClientLifespans
     */
    'authorization_code_grant_id_token_lifespan'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UpdateOAuth2ClientLifespans
     */
    'authorization_code_grant_refresh_token_lifespan'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UpdateOAuth2ClientLifespans
     */
    'client_credentials_grant_access_token_lifespan'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UpdateOAuth2ClientLifespans
     */
    'implicit_grant_access_token_lifespan'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UpdateOAuth2ClientLifespans
     */
    'implicit_grant_id_token_lifespan'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UpdateOAuth2ClientLifespans
     */
    'jwt_bearer_grant_access_token_lifespan'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UpdateOAuth2ClientLifespans
     */
    'password_grant_access_token_lifespan'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UpdateOAuth2ClientLifespans
     */
    'password_grant_refresh_token_lifespan'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UpdateOAuth2ClientLifespans
     */
    'refresh_token_grant_access_token_lifespan'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UpdateOAuth2ClientLifespans
     */
    'refresh_token_grant_id_token_lifespan'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UpdateOAuth2ClientLifespans
     */
    'refresh_token_grant_refresh_token_lifespan'?: string | null;
}
/**
 *
 * @export
 * @interface UpdateProject
 */
export interface UpdateProject {
    /**
     * The name of the project.
     * @type {string}
     * @memberof UpdateProject
     */
    'name': string;
    /**
     *
     * @type {ProjectServices}
     * @memberof UpdateProject
     */
    'services': ProjectServices;
}
/**
 *
 * @export
 * @interface UpdateSubscriptionPayload
 */
export interface UpdateSubscriptionPayload {
    /**
     *
     * @type {string}
     * @memberof UpdateSubscriptionPayload
     */
    'plan_or_price': string;
    /**
     *
     * @type {string}
     * @memberof UpdateSubscriptionPayload
     */
    'return_to'?: string;
}
/**
 * VerifiableAddress is an identity\'s verifiable address
 * @export
 * @interface VerifiableIdentityAddress
 */
export interface VerifiableIdentityAddress {
    /**
     * When this entry was created
     * @type {string}
     * @memberof VerifiableIdentityAddress
     */
    'created_at'?: string;
    /**
     * The ID
     * @type {string}
     * @memberof VerifiableIdentityAddress
     */
    'id'?: string;
    /**
     * VerifiableAddressStatus must not exceed 16 characters as that is the limitation in the SQL Schema
     * @type {string}
     * @memberof VerifiableIdentityAddress
     */
    'status': string;
    /**
     * When this entry was last updated
     * @type {string}
     * @memberof VerifiableIdentityAddress
     */
    'updated_at'?: string;
    /**
     * The address value  example foo@user.com
     * @type {string}
     * @memberof VerifiableIdentityAddress
     */
    'value': string;
    /**
     * Indicates if the address has already been verified
     * @type {boolean}
     * @memberof VerifiableIdentityAddress
     */
    'verified': boolean;
    /**
     *
     * @type {string}
     * @memberof VerifiableIdentityAddress
     */
    'verified_at'?: string;
    /**
     * VerifiableAddressType must not exceed 16 characters as that is the limitation in the SQL Schema
     * @type {string}
     * @memberof VerifiableIdentityAddress
     */
    'via': string;
}
/**
 *
 * @export
 * @interface Version
 */
export interface Version {
    /**
     * Version is the service\'s version.
     * @type {string}
     * @memberof Version
     */
    'version'?: string;
}
/**
 *
 * @export
 * @interface Warning
 */
export interface Warning {
    /**
     *
     * @type {number}
     * @memberof Warning
     */
    'code'?: number;
    /**
     *
     * @type {string}
     * @memberof Warning
     */
    'message'?: string;
}
/**
 * AdminApi - axios parameter creator
 * @export
 */
export declare const AdminApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * UpdateLifespans an existing OAuth 2.0 client\'s token lifespan configuration. This client configuration takes precedence over the instance-wide token lifespan configuration.
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {UpdateOAuth2ClientLifespans} [updateOAuth2ClientLifespans]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOAuth2ClientLifespans: (id: string, updateOAuth2ClientLifespans?: UpdateOAuth2ClientLifespans, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AdminApi - functional programming interface
 * @export
 */
export declare const AdminApiFp: (configuration?: Configuration) => {
    /**
     * UpdateLifespans an existing OAuth 2.0 client\'s token lifespan configuration. This client configuration takes precedence over the instance-wide token lifespan configuration.
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {UpdateOAuth2ClientLifespans} [updateOAuth2ClientLifespans]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOAuth2ClientLifespans(id: string, updateOAuth2ClientLifespans?: UpdateOAuth2ClientLifespans, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2Client>>;
};
/**
 * AdminApi - factory interface
 * @export
 */
export declare const AdminApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * UpdateLifespans an existing OAuth 2.0 client\'s token lifespan configuration. This client configuration takes precedence over the instance-wide token lifespan configuration.
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {UpdateOAuth2ClientLifespans} [updateOAuth2ClientLifespans]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOAuth2ClientLifespans(id: string, updateOAuth2ClientLifespans?: UpdateOAuth2ClientLifespans, options?: any): AxiosPromise<OAuth2Client>;
};
/**
 * AdminApi - interface
 * @export
 * @interface AdminApi
 */
export interface AdminApiInterface {
    /**
     * UpdateLifespans an existing OAuth 2.0 client\'s token lifespan configuration. This client configuration takes precedence over the instance-wide token lifespan configuration.
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {UpdateOAuth2ClientLifespans} [updateOAuth2ClientLifespans]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    updateOAuth2ClientLifespans(id: string, updateOAuth2ClientLifespans?: UpdateOAuth2ClientLifespans, options?: AxiosRequestConfig): AxiosPromise<OAuth2Client>;
}
/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export declare class AdminApi extends BaseAPI implements AdminApiInterface {
    /**
     * UpdateLifespans an existing OAuth 2.0 client\'s token lifespan configuration. This client configuration takes precedence over the instance-wide token lifespan configuration.
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {UpdateOAuth2ClientLifespans} [updateOAuth2ClientLifespans]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    updateOAuth2ClientLifespans(id: string, updateOAuth2ClientLifespans?: UpdateOAuth2ClientLifespans, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OAuth2Client>>;
}
/**
 * MetadataApi - axios parameter creator
 * @export
 */
export declare const MetadataApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This endpoint returns the version of Ory Kratos.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the version will never refer to the cluster state, only to a single instance.
     * @summary Return Running Software Version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersion: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns a HTTP 200 status code when Ory Kratos is accepting incoming HTTP requests. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isAlive: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns a HTTP 200 status code when Ory Kratos is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of Ory Kratos, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server and Database Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isReady: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * MetadataApi - functional programming interface
 * @export
 */
export declare const MetadataApiFp: (configuration?: Configuration) => {
    /**
     * This endpoint returns the version of Ory Kratos.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the version will never refer to the cluster state, only to a single instance.
     * @summary Return Running Software Version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersion(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>>;
    /**
     * This endpoint returns a HTTP 200 status code when Ory Kratos is accepting incoming HTTP requests. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isAlive(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthStatus>>;
    /**
     * This endpoint returns a HTTP 200 status code when Ory Kratos is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of Ory Kratos, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server and Database Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isReady(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>>;
};
/**
 * MetadataApi - factory interface
 * @export
 */
export declare const MetadataApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This endpoint returns the version of Ory Kratos.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the version will never refer to the cluster state, only to a single instance.
     * @summary Return Running Software Version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersion(options?: any): AxiosPromise<InlineResponse2001>;
    /**
     * This endpoint returns a HTTP 200 status code when Ory Kratos is accepting incoming HTTP requests. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isAlive(options?: any): AxiosPromise<HealthStatus>;
    /**
     * This endpoint returns a HTTP 200 status code when Ory Kratos is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of Ory Kratos, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server and Database Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isReady(options?: any): AxiosPromise<InlineResponse200>;
};
/**
 * MetadataApi - interface
 * @export
 * @interface MetadataApi
 */
export interface MetadataApiInterface {
    /**
     * This endpoint returns the version of Ory Kratos.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the version will never refer to the cluster state, only to a single instance.
     * @summary Return Running Software Version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApiInterface
     */
    getVersion(options?: AxiosRequestConfig): AxiosPromise<InlineResponse2001>;
    /**
     * This endpoint returns a HTTP 200 status code when Ory Kratos is accepting incoming HTTP requests. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApiInterface
     */
    isAlive(options?: AxiosRequestConfig): AxiosPromise<HealthStatus>;
    /**
     * This endpoint returns a HTTP 200 status code when Ory Kratos is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of Ory Kratos, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server and Database Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApiInterface
     */
    isReady(options?: AxiosRequestConfig): AxiosPromise<InlineResponse200>;
}
/**
 * MetadataApi - object-oriented interface
 * @export
 * @class MetadataApi
 * @extends {BaseAPI}
 */
export declare class MetadataApi extends BaseAPI implements MetadataApiInterface {
    /**
     * This endpoint returns the version of Ory Kratos.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the version will never refer to the cluster state, only to a single instance.
     * @summary Return Running Software Version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    getVersion(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InlineResponse2001>>;
    /**
     * This endpoint returns a HTTP 200 status code when Ory Kratos is accepting incoming HTTP requests. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    isAlive(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<HealthStatus>>;
    /**
     * This endpoint returns a HTTP 200 status code when Ory Kratos is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of Ory Kratos, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server and Database Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    isReady(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InlineResponse200>>;
}
/**
 * NamespacesApi - axios parameter creator
 * @export
 */
export declare const NamespacesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get all namespaces
     * @summary Query namespaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNamespaces: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * NamespacesApi - functional programming interface
 * @export
 */
export declare const NamespacesApiFp: (configuration?: Configuration) => {
    /**
     * Get all namespaces
     * @summary Query namespaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNamespaces(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetNamespacesResponse>>;
};
/**
 * NamespacesApi - factory interface
 * @export
 */
export declare const NamespacesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get all namespaces
     * @summary Query namespaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNamespaces(options?: any): AxiosPromise<GetNamespacesResponse>;
};
/**
 * NamespacesApi - interface
 * @export
 * @interface NamespacesApi
 */
export interface NamespacesApiInterface {
    /**
     * Get all namespaces
     * @summary Query namespaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NamespacesApiInterface
     */
    getNamespaces(options?: AxiosRequestConfig): AxiosPromise<GetNamespacesResponse>;
}
/**
 * NamespacesApi - object-oriented interface
 * @export
 * @class NamespacesApi
 * @extends {BaseAPI}
 */
export declare class NamespacesApi extends BaseAPI implements NamespacesApiInterface {
    /**
     * Get all namespaces
     * @summary Query namespaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NamespacesApi
     */
    getNamespaces(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetNamespacesResponse>>;
}
/**
 * ReadApi - axios parameter creator
 * @export
 */
export declare const ReadApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
     * @summary Check a relation tuple
     * @param {string} [namespace] Namespace of the Relation Tuple
     * @param {string} [object] Object of the Relation Tuple
     * @param {string} [relation] Relation of the Relation Tuple
     * @param {string} [subjectId] SubjectID of the Relation Tuple
     * @param {string} [subjectSetNamespace] Namespace of the Subject Set
     * @param {string} [subjectSetObject] Object of the Subject Set
     * @param {string} [subjectSetRelation] Relation of the Subject Set
     * @param {number} [maxDepth]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCheck: (namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, maxDepth?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
     * @summary Check a relation tuple
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCheckMirrorStatus: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to expand a relation tuple.
     * @summary Expand a Relation Tuple
     * @param {string} namespace Namespace of the Subject Set
     * @param {string} object Object of the Subject Set
     * @param {string} relation Relation of the Subject Set
     * @param {number} [maxDepth]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExpand: (namespace: string, object: string, relation: string, maxDepth?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get all relation tuples that match the query. Only the namespace field is required.
     * @summary Query relation tuples
     * @param {string} [pageToken]
     * @param {number} [pageSize]
     * @param {string} [namespace] Namespace of the Relation Tuple
     * @param {string} [object] Object of the Relation Tuple
     * @param {string} [relation] Relation of the Relation Tuple
     * @param {string} [subjectId] SubjectID of the Relation Tuple
     * @param {string} [subjectSetNamespace] Namespace of the Subject Set
     * @param {string} [subjectSetObject] Object of the Subject Set
     * @param {string} [subjectSetRelation] Relation of the Subject Set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRelationTuples: (pageToken?: string, pageSize?: number, namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
     * @summary Check a relation tuple
     * @param {number} [maxDepth]
     * @param {RelationQuery} [relationQuery]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCheck: (maxDepth?: number, relationQuery?: RelationQuery, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
     * @summary Check a relation tuple
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCheckMirrorStatus: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ReadApi - functional programming interface
 * @export
 */
export declare const ReadApiFp: (configuration?: Configuration) => {
    /**
     * To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
     * @summary Check a relation tuple
     * @param {string} [namespace] Namespace of the Relation Tuple
     * @param {string} [object] Object of the Relation Tuple
     * @param {string} [relation] Relation of the Relation Tuple
     * @param {string} [subjectId] SubjectID of the Relation Tuple
     * @param {string} [subjectSetNamespace] Namespace of the Subject Set
     * @param {string} [subjectSetObject] Object of the Subject Set
     * @param {string} [subjectSetRelation] Relation of the Subject Set
     * @param {number} [maxDepth]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCheck(namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, maxDepth?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCheckResponse>>;
    /**
     * To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
     * @summary Check a relation tuple
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCheckMirrorStatus(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCheckResponse>>;
    /**
     * Use this endpoint to expand a relation tuple.
     * @summary Expand a Relation Tuple
     * @param {string} namespace Namespace of the Subject Set
     * @param {string} object Object of the Subject Set
     * @param {string} relation Relation of the Subject Set
     * @param {number} [maxDepth]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExpand(namespace: string, object: string, relation: string, maxDepth?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpandTree>>;
    /**
     * Get all relation tuples that match the query. Only the namespace field is required.
     * @summary Query relation tuples
     * @param {string} [pageToken]
     * @param {number} [pageSize]
     * @param {string} [namespace] Namespace of the Relation Tuple
     * @param {string} [object] Object of the Relation Tuple
     * @param {string} [relation] Relation of the Relation Tuple
     * @param {string} [subjectId] SubjectID of the Relation Tuple
     * @param {string} [subjectSetNamespace] Namespace of the Subject Set
     * @param {string} [subjectSetObject] Object of the Subject Set
     * @param {string} [subjectSetRelation] Relation of the Subject Set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRelationTuples(pageToken?: string, pageSize?: number, namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRelationTuplesResponse>>;
    /**
     * To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
     * @summary Check a relation tuple
     * @param {number} [maxDepth]
     * @param {RelationQuery} [relationQuery]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCheck(maxDepth?: number, relationQuery?: RelationQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCheckResponse>>;
    /**
     * To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
     * @summary Check a relation tuple
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCheckMirrorStatus(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCheckResponse>>;
};
/**
 * ReadApi - factory interface
 * @export
 */
export declare const ReadApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
     * @summary Check a relation tuple
     * @param {string} [namespace] Namespace of the Relation Tuple
     * @param {string} [object] Object of the Relation Tuple
     * @param {string} [relation] Relation of the Relation Tuple
     * @param {string} [subjectId] SubjectID of the Relation Tuple
     * @param {string} [subjectSetNamespace] Namespace of the Subject Set
     * @param {string} [subjectSetObject] Object of the Subject Set
     * @param {string} [subjectSetRelation] Relation of the Subject Set
     * @param {number} [maxDepth]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCheck(namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, maxDepth?: number, options?: any): AxiosPromise<GetCheckResponse>;
    /**
     * To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
     * @summary Check a relation tuple
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCheckMirrorStatus(options?: any): AxiosPromise<GetCheckResponse>;
    /**
     * Use this endpoint to expand a relation tuple.
     * @summary Expand a Relation Tuple
     * @param {string} namespace Namespace of the Subject Set
     * @param {string} object Object of the Subject Set
     * @param {string} relation Relation of the Subject Set
     * @param {number} [maxDepth]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExpand(namespace: string, object: string, relation: string, maxDepth?: number, options?: any): AxiosPromise<ExpandTree>;
    /**
     * Get all relation tuples that match the query. Only the namespace field is required.
     * @summary Query relation tuples
     * @param {string} [pageToken]
     * @param {number} [pageSize]
     * @param {string} [namespace] Namespace of the Relation Tuple
     * @param {string} [object] Object of the Relation Tuple
     * @param {string} [relation] Relation of the Relation Tuple
     * @param {string} [subjectId] SubjectID of the Relation Tuple
     * @param {string} [subjectSetNamespace] Namespace of the Subject Set
     * @param {string} [subjectSetObject] Object of the Subject Set
     * @param {string} [subjectSetRelation] Relation of the Subject Set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRelationTuples(pageToken?: string, pageSize?: number, namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, options?: any): AxiosPromise<GetRelationTuplesResponse>;
    /**
     * To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
     * @summary Check a relation tuple
     * @param {number} [maxDepth]
     * @param {RelationQuery} [relationQuery]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCheck(maxDepth?: number, relationQuery?: RelationQuery, options?: any): AxiosPromise<GetCheckResponse>;
    /**
     * To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
     * @summary Check a relation tuple
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCheckMirrorStatus(options?: any): AxiosPromise<GetCheckResponse>;
};
/**
 * ReadApi - interface
 * @export
 * @interface ReadApi
 */
export interface ReadApiInterface {
    /**
     * To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
     * @summary Check a relation tuple
     * @param {string} [namespace] Namespace of the Relation Tuple
     * @param {string} [object] Object of the Relation Tuple
     * @param {string} [relation] Relation of the Relation Tuple
     * @param {string} [subjectId] SubjectID of the Relation Tuple
     * @param {string} [subjectSetNamespace] Namespace of the Subject Set
     * @param {string} [subjectSetObject] Object of the Subject Set
     * @param {string} [subjectSetRelation] Relation of the Subject Set
     * @param {number} [maxDepth]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReadApiInterface
     */
    getCheck(namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, maxDepth?: number, options?: AxiosRequestConfig): AxiosPromise<GetCheckResponse>;
    /**
     * To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
     * @summary Check a relation tuple
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReadApiInterface
     */
    getCheckMirrorStatus(options?: AxiosRequestConfig): AxiosPromise<GetCheckResponse>;
    /**
     * Use this endpoint to expand a relation tuple.
     * @summary Expand a Relation Tuple
     * @param {string} namespace Namespace of the Subject Set
     * @param {string} object Object of the Subject Set
     * @param {string} relation Relation of the Subject Set
     * @param {number} [maxDepth]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReadApiInterface
     */
    getExpand(namespace: string, object: string, relation: string, maxDepth?: number, options?: AxiosRequestConfig): AxiosPromise<ExpandTree>;
    /**
     * Get all relation tuples that match the query. Only the namespace field is required.
     * @summary Query relation tuples
     * @param {string} [pageToken]
     * @param {number} [pageSize]
     * @param {string} [namespace] Namespace of the Relation Tuple
     * @param {string} [object] Object of the Relation Tuple
     * @param {string} [relation] Relation of the Relation Tuple
     * @param {string} [subjectId] SubjectID of the Relation Tuple
     * @param {string} [subjectSetNamespace] Namespace of the Subject Set
     * @param {string} [subjectSetObject] Object of the Subject Set
     * @param {string} [subjectSetRelation] Relation of the Subject Set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReadApiInterface
     */
    getRelationTuples(pageToken?: string, pageSize?: number, namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, options?: AxiosRequestConfig): AxiosPromise<GetRelationTuplesResponse>;
    /**
     * To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
     * @summary Check a relation tuple
     * @param {number} [maxDepth]
     * @param {RelationQuery} [relationQuery]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReadApiInterface
     */
    postCheck(maxDepth?: number, relationQuery?: RelationQuery, options?: AxiosRequestConfig): AxiosPromise<GetCheckResponse>;
    /**
     * To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
     * @summary Check a relation tuple
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReadApiInterface
     */
    postCheckMirrorStatus(options?: AxiosRequestConfig): AxiosPromise<GetCheckResponse>;
}
/**
 * ReadApi - object-oriented interface
 * @export
 * @class ReadApi
 * @extends {BaseAPI}
 */
export declare class ReadApi extends BaseAPI implements ReadApiInterface {
    /**
     * To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
     * @summary Check a relation tuple
     * @param {string} [namespace] Namespace of the Relation Tuple
     * @param {string} [object] Object of the Relation Tuple
     * @param {string} [relation] Relation of the Relation Tuple
     * @param {string} [subjectId] SubjectID of the Relation Tuple
     * @param {string} [subjectSetNamespace] Namespace of the Subject Set
     * @param {string} [subjectSetObject] Object of the Subject Set
     * @param {string} [subjectSetRelation] Relation of the Subject Set
     * @param {number} [maxDepth]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReadApi
     */
    getCheck(namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, maxDepth?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetCheckResponse>>;
    /**
     * To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
     * @summary Check a relation tuple
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReadApi
     */
    getCheckMirrorStatus(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetCheckResponse>>;
    /**
     * Use this endpoint to expand a relation tuple.
     * @summary Expand a Relation Tuple
     * @param {string} namespace Namespace of the Subject Set
     * @param {string} object Object of the Subject Set
     * @param {string} relation Relation of the Subject Set
     * @param {number} [maxDepth]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReadApi
     */
    getExpand(namespace: string, object: string, relation: string, maxDepth?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ExpandTree>>;
    /**
     * Get all relation tuples that match the query. Only the namespace field is required.
     * @summary Query relation tuples
     * @param {string} [pageToken]
     * @param {number} [pageSize]
     * @param {string} [namespace] Namespace of the Relation Tuple
     * @param {string} [object] Object of the Relation Tuple
     * @param {string} [relation] Relation of the Relation Tuple
     * @param {string} [subjectId] SubjectID of the Relation Tuple
     * @param {string} [subjectSetNamespace] Namespace of the Subject Set
     * @param {string} [subjectSetObject] Object of the Subject Set
     * @param {string} [subjectSetRelation] Relation of the Subject Set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReadApi
     */
    getRelationTuples(pageToken?: string, pageSize?: number, namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetRelationTuplesResponse>>;
    /**
     * To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
     * @summary Check a relation tuple
     * @param {number} [maxDepth]
     * @param {RelationQuery} [relationQuery]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReadApi
     */
    postCheck(maxDepth?: number, relationQuery?: RelationQuery, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetCheckResponse>>;
    /**
     * To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
     * @summary Check a relation tuple
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReadApi
     */
    postCheckMirrorStatus(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetCheckResponse>>;
}
/**
 * SyntaxApi - axios parameter creator
 * @export
 */
export declare const SyntaxApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * The OPL file is expected in the body of the request.
     * @summary Check the syntax of an OPL file
     * @param {string} body the OPL content to check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkOplSyntax: (body: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SyntaxApi - functional programming interface
 * @export
 */
export declare const SyntaxApiFp: (configuration?: Configuration) => {
    /**
     * The OPL file is expected in the body of the request.
     * @summary Check the syntax of an OPL file
     * @param {string} body the OPL content to check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkOplSyntax(body: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostCheckOplSyntaxResponse>>;
};
/**
 * SyntaxApi - factory interface
 * @export
 */
export declare const SyntaxApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * The OPL file is expected in the body of the request.
     * @summary Check the syntax of an OPL file
     * @param {string} body the OPL content to check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkOplSyntax(body: string, options?: any): AxiosPromise<PostCheckOplSyntaxResponse>;
};
/**
 * SyntaxApi - interface
 * @export
 * @interface SyntaxApi
 */
export interface SyntaxApiInterface {
    /**
     * The OPL file is expected in the body of the request.
     * @summary Check the syntax of an OPL file
     * @param {string} body the OPL content to check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyntaxApiInterface
     */
    checkOplSyntax(body: string, options?: AxiosRequestConfig): AxiosPromise<PostCheckOplSyntaxResponse>;
}
/**
 * SyntaxApi - object-oriented interface
 * @export
 * @class SyntaxApi
 * @extends {BaseAPI}
 */
export declare class SyntaxApi extends BaseAPI implements SyntaxApiInterface {
    /**
     * The OPL file is expected in the body of the request.
     * @summary Check the syntax of an OPL file
     * @param {string} body the OPL content to check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyntaxApi
     */
    checkOplSyntax(body: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PostCheckOplSyntaxResponse>>;
}
/**
 * V0alpha2Api - axios parameter creator
 * @export
 */
export declare const V0alpha2ApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Accept an OAuth 2.0 Consent Request
     * @param {string} consentChallenge
     * @param {AcceptOAuth2ConsentRequest} [acceptOAuth2ConsentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminAcceptOAuth2ConsentRequest: (consentChallenge: string, acceptOAuth2ConsentRequest?: AcceptOAuth2ConsentRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell Ory Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has successfully authenticated and includes additional information such as the subject\'s ID and if ORY Hydra should remember the subject\'s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @summary Accept an OAuth 2.0 Login Request
     * @param {string} loginChallenge
     * @param {AcceptOAuth2LoginRequest} [acceptOAuth2LoginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminAcceptOAuth2LoginRequest: (loginChallenge: string, acceptOAuth2LoginRequest?: AcceptOAuth2LoginRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * When a user or an application requests ORY Hydra to log out a user, this endpoint is used to confirm that logout request.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Accept an OAuth 2.0 Logout Request
     * @param {string} logoutChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminAcceptOAuth2LogoutRequest: (logoutChallenge: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint creates an identity. Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Create an Identity
     * @param {AdminCreateIdentityBody} [adminCreateIdentityBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateIdentity: (adminCreateIdentityBody?: AdminCreateIdentityBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Generate a New JSON Web Key
     * @param {string} set The JSON Web Key Set
     * @param {AdminCreateJsonWebKeySetBody} adminCreateJsonWebKeySetBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateJsonWebKeySet: (set: string, adminCreateJsonWebKeySetBody: AdminCreateJsonWebKeySetBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new OAuth 2.0 client. If you pass `client_secret` the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Create an OAuth 2.0 Client
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateOAuth2Client: (oAuth2Client: OAuth2Client, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint creates a recovery code which should be given to the user in order for them to recover (or activate) their account.
     * @summary Create a Recovery Link
     * @param {AdminCreateSelfServiceRecoveryCodeBody} [adminCreateSelfServiceRecoveryCodeBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateSelfServiceRecoveryCode: (adminCreateSelfServiceRecoveryCodeBody?: AdminCreateSelfServiceRecoveryCodeBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint creates a recovery link which should be given to the user in order for them to recover (or activate) their account.
     * @summary Create a Recovery Link
     * @param {AdminCreateSelfServiceRecoveryLinkBody} [adminCreateSelfServiceRecoveryLinkBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateSelfServiceRecoveryLink: (adminCreateSelfServiceRecoveryLinkBody?: AdminCreateSelfServiceRecoveryLinkBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Calling this endpoint irrecoverably and permanently deletes the identity given its ID. This action can not be undone. This endpoint returns 204 when the identity was deleted or when the identity was not found, in which case it is assumed that is has been deleted already.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Delete an Identity
     * @param {string} id ID is the identity\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteIdentity: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint is useful for:  To forcefully logout Identity from all devices and sessions
     * @summary Calling this endpoint irrecoverably and permanently deletes and invalidates all sessions that belong to the given Identity.
     * @param {string} id ID is the identity\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteIdentitySessions: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Delete a JSON Web Key
     * @param {string} set The JSON Web Key Set
     * @param {string} kid The JSON Web Key ID (kid)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteJsonWebKey: (set: string, kid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Delete a JSON Web Key Set
     * @param {string} set The JSON Web Key Set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteJsonWebKeySet: (set: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
     * @summary Deletes an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteOAuth2Client: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint deletes OAuth2 access tokens issued for a client from the database
     * @summary Delete OAuth2 Access Tokens from a Client
     * @param {string} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteOAuth2Token: (clientId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
     * @summary Delete a Trusted OAuth2 JWT Bearer Grant Type Issuer
     * @param {string} id The id of the desired grant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteTrustedOAuth2JwtGrantIssuer: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve the session ID from the `/sessions/whoami` endpoint / `toSession` SDK method.
     * @summary Calling this endpoint extends the given session ID. If `session.earliest_possible_extend` is set it will only extend the session after the specified time has passed.
     * @param {string} id ID is the session\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminExtendSession: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Get an Identity
     * @param {string} id ID must be set to the ID of identity you want to get
     * @param {Array<string>} [includeCredential] DeclassifyCredentials will declassify one or more identity\&#39;s credentials  Currently, only &#x60;oidc&#x60; is supported. This will return the initial OAuth 2.0 Access, Refresh and (optionally) OpenID Connect ID Token.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetIdentity: (id: string, includeCredential?: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns a singular JSON Web Key. It is identified by the set and the specific key ID (kid).
     * @summary Fetch a JSON Web Key
     * @param {string} set The JSON Web Key Set
     * @param {string} kid The JSON Web Key ID (kid)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetJsonWebKey: (set: string, kid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Retrieve a JSON Web Key Set
     * @param {string} set The JSON Web Key Set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetJsonWebKeySet: (set: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Get an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetOAuth2Client: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.
     * @summary Get OAuth 2.0 Consent Request Information
     * @param {string} consentChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetOAuth2ConsentRequest: (consentChallenge: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
     * @summary Get an OAuth 2.0 Login Request
     * @param {string} loginChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetOAuth2LoginRequest: (loginChallenge: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to fetch a logout request.
     * @summary Get an OAuth 2.0 Logout Request
     * @param {string} logoutChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetOAuth2LogoutRequest: (logoutChallenge: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
     * @summary Get a Trusted OAuth2 JWT Bearer Grant Type Issuer
     * @param {string} id The id of the desired grant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetTrustedOAuth2JwtGrantIssuer: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting `accessTokenExtra` during the consent flow.  For more information [read this blog post](https://www.oauth.com/oauth2-servers/token-introspection-endpoint/).
     * @summary Introspect OAuth2 Access or Refresh Tokens
     * @param {string} token The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.
     * @param {string} [scope] An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminIntrospectOAuth2Token: (token: string, scope?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all messages by given status and recipient.
     * @summary List Messages
     * @param {number} [perPage] Items per Page  This is the number of items per page.
     * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
     * @param {CourierMessageStatus} [status] Status filters out messages based on status. If no value is provided, it doesn\&#39;t take effect on filter.
     * @param {string} [recipient] Recipient filters out messages based on recipient. If no value is provided, it doesn\&#39;t take effect on filter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListCourierMessages: (perPage?: number, page?: number, status?: CourierMessageStatus, recipient?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all identities. Does not support search at the moment.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary List Identities
     * @param {number} [perPage] Items per Page  This is the number of items per page.
     * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListIdentities: (perPage?: number, page?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint is useful for:  Listing all sessions that belong to an Identity in an administrative context.
     * @summary This endpoint returns all sessions that belong to the given Identity.
     * @param {string} id ID is the identity\&#39;s ID.
     * @param {number} [perPage] Items per Page  This is the number of items per page.
     * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
     * @param {boolean} [active] Active is a boolean flag that filters out sessions based on the state. If no value is provided, all sessions are returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListIdentitySessions: (id: string, perPage?: number, page?: number, active?: boolean, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients. The `limit` parameter can be used to retrieve more clients, but it has an upper bound at 500 objects. Pagination should be used to retrieve more than 500 objects.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: \'<https://project-slug.projects.oryapis.com/admin/clients?limit={limit}&offset={offset}>; rel=\"{page}\"\', where page is one of the following applicable pages: \'first\', \'next\', \'last\', and \'previous\'. Multiple links can be included in this header, and will be separated by a comma.
     * @summary List OAuth 2.0 Clients
     * @param {number} [pageSize] Items per page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     * @param {string} [pageToken] Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     * @param {string} [clientName] The name of the clients to filter by.
     * @param {string} [owner] The owner of the clients to filter by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListOAuth2Clients: (pageSize?: number, pageToken?: string, clientName?: string, owner?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint lists all subject\'s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.  The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: \'<https://hydra-url/admin/oauth2/auth/sessions/consent?subject={user}&limit={limit}&offset={offset}>; rel=\"{page}\"\', where page is one of the following applicable pages: \'first\', \'next\', \'last\', and \'previous\'. Multiple links can be included in this header, and will be separated by a comma.
     * @summary List OAuth 2.0 Consent Sessions of a Subject
     * @param {string} subject The subject to list the consent sessions for.
     * @param {string} [link] The link header contains pagination links.  For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     * @param {string} [xTotalCount] The total number of clients.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListOAuth2SubjectConsentSessions: (subject: string, link?: string, xTotalCount?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
     * @summary List Trusted OAuth2 JWT Bearer Grant Type Issuers
     * @param {number} [maxItems]
     * @param {number} [defaultItems]
     * @param {string} [issuer] If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned.
     * @param {number} [limit] The maximum amount of policies returned, upper bound is 500 policies
     * @param {number} [offset] The offset from where to start looking.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListTrustedOAuth2JwtGrantIssuers: (maxItems?: number, defaultItems?: number, issuer?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Partially updates an Identity\'s field using [JSON Patch](https://jsonpatch.com/)  NOTE: The fields `id`, `stateChangedAt` and `credentials` are not updateable.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Patch an Identity
     * @param {string} id ID must be set to the ID of identity you want to update
     * @param {Array<JsonPatch>} [jsonPatch]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminPatchIdentity: (id: string, jsonPatch?: Array<JsonPatch>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Patch an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Patch an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {Array<JsonPatch>} jsonPatch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminPatchOAuth2Client: (id: string, jsonPatch: Array<JsonPatch>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Reject an OAuth 2.0 Consent Request
     * @param {string} consentChallenge
     * @param {RejectOAuth2Request} [rejectOAuth2Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRejectOAuth2ConsentRequest: (consentChallenge: string, rejectOAuth2Request?: RejectOAuth2Request, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has not authenticated and includes a reason why the authentication was denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @summary Reject an OAuth 2.0 Login Request
     * @param {string} loginChallenge
     * @param {RejectOAuth2Request} [rejectOAuth2Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRejectOAuth2LoginRequest: (loginChallenge: string, rejectOAuth2Request?: RejectOAuth2Request, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * When a user or an application requests ORY Hydra to log out a user, this endpoint is used to deny that logout request. No body is required.  The response is empty as the logout provider has to chose what action to perform next.
     * @summary Reject an OAuth 2.0 Logout Request
     * @param {string} logoutChallenge
     * @param {RejectOAuth2Request} [rejectOAuth2Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRejectOAuth2LogoutRequest: (logoutChallenge: string, rejectOAuth2Request?: RejectOAuth2Request, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint revokes a subject\'s granted consent sessions for a specific OAuth 2.0 Client and invalidates all associated OAuth 2.0 Access Tokens.
     * @summary Revokes OAuth 2.0 Consent Sessions of a Subject for a Specific OAuth 2.0 Client
     * @param {string} subject The subject (Subject) whose consent sessions should be deleted.
     * @param {string} [client] If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID
     * @param {boolean} [all] If set to &#x60;true&#x60; deletes all consent sessions by the Subject that have been granted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRevokeOAuth2ConsentSessions: (subject: string, client?: string, all?: boolean, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint invalidates a subject\'s authentication session. After revoking the authentication session, the subject has to re-authenticate at ORY Hydra. This endpoint does not invalidate any tokens and does not work with OpenID Connect Front- or Back-channel logout.
     * @summary Invalidates All OAuth 2.0 Login Sessions of a Certain User
     * @param {string} subject The subject to revoke authentication sessions for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRevokeOAuth2LoginSessions: (subject: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
     * @summary Trust an OAuth2 JWT Bearer Grant Type Issuer
     * @param {AdminTrustOAuth2JwtGrantIssuerBody} [adminTrustOAuth2JwtGrantIssuerBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminTrustOAuth2JwtGrantIssuer: (adminTrustOAuth2JwtGrantIssuerBody?: AdminTrustOAuth2JwtGrantIssuerBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint updates an identity. The full identity payload (except credentials) is expected. This endpoint does not support patching.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Update an Identity
     * @param {string} id ID must be set to the ID of identity you want to update
     * @param {AdminUpdateIdentityBody} [adminUpdateIdentityBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateIdentity: (id: string, adminUpdateIdentityBody?: AdminUpdateIdentityBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Update a JSON Web Key
     * @param {string} set The JSON Web Key Set
     * @param {string} kid The JSON Web Key ID (kid)
     * @param {JsonWebKey} [jsonWebKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateJsonWebKey: (set: string, kid: string, jsonWebKey?: JsonWebKey, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Update a JSON Web Key Set
     * @param {string} set The JSON Web Key Set
     * @param {JsonWebKeySet} [jsonWebKeySet]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateJsonWebKeySet: (set: string, jsonWebKeySet?: JsonWebKeySet, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update an existing OAuth 2.0 Client. If you pass `client_secret` the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Update an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateOAuth2Client: (id: string, oAuth2Client: OAuth2Client, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new project.
     * @summary Create a Project
     * @param {CreateProjectBody} [createProjectBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProject: (createProjectBody?: CreateProjectBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create an API token for a project.
     * @summary Create API Token
     * @param {string} project The Project ID or Project slug
     * @param {InlineObject3} [inlineObject3]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProjectApiKey: (project: string, inlineObject3?: InlineObject3, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint initializes a browser-based user logout flow and a URL which can be used to log out the user.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the `/self-service/logout/api` URL directly with the Ory Session Token.  The URL is only valid for the currently signed in user. If no user is signed in, this endpoint returns a 401 error.  When calling this endpoint from a backend, please ensure to properly forward the HTTP cookies.
     * @summary Create a Logout URL for Browsers
     * @param {string} [cookie] HTTP Cookies  If you call this endpoint from a backend, please include the original Cookie header in the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSelfServiceLogoutFlowUrlForBrowsers: (cookie?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes an API Token and immediately removes it.
     * @summary Delete API Token
     * @param {string} project The Project ID or Project slug
     * @param {string} tokenId The Token ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProjectApiKey: (project: string, tokenId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns JSON Web Keys required to verifying OpenID Connect ID Tokens and, if enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like [node-jwks-rsa](https://github.com/auth0/node-jwks-rsa) among others.
     * @summary Discover JSON Web Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    discoverJsonWebKeys: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * The well known endpoint an be used to retrieve information for OpenID Connect clients. We encourage you to not roll your own OpenID Connect client but to use an OpenID Connect client library instead. You can learn more on this flow at https://openid.net/specs/openid-connect-discovery-1_0.html .  Popular libraries for OpenID Connect clients include oidc-client-js (JavaScript), go-oidc (Golang), and others. For a full list of clients go here: https://openid.net/developers/certified/
     * @summary OpenID Connect Discovery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    discoverOidcConfiguration: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint behaves like the administrative counterpart (`createOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  Please note that using this endpoint you are not able to choose the `client_secret` nor the `client_id` as those values will be server generated when specifying `token_endpoint_auth_method` as `client_secret_basic` or `client_secret_post`.  The `client_secret` will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somewhere safe.
     * @summary Register an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dynamicClientRegistrationCreateOAuth2Client: (oAuth2Client: OAuth2Client, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint behaves like the administrative counterpart (`deleteOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Deletes an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dynamicClientRegistrationDeleteOAuth2Client: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint behaves like the administrative counterpart (`getOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Get an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dynamicClientRegistrationGetOAuth2Client: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint behaves like the administrative counterpart (`updateOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  If you pass `client_secret` the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Update an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dynamicClientRegistrationUpdateOAuth2Client: (id: string, oAuth2Client: OAuth2Client, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a JSON Schema
     * @param {string} id ID must be set to the ID of schema you want to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIdentitySchema: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns the payload of the ID Token, including the idTokenExtra values, of the provided OAuth 2.0 Access Token.  For more information please [refer to the spec](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).  In the case of authentication error, a WWW-Authenticate header might be set in the response with more information about the error. See [the spec](https://datatracker.ietf.org/doc/html/rfc6750#section-3) for more details about header format.
     * @summary OpenID Connect Userinfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOidcUserInfo: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a projects you have access to by its ID.
     * @summary Get a Project
     * @param {string} projectId Project ID  The project\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProject: (projectId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint requires the user to be a member of the project with the role `OWNER` or `DEVELOPER`.
     * @summary Get all members associated with this project.
     * @param {string} projectId Project ID  The project\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectMembers: (projectId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns the error associated with a user-facing self service errors.  This endpoint supports stub values to help you implement the error UI:  `?id=stub:500` - returns a stub 500 (Internal Server Error) error.  More information can be found at [Ory Kratos User User Facing Error Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-facing-errors).
     * @summary Get Self-Service Errors
     * @param {string} id Error is the error\&#39;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceError: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns a login flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/login\', async function (req, res) { const flow = await client.getSelfServiceLoginFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'login\', flow) }) ```  This request may fail due to several reasons. The `error.id` can be one of:  `session_already_available`: The user is already signed in. `self_service_flow_expired`: The flow is expired and you should request a new one.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Get Login Flow
     * @param {string} id The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceLoginFlow: (id: string, cookie?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns a recovery flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/recovery\', async function (req, res) { const flow = await client.getSelfServiceRecoveryFlow(req.header(\'Cookie\'), req.query[\'flow\'])  res.render(\'recovery\', flow) }) ```  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
     * @summary Get Recovery Flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceRecoveryFlow: (id: string, cookie?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns a registration flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/registration\', async function (req, res) { const flow = await client.getSelfServiceRegistrationFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'registration\', flow) }) ```  This request may fail due to several reasons. The `error.id` can be one of:  `session_already_available`: The user is already signed in. `self_service_flow_expired`: The flow is expired and you should request a new one.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Get Registration Flow
     * @param {string} id The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceRegistrationFlow: (id: string, cookie?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * When accessing this endpoint through Ory Kratos\' Public API you must ensure that either the Ory Kratos Session Cookie or the Ory Kratos Session Token are set.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  You can access this endpoint without credentials when using Ory Kratos\' Admin API.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first. `security_identity_mismatch`: The flow was interrupted with `session_refresh_required` but apparently some other identity logged in instead.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Get Settings Flow
     * @param {string} id ID is the Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
     * @param {string} [xSessionToken] The Session Token  When using the SDK in an app without a browser, please include the session token here.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceSettingsFlow: (id: string, xSessionToken?: string, cookie?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns a verification flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/recovery\', async function (req, res) { const flow = await client.getSelfServiceVerificationFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'verification\', flow) })  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Get Verification Flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceVerificationFlow: (id: string, cookie?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint provides JavaScript which is needed in order to perform WebAuthn login and registration.  If you are building a JavaScript Browser App (e.g. in ReactJS or AngularJS) you will need to load this file:  ```html <script src=\"https://public-kratos.example.org/.well-known/ory/webauthn.js\" type=\"script\" async /> ```  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Get WebAuthn JavaScript
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebAuthnJavaScript: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint initializes a browser-based user login flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.login.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url` unless the query parameter `?refresh=true` was set.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `session_aal1_required`: Multi-factor auth (e.g. 2fa) was requested but the user has no session yet. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Initialize Login Flow for Browsers
     * @param {boolean} [refresh] Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session.
     * @param {string} [aal] Request a Specific AuthenticationMethod Assurance Level  Use this parameter to upgrade an existing session\&#39;s authenticator assurance level (AAL). This allows you to ask for multi-factor authentication. When an identity sign in using e.g. username+password, the AAL is 1. If you wish to \&quot;upgrade\&quot; the session\&#39;s security by asking the user to perform TOTP / WebAuth/ ... you would set this to \&quot;aal2\&quot;.
     * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceLoginFlowForBrowsers: (refresh?: boolean, aal?: string, returnTo?: string, cookie?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint initiates a login flow for API clients that do not use a browser, such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing login flow call `/self-service/login/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks, including CSRF login attacks.  In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `session_aal1_required`: Multi-factor auth (e.g. 2fa) was requested but the user has no session yet. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Initialize Login Flow for APIs, Services, Apps, ...
     * @param {boolean} [refresh] Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session.
     * @param {string} [aal] Request a Specific AuthenticationMethod Assurance Level  Use this parameter to upgrade an existing session\&#39;s authenticator assurance level (AAL). This allows you to ask for multi-factor authentication. When an identity sign in using e.g. username+password, the AAL is 1. If you wish to \&quot;upgrade\&quot; the session\&#39;s security by asking the user to perform TOTP / WebAuth/ ... you would set this to \&quot;aal2\&quot;.
     * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceLoginFlowWithoutBrowser: (refresh?: boolean, aal?: string, xSessionToken?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint initializes a browser-based account recovery flow. Once initialized, the browser will be redirected to `selfservice.flows.recovery.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists, the browser is returned to the configured return URL.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects or a 400 bad request error if the user is already authenticated.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
     * @summary Initialize Recovery Flow for Browsers
     * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRecoveryFlowForBrowsers: (returnTo?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint initiates a recovery flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error.  To fetch an existing recovery flow call `/self-service/recovery/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
     * @summary Initialize Recovery Flow for APIs, Services, Apps, ...
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRecoveryFlowWithoutBrowser: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint initializes a browser-based user registration flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  :::info  This endpoint is EXPERIMENTAL and subject to potential breaking changes in the future.  :::  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.registration.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url`.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!  If this endpoint is called via an AJAX request, the response contains the registration flow without a redirect.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Initialize Registration Flow for Browsers
     * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRegistrationFlowForBrowsers: (returnTo?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint initiates a registration flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing registration flow call `/self-service/registration/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Initialize Registration Flow for APIs, Services, Apps, ...
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRegistrationFlowWithoutBrowser: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint initializes a browser-based user settings flow. Once initialized, the browser will be redirected to `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid Ory Kratos Session Cookie is included in the request, a login flow will be initialized.  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid user session was set, the browser will be redirected to the login endpoint.  If this endpoint is called via an AJAX request, the response contains the settings flow without any redirects or a 401 forbidden error if no valid session was set.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor (happens automatically for server-side browser flows) or change the configuration.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Initialize Settings Flow for Browsers
     * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceSettingsFlowForBrowsers: (returnTo?: string, cookie?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint initiates a settings flow for API clients such as mobile devices, smart TVs, and so on. You must provide a valid Ory Kratos Session Token for this endpoint to respond with HTTP 200 OK.  To fetch an existing settings flow call `/self-service/settings/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  In the case of an error, the `error.id` of the JSON response body can be one of:  `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Initialize Settings Flow for APIs, Services, Apps, ...
     * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceSettingsFlowWithoutBrowser: (xSessionToken?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint initializes a browser-based account verification flow. Once initialized, the browser will be redirected to `selfservice.flows.verification.ui_url` with the flow ID set as the query parameter `?flow=`.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Initialize Verification Flow for Browser Clients
     * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceVerificationFlowForBrowsers: (returnTo?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint initiates a verification flow for API clients such as mobile devices, smart TVs, and so on.  To fetch an existing verification flow call `/self-service/verification/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
     * @summary Initialize Verification Flow for APIs, Services, Apps, ...
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceVerificationFlowWithoutBrowser: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get all Identity Schemas
     * @param {number} [perPage] Items per Page  This is the number of items per page.
     * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listIdentitySchemas: (perPage?: number, page?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * A list of all the project\'s API tokens.
     * @summary List a Project\'s API Tokens
     * @param {string} project The Project ID or Project slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjectApiKeys: (project: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all projects you have access to.
     * @summary List All Projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjects: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint is useful for:  Displaying all other sessions that belong to the logged-in user
     * @summary This endpoints returns all other active sessions that belong to the logged-in user. The current session can be retrieved by calling the `/sessions/whoami` endpoint.
     * @param {string} [xSessionToken] Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
     * @param {string} [cookie] Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
     * @param {number} [perPage] Items per Page  This is the number of items per page.
     * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSessions: (xSessionToken?: string, cookie?: string, perPage?: number, page?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deprecated: Use the `patchProjectWithRevision` endpoint instead to specify the exact revision the patch was generated for.  This endpoints allows you to patch individual Ory Cloud Project configuration keys for Ory\'s services (identity, permission, ...). The configuration format is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the `version` key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to Ory Cloud, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.
     * @summary Patch an Ory Cloud Project Configuration`
     * @param {string} projectId Project ID  The project\&#39;s ID.
     * @param {Array<JsonPatch>} [jsonPatch]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchProject: (projectId: string, jsonPatch?: Array<JsonPatch>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint is not documented here because you should never use your own implementation to perform OAuth2 flows. OAuth2 is a very popular protocol and a library for your programming language will exists.  To learn more about this flow please refer to the specification: https://tools.ietf.org/html/rfc6749
     * @summary The OAuth 2.0 Authorize Endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    performOAuth2AuthorizationFlow: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * The client makes a request to the token endpoint by sending the following parameters using the \"application/x-www-form-urlencoded\" HTTP request entity-body.  > Do not implement a client for this endpoint yourself. Use a library. There are many libraries > available for any programming language. You can find a list of libraries here: https://oauth.net/code/ > > Do note that Hydra SDK does not implement this endpoint properly. Use one of the libraries listed above
     * @summary The OAuth 2.0 Token Endpoint
     * @param {string} grantType
     * @param {string} [clientId]
     * @param {string} [code]
     * @param {string} [redirectUri]
     * @param {string} [refreshToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    performOAuth2TokenFlow: (grantType: string, clientId?: string, code?: string, redirectUri?: string, refreshToken?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint initiates and completes user logout at Ory Hydra and initiates OpenID Connect Front- / Back-channel logout:  https://openid.net/specs/openid-connect-frontchannel-1_0.html https://openid.net/specs/openid-connect-backchannel-1_0.html  Back-channel logout is performed asynchronously and does not affect logout flow.
     * @summary OpenID Connect Front- or Back-channel Enabled Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    performOidcFrontOrBackChannelLogout: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * !! Use with extreme caution !!  Using this API endpoint you can purge (completely delete) a project and its data. This action can not be undone and will delete ALL your data.  !! Use with extreme caution !!
     * @summary Irrecoverably Purge a Project
     * @param {string} projectId Project ID  The project\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purgeProject: (projectId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint requires the user to be a member of the project with the role `OWNER`.
     * @summary Remove a member associated with this project. This also sets their invite status to `REMOVED`.
     * @param {string} projectId Project ID  The project\&#39;s ID.
     * @param {string} memberId Member ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeProjectMember: (projectId: string, memberId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
     * @summary Revoke an OAuth2 Access or Refresh Token
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeOAuth2Token: (token: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint is useful for:  To forcefully logout the current user from another device or session
     * @summary Calling this endpoint invalidates the specified session. The current session cannot be revoked. Session data are not deleted.
     * @param {string} id ID is the session\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeSession: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint is useful for:  To forcefully logout the current user from all other devices and sessions
     * @summary Calling this endpoint invalidates all except the current session that belong to the logged-in user. Session data are not deleted.
     * @param {string} [xSessionToken] Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
     * @param {string} [cookie] Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeSessions: (xSessionToken?: string, cookie?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * :::info  This endpoint is EXPERIMENTAL and subject to potential breaking changes in the future.  :::  Use this endpoint to complete a login flow. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and responds with HTTP 200 and a application/json body with the session token on success; HTTP 410 if the original flow expired with the appropriate error messages set and optionally a `use_flow_id` parameter in the body; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of `application/x-www-form-urlencoded` or `application/json` to be sent in the body and respond with a HTTP 303 redirect to the post/after login URL or the `return_to` value if it was set and if the login succeeded; a HTTP 303 redirect to the login UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of `application/json` will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  If this endpoint is called with `Accept: application/json` in the header, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration! `browser_location_change_required`: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Submit a Login Flow
     * @param {string} flow The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
     * @param {SubmitSelfServiceLoginFlowBody} submitSelfServiceLoginFlowBody
     * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceLoginFlow: (flow: string, submitSelfServiceLoginFlowBody: SubmitSelfServiceLoginFlowBody, xSessionToken?: string, cookie?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint logs out an identity in a self-service manner.  If the `Accept` HTTP header is not set to `application/json`, the browser will be redirected (HTTP 303 See Other) to the `return_to` parameter of the initial request or fall back to `urls.default_return_to`.  If the `Accept` HTTP header is set to `application/json`, a 204 No Content response will be sent on successful logout instead.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the `/self-service/logout/api` URL directly with the Ory Session Token.  More information can be found at [Ory Kratos User Logout Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-logout).
     * @summary Complete Self-Service Logout
     * @param {string} [token] A Valid Logout Token  If you do not have a logout token because you only have a session cookie, call &#x60;/self-service/logout/browser&#x60; to generate a URL for this endpoint.
     * @param {string} [returnTo] The URL to return to after the logout was completed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceLogoutFlow: (token?: string, returnTo?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to log out an identity using an Ory Session Token. If the Ory Session Token was successfully revoked, the server returns a 204 No Content response. A 204 No Content response is also sent when the Ory Session Token has been revoked already before.  If the Ory Session Token is malformed or does not exist a 403 Forbidden response will be returned.  This endpoint does not remove any HTTP Cookies - use the Browser-Based Self-Service Logout Flow instead.
     * @summary Perform Logout for APIs, Services, Apps, ...
     * @param {SubmitSelfServiceLogoutFlowWithoutBrowserBody} submitSelfServiceLogoutFlowWithoutBrowserBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceLogoutFlowWithoutBrowser: (submitSelfServiceLogoutFlowWithoutBrowserBody: SubmitSelfServiceLogoutFlowWithoutBrowserBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to complete a recovery flow. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header `Accept: application/json` it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid. and a HTTP 303 See Other redirect with a fresh recovery flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header `Accept` or with `Accept: text/_*` it returns a HTTP 303 See Other redirect to the Recovery UI URL with the Recovery Flow ID appended. `sent_email` is the success state after `choose_method` for the `link` method and allows the user to request another recovery email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a recovery link\") does not have any API capabilities. The server responds with a HTTP 303 See Other redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Recover UI URL with a new Recovery Flow ID which contains an error message that the recovery link was invalid.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
     * @summary Complete Recovery Flow
     * @param {string} flow The Recovery Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
     * @param {SubmitSelfServiceRecoveryFlowBody} submitSelfServiceRecoveryFlowBody
     * @param {string} [token] Recovery Token  The recovery token which completes the recovery request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceRecoveryFlow: (flow: string, submitSelfServiceRecoveryFlowBody: SubmitSelfServiceRecoveryFlowBody, token?: string, cookie?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to complete a registration flow by sending an identity\'s traits and password. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and respond with HTTP 200 and a application/json body with the created identity success - if the session hook is configured the `session` and `session_token` will also be included; HTTP 410 if the original flow expired with the appropriate error messages set and optionally a `use_flow_id` parameter in the body; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of `application/x-www-form-urlencoded` or `application/json` to be sent in the body and respond with a HTTP 303 redirect to the post/after registration URL or the `return_to` value if it was set and if the registration succeeded; a HTTP 303 redirect to the registration UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of `application/json` will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  If this endpoint is called with `Accept: application/json` in the header, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration! `browser_location_change_required`: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Submit a Registration Flow
     * @param {string} flow The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
     * @param {SubmitSelfServiceRegistrationFlowBody} submitSelfServiceRegistrationFlowBody
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceRegistrationFlow: (flow: string, submitSelfServiceRegistrationFlowBody: SubmitSelfServiceRegistrationFlowBody, cookie?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to complete a settings flow by sending an identity\'s updated password. This endpoint behaves differently for API and browser flows.  API-initiated flows expect `application/json` to be sent in the body and respond with HTTP 200 and an application/json body with the session token on success; HTTP 303 redirect to a fresh settings flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors. HTTP 401 when the endpoint is called without a valid session token. HTTP 403 when `selfservice.flows.settings.privileged_session_max_age` was reached or the session\'s AAL is too low. Implies that the user needs to re-authenticate.  Browser flows without HTTP Header `Accept` or with `Accept: text/_*` respond with a HTTP 303 redirect to the post/after settings URL or the `return_to` value if it was set and if the flow succeeded; a HTTP 303 redirect to the Settings UI URL with the flow ID containing the validation errors otherwise. a HTTP 303 redirect to the login endpoint when `selfservice.flows.settings.privileged_session_max_age` was reached or the session\'s AAL is too low.  Browser flows with HTTP Header `Accept: application/json` respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 401 when the endpoint is called without a valid session cookie. HTTP 403 when the page is accessed without a session cookie or the session\'s AAL is too low. HTTP 400 on form validation errors.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor (happens automatically for server-side browser flows) or change the configuration.  If this endpoint is called with a `Accept: application/json` HTTP header, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_refresh_required`: The identity requested to change something that needs a privileged session. Redirect the identity to the login init endpoint with query parameters `?refresh=true&return_to=<the-current-browser-url>`, or initiate a refresh login flow otherwise. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first. `security_identity_mismatch`: The flow was interrupted with `session_refresh_required` but apparently some other identity logged in instead. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration! `browser_location_change_required`: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Complete Settings Flow
     * @param {string} flow The Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
     * @param {SubmitSelfServiceSettingsFlowBody} submitSelfServiceSettingsFlowBody
     * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceSettingsFlow: (flow: string, submitSelfServiceSettingsFlowBody: SubmitSelfServiceSettingsFlowBody, xSessionToken?: string, cookie?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to complete a verification flow. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header `Accept: application/json` it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 303 See Other redirect with a fresh verification flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header `Accept` or with `Accept: text/_*` it returns a HTTP 303 See Other redirect to the Verification UI URL with the Verification Flow ID appended. `sent_email` is the success state after `choose_method` when using the `link` method and allows the user to request another verification email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a verification link\") does not have any API capabilities. The server responds with a HTTP 303 See Other redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Verification UI URL with a new Verification Flow ID which contains an error message that the verification link was invalid.  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Complete Verification Flow
     * @param {string} flow The Verification Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
     * @param {SubmitSelfServiceVerificationFlowBody} submitSelfServiceVerificationFlowBody
     * @param {string} [token] Verification Token  The verification token which completes the verification request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceVerificationFlow: (flow: string, submitSelfServiceVerificationFlowBody: SubmitSelfServiceVerificationFlowBody, token?: string, cookie?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Uses the HTTP Headers in the GET request to determine (e.g. by using checking the cookies) who is authenticated. Returns a session object in the body or 401 if the credentials are invalid or no credentials were sent. Additionally when the request it successful it adds the user ID to the \'X-Kratos-Authenticated-Identity-Id\' header in the response.  If you call this endpoint from a server-side application, you must forward the HTTP Cookie Header to this endpoint:  ```js pseudo-code example router.get(\'/protected-endpoint\', async function (req, res) { const session = await client.toSession(undefined, req.header(\'cookie\'))  console.log(session) }) ```  When calling this endpoint from a non-browser application (e.g. mobile app) you must include the session token:  ```js pseudo-code example ... const session = await client.toSession(\"the-session-token\")  console.log(session) ```  Depending on your configuration this endpoint might return a 403 status code if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  This endpoint is useful for:  AJAX calls. Remember to send credentials and set up CORS correctly! Reverse proxies and API Gateways Server-side calls - use the `X-Session-Token` header!  # This endpoint authenticates users by checking  if the `Cookie` HTTP header was set containing an Ory Kratos Session Cookie; if the `Authorization: bearer <ory-session-token>` HTTP header was set with a valid Ory Kratos Session Token; if the `X-Session-Token` HTTP header was set with a valid Ory Kratos Session Token.  If none of these headers are set or the cooke or token are invalid, the endpoint returns a HTTP 401 status code.  As explained above, this request may fail due to several reasons. The `error.id` can be one of:  `session_inactive`: No active session was found in the request (e.g. no Ory Session Cookie / Ory Session Token). `session_aal2_required`: An active session was found but it does not fulfil the Authenticator Assurance Level, implying that the session must (e.g.) authenticate the second factor.
     * @summary Check Who the Current HTTP Session Belongs To
     * @param {string} [xSessionToken] Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
     * @param {string} [cookie] Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    toSession: (xSessionToken?: string, cookie?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoints allows you to update the Ory Cloud Project configuration for individual services (identity, permission, ...). The configuration is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the `version` key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to Ory Cloud, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.  Be aware that updating any service\'s configuration will completely override your current configuration for that service!
     * @summary Update an Ory Cloud Project Configuration
     * @param {string} projectId Project ID  The project\&#39;s ID.
     * @param {UpdateProject} [updateProject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProject: (projectId: string, updateProject?: UpdateProject, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * V0alpha2Api - functional programming interface
 * @export
 */
export declare const V0alpha2ApiFp: (configuration?: Configuration) => {
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Accept an OAuth 2.0 Consent Request
     * @param {string} consentChallenge
     * @param {AcceptOAuth2ConsentRequest} [acceptOAuth2ConsentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminAcceptOAuth2ConsentRequest(consentChallenge: string, acceptOAuth2ConsentRequest?: AcceptOAuth2ConsentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulOAuth2RequestResponse>>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell Ory Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has successfully authenticated and includes additional information such as the subject\'s ID and if ORY Hydra should remember the subject\'s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @summary Accept an OAuth 2.0 Login Request
     * @param {string} loginChallenge
     * @param {AcceptOAuth2LoginRequest} [acceptOAuth2LoginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminAcceptOAuth2LoginRequest(loginChallenge: string, acceptOAuth2LoginRequest?: AcceptOAuth2LoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulOAuth2RequestResponse>>;
    /**
     * When a user or an application requests ORY Hydra to log out a user, this endpoint is used to confirm that logout request.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Accept an OAuth 2.0 Logout Request
     * @param {string} logoutChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminAcceptOAuth2LogoutRequest(logoutChallenge: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulOAuth2RequestResponse>>;
    /**
     * This endpoint creates an identity. Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Create an Identity
     * @param {AdminCreateIdentityBody} [adminCreateIdentityBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateIdentity(adminCreateIdentityBody?: AdminCreateIdentityBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Identity>>;
    /**
     * This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Generate a New JSON Web Key
     * @param {string} set The JSON Web Key Set
     * @param {AdminCreateJsonWebKeySetBody} adminCreateJsonWebKeySetBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateJsonWebKeySet(set: string, adminCreateJsonWebKeySetBody: AdminCreateJsonWebKeySetBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonWebKeySet>>;
    /**
     * Create a new OAuth 2.0 client. If you pass `client_secret` the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Create an OAuth 2.0 Client
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateOAuth2Client(oAuth2Client: OAuth2Client, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2Client>>;
    /**
     * This endpoint creates a recovery code which should be given to the user in order for them to recover (or activate) their account.
     * @summary Create a Recovery Link
     * @param {AdminCreateSelfServiceRecoveryCodeBody} [adminCreateSelfServiceRecoveryCodeBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateSelfServiceRecoveryCode(adminCreateSelfServiceRecoveryCodeBody?: AdminCreateSelfServiceRecoveryCodeBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceRecoveryCode>>;
    /**
     * This endpoint creates a recovery link which should be given to the user in order for them to recover (or activate) their account.
     * @summary Create a Recovery Link
     * @param {AdminCreateSelfServiceRecoveryLinkBody} [adminCreateSelfServiceRecoveryLinkBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateSelfServiceRecoveryLink(adminCreateSelfServiceRecoveryLinkBody?: AdminCreateSelfServiceRecoveryLinkBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceRecoveryLink>>;
    /**
     * Calling this endpoint irrecoverably and permanently deletes the identity given its ID. This action can not be undone. This endpoint returns 204 when the identity was deleted or when the identity was not found, in which case it is assumed that is has been deleted already.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Delete an Identity
     * @param {string} id ID is the identity\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteIdentity(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint is useful for:  To forcefully logout Identity from all devices and sessions
     * @summary Calling this endpoint irrecoverably and permanently deletes and invalidates all sessions that belong to the given Identity.
     * @param {string} id ID is the identity\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteIdentitySessions(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Delete a JSON Web Key
     * @param {string} set The JSON Web Key Set
     * @param {string} kid The JSON Web Key ID (kid)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteJsonWebKey(set: string, kid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Delete a JSON Web Key Set
     * @param {string} set The JSON Web Key Set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteJsonWebKeySet(set: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
     * @summary Deletes an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteOAuth2Client(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint deletes OAuth2 access tokens issued for a client from the database
     * @summary Delete OAuth2 Access Tokens from a Client
     * @param {string} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteOAuth2Token(clientId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
     * @summary Delete a Trusted OAuth2 JWT Bearer Grant Type Issuer
     * @param {string} id The id of the desired grant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteTrustedOAuth2JwtGrantIssuer(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve the session ID from the `/sessions/whoami` endpoint / `toSession` SDK method.
     * @summary Calling this endpoint extends the given session ID. If `session.earliest_possible_extend` is set it will only extend the session after the specified time has passed.
     * @param {string} id ID is the session\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminExtendSession(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>>;
    /**
     * Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Get an Identity
     * @param {string} id ID must be set to the ID of identity you want to get
     * @param {Array<string>} [includeCredential] DeclassifyCredentials will declassify one or more identity\&#39;s credentials  Currently, only &#x60;oidc&#x60; is supported. This will return the initial OAuth 2.0 Access, Refresh and (optionally) OpenID Connect ID Token.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetIdentity(id: string, includeCredential?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Identity>>;
    /**
     * This endpoint returns a singular JSON Web Key. It is identified by the set and the specific key ID (kid).
     * @summary Fetch a JSON Web Key
     * @param {string} set The JSON Web Key Set
     * @param {string} kid The JSON Web Key ID (kid)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetJsonWebKey(set: string, kid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonWebKeySet>>;
    /**
     * This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Retrieve a JSON Web Key Set
     * @param {string} set The JSON Web Key Set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetJsonWebKeySet(set: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonWebKeySet>>;
    /**
     * Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Get an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetOAuth2Client(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2Client>>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.
     * @summary Get OAuth 2.0 Consent Request Information
     * @param {string} consentChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetOAuth2ConsentRequest(consentChallenge: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2ConsentRequest>>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
     * @summary Get an OAuth 2.0 Login Request
     * @param {string} loginChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetOAuth2LoginRequest(loginChallenge: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2LoginRequest>>;
    /**
     * Use this endpoint to fetch a logout request.
     * @summary Get an OAuth 2.0 Logout Request
     * @param {string} logoutChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetOAuth2LogoutRequest(logoutChallenge: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2LogoutRequest>>;
    /**
     * Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
     * @summary Get a Trusted OAuth2 JWT Bearer Grant Type Issuer
     * @param {string} id The id of the desired grant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetTrustedOAuth2JwtGrantIssuer(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrustedOAuth2JwtGrantIssuer>>;
    /**
     * The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting `accessTokenExtra` during the consent flow.  For more information [read this blog post](https://www.oauth.com/oauth2-servers/token-introspection-endpoint/).
     * @summary Introspect OAuth2 Access or Refresh Tokens
     * @param {string} token The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.
     * @param {string} [scope] An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminIntrospectOAuth2Token(token: string, scope?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntrospectedOAuth2Token>>;
    /**
     * Lists all messages by given status and recipient.
     * @summary List Messages
     * @param {number} [perPage] Items per Page  This is the number of items per page.
     * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
     * @param {CourierMessageStatus} [status] Status filters out messages based on status. If no value is provided, it doesn\&#39;t take effect on filter.
     * @param {string} [recipient] Recipient filters out messages based on recipient. If no value is provided, it doesn\&#39;t take effect on filter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListCourierMessages(perPage?: number, page?: number, status?: CourierMessageStatus, recipient?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Message>>>;
    /**
     * Lists all identities. Does not support search at the moment.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary List Identities
     * @param {number} [perPage] Items per Page  This is the number of items per page.
     * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListIdentities(perPage?: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Identity>>>;
    /**
     * This endpoint is useful for:  Listing all sessions that belong to an Identity in an administrative context.
     * @summary This endpoint returns all sessions that belong to the given Identity.
     * @param {string} id ID is the identity\&#39;s ID.
     * @param {number} [perPage] Items per Page  This is the number of items per page.
     * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
     * @param {boolean} [active] Active is a boolean flag that filters out sessions based on the state. If no value is provided, all sessions are returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListIdentitySessions(id: string, perPage?: number, page?: number, active?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Session>>>;
    /**
     * This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients. The `limit` parameter can be used to retrieve more clients, but it has an upper bound at 500 objects. Pagination should be used to retrieve more than 500 objects.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: \'<https://project-slug.projects.oryapis.com/admin/clients?limit={limit}&offset={offset}>; rel=\"{page}\"\', where page is one of the following applicable pages: \'first\', \'next\', \'last\', and \'previous\'. Multiple links can be included in this header, and will be separated by a comma.
     * @summary List OAuth 2.0 Clients
     * @param {number} [pageSize] Items per page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     * @param {string} [pageToken] Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     * @param {string} [clientName] The name of the clients to filter by.
     * @param {string} [owner] The owner of the clients to filter by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListOAuth2Clients(pageSize?: number, pageToken?: string, clientName?: string, owner?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OAuth2Client>>>;
    /**
     * This endpoint lists all subject\'s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.  The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: \'<https://hydra-url/admin/oauth2/auth/sessions/consent?subject={user}&limit={limit}&offset={offset}>; rel=\"{page}\"\', where page is one of the following applicable pages: \'first\', \'next\', \'last\', and \'previous\'. Multiple links can be included in this header, and will be separated by a comma.
     * @summary List OAuth 2.0 Consent Sessions of a Subject
     * @param {string} subject The subject to list the consent sessions for.
     * @param {string} [link] The link header contains pagination links.  For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     * @param {string} [xTotalCount] The total number of clients.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListOAuth2SubjectConsentSessions(subject: string, link?: string, xTotalCount?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PreviousOAuth2ConsentSession>>>;
    /**
     * Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
     * @summary List Trusted OAuth2 JWT Bearer Grant Type Issuers
     * @param {number} [maxItems]
     * @param {number} [defaultItems]
     * @param {string} [issuer] If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned.
     * @param {number} [limit] The maximum amount of policies returned, upper bound is 500 policies
     * @param {number} [offset] The offset from where to start looking.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListTrustedOAuth2JwtGrantIssuers(maxItems?: number, defaultItems?: number, issuer?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TrustedOAuth2JwtGrantIssuer>>>;
    /**
     * Partially updates an Identity\'s field using [JSON Patch](https://jsonpatch.com/)  NOTE: The fields `id`, `stateChangedAt` and `credentials` are not updateable.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Patch an Identity
     * @param {string} id ID must be set to the ID of identity you want to update
     * @param {Array<JsonPatch>} [jsonPatch]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminPatchIdentity(id: string, jsonPatch?: Array<JsonPatch>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Identity>>;
    /**
     * Patch an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Patch an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {Array<JsonPatch>} jsonPatch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminPatchOAuth2Client(id: string, jsonPatch: Array<JsonPatch>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2Client>>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Reject an OAuth 2.0 Consent Request
     * @param {string} consentChallenge
     * @param {RejectOAuth2Request} [rejectOAuth2Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRejectOAuth2ConsentRequest(consentChallenge: string, rejectOAuth2Request?: RejectOAuth2Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulOAuth2RequestResponse>>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has not authenticated and includes a reason why the authentication was denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @summary Reject an OAuth 2.0 Login Request
     * @param {string} loginChallenge
     * @param {RejectOAuth2Request} [rejectOAuth2Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRejectOAuth2LoginRequest(loginChallenge: string, rejectOAuth2Request?: RejectOAuth2Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulOAuth2RequestResponse>>;
    /**
     * When a user or an application requests ORY Hydra to log out a user, this endpoint is used to deny that logout request. No body is required.  The response is empty as the logout provider has to chose what action to perform next.
     * @summary Reject an OAuth 2.0 Logout Request
     * @param {string} logoutChallenge
     * @param {RejectOAuth2Request} [rejectOAuth2Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRejectOAuth2LogoutRequest(logoutChallenge: string, rejectOAuth2Request?: RejectOAuth2Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint revokes a subject\'s granted consent sessions for a specific OAuth 2.0 Client and invalidates all associated OAuth 2.0 Access Tokens.
     * @summary Revokes OAuth 2.0 Consent Sessions of a Subject for a Specific OAuth 2.0 Client
     * @param {string} subject The subject (Subject) whose consent sessions should be deleted.
     * @param {string} [client] If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID
     * @param {boolean} [all] If set to &#x60;true&#x60; deletes all consent sessions by the Subject that have been granted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRevokeOAuth2ConsentSessions(subject: string, client?: string, all?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint invalidates a subject\'s authentication session. After revoking the authentication session, the subject has to re-authenticate at ORY Hydra. This endpoint does not invalidate any tokens and does not work with OpenID Connect Front- or Back-channel logout.
     * @summary Invalidates All OAuth 2.0 Login Sessions of a Certain User
     * @param {string} subject The subject to revoke authentication sessions for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRevokeOAuth2LoginSessions(subject: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
     * @summary Trust an OAuth2 JWT Bearer Grant Type Issuer
     * @param {AdminTrustOAuth2JwtGrantIssuerBody} [adminTrustOAuth2JwtGrantIssuerBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminTrustOAuth2JwtGrantIssuer(adminTrustOAuth2JwtGrantIssuerBody?: AdminTrustOAuth2JwtGrantIssuerBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrustedOAuth2JwtGrantIssuer>>;
    /**
     * This endpoint updates an identity. The full identity payload (except credentials) is expected. This endpoint does not support patching.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Update an Identity
     * @param {string} id ID must be set to the ID of identity you want to update
     * @param {AdminUpdateIdentityBody} [adminUpdateIdentityBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateIdentity(id: string, adminUpdateIdentityBody?: AdminUpdateIdentityBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Identity>>;
    /**
     * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Update a JSON Web Key
     * @param {string} set The JSON Web Key Set
     * @param {string} kid The JSON Web Key ID (kid)
     * @param {JsonWebKey} [jsonWebKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateJsonWebKey(set: string, kid: string, jsonWebKey?: JsonWebKey, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonWebKey>>;
    /**
     * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Update a JSON Web Key Set
     * @param {string} set The JSON Web Key Set
     * @param {JsonWebKeySet} [jsonWebKeySet]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateJsonWebKeySet(set: string, jsonWebKeySet?: JsonWebKeySet, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonWebKeySet>>;
    /**
     * Update an existing OAuth 2.0 Client. If you pass `client_secret` the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Update an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateOAuth2Client(id: string, oAuth2Client: OAuth2Client, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2Client>>;
    /**
     * Creates a new project.
     * @summary Create a Project
     * @param {CreateProjectBody} [createProjectBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProject(createProjectBody?: CreateProjectBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>>;
    /**
     * Create an API token for a project.
     * @summary Create API Token
     * @param {string} project The Project ID or Project slug
     * @param {InlineObject3} [inlineObject3]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProjectApiKey(project: string, inlineObject3?: InlineObject3, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectApiKey>>;
    /**
     * This endpoint initializes a browser-based user logout flow and a URL which can be used to log out the user.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the `/self-service/logout/api` URL directly with the Ory Session Token.  The URL is only valid for the currently signed in user. If no user is signed in, this endpoint returns a 401 error.  When calling this endpoint from a backend, please ensure to properly forward the HTTP cookies.
     * @summary Create a Logout URL for Browsers
     * @param {string} [cookie] HTTP Cookies  If you call this endpoint from a backend, please include the original Cookie header in the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSelfServiceLogoutFlowUrlForBrowsers(cookie?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceLogoutUrl>>;
    /**
     * Deletes an API Token and immediately removes it.
     * @summary Delete API Token
     * @param {string} project The Project ID or Project slug
     * @param {string} tokenId The Token ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProjectApiKey(project: string, tokenId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint returns JSON Web Keys required to verifying OpenID Connect ID Tokens and, if enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like [node-jwks-rsa](https://github.com/auth0/node-jwks-rsa) among others.
     * @summary Discover JSON Web Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    discoverJsonWebKeys(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonWebKeySet>>;
    /**
     * The well known endpoint an be used to retrieve information for OpenID Connect clients. We encourage you to not roll your own OpenID Connect client but to use an OpenID Connect client library instead. You can learn more on this flow at https://openid.net/specs/openid-connect-discovery-1_0.html .  Popular libraries for OpenID Connect clients include oidc-client-js (JavaScript), go-oidc (Golang), and others. For a full list of clients go here: https://openid.net/developers/certified/
     * @summary OpenID Connect Discovery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    discoverOidcConfiguration(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OidcConfiguration>>;
    /**
     * This endpoint behaves like the administrative counterpart (`createOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  Please note that using this endpoint you are not able to choose the `client_secret` nor the `client_id` as those values will be server generated when specifying `token_endpoint_auth_method` as `client_secret_basic` or `client_secret_post`.  The `client_secret` will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somewhere safe.
     * @summary Register an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dynamicClientRegistrationCreateOAuth2Client(oAuth2Client: OAuth2Client, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2Client>>;
    /**
     * This endpoint behaves like the administrative counterpart (`deleteOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Deletes an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dynamicClientRegistrationDeleteOAuth2Client(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint behaves like the administrative counterpart (`getOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Get an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dynamicClientRegistrationGetOAuth2Client(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2Client>>;
    /**
     * This endpoint behaves like the administrative counterpart (`updateOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  If you pass `client_secret` the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Update an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dynamicClientRegistrationUpdateOAuth2Client(id: string, oAuth2Client: OAuth2Client, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2Client>>;
    /**
     * Get a JSON Schema
     * @param {string} id ID must be set to the ID of schema you want to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIdentitySchema(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * This endpoint returns the payload of the ID Token, including the idTokenExtra values, of the provided OAuth 2.0 Access Token.  For more information please [refer to the spec](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).  In the case of authentication error, a WWW-Authenticate header might be set in the response with more information about the error. See [the spec](https://datatracker.ietf.org/doc/html/rfc6750#section-3) for more details about header format.
     * @summary OpenID Connect Userinfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOidcUserInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OidcUserInfo>>;
    /**
     * Get a projects you have access to by its ID.
     * @summary Get a Project
     * @param {string} projectId Project ID  The project\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProject(projectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>>;
    /**
     * This endpoint requires the user to be a member of the project with the role `OWNER` or `DEVELOPER`.
     * @summary Get all members associated with this project.
     * @param {string} projectId Project ID  The project\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectMembers(projectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CloudAccount>>>;
    /**
     * This endpoint returns the error associated with a user-facing self service errors.  This endpoint supports stub values to help you implement the error UI:  `?id=stub:500` - returns a stub 500 (Internal Server Error) error.  More information can be found at [Ory Kratos User User Facing Error Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-facing-errors).
     * @summary Get Self-Service Errors
     * @param {string} id Error is the error\&#39;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceError(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceError>>;
    /**
     * This endpoint returns a login flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/login\', async function (req, res) { const flow = await client.getSelfServiceLoginFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'login\', flow) }) ```  This request may fail due to several reasons. The `error.id` can be one of:  `session_already_available`: The user is already signed in. `self_service_flow_expired`: The flow is expired and you should request a new one.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Get Login Flow
     * @param {string} id The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceLoginFlow(id: string, cookie?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceLoginFlow>>;
    /**
     * This endpoint returns a recovery flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/recovery\', async function (req, res) { const flow = await client.getSelfServiceRecoveryFlow(req.header(\'Cookie\'), req.query[\'flow\'])  res.render(\'recovery\', flow) }) ```  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
     * @summary Get Recovery Flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceRecoveryFlow(id: string, cookie?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceRecoveryFlow>>;
    /**
     * This endpoint returns a registration flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/registration\', async function (req, res) { const flow = await client.getSelfServiceRegistrationFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'registration\', flow) }) ```  This request may fail due to several reasons. The `error.id` can be one of:  `session_already_available`: The user is already signed in. `self_service_flow_expired`: The flow is expired and you should request a new one.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Get Registration Flow
     * @param {string} id The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceRegistrationFlow(id: string, cookie?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceRegistrationFlow>>;
    /**
     * When accessing this endpoint through Ory Kratos\' Public API you must ensure that either the Ory Kratos Session Cookie or the Ory Kratos Session Token are set.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  You can access this endpoint without credentials when using Ory Kratos\' Admin API.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first. `security_identity_mismatch`: The flow was interrupted with `session_refresh_required` but apparently some other identity logged in instead.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Get Settings Flow
     * @param {string} id ID is the Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
     * @param {string} [xSessionToken] The Session Token  When using the SDK in an app without a browser, please include the session token here.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceSettingsFlow(id: string, xSessionToken?: string, cookie?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceSettingsFlow>>;
    /**
     * This endpoint returns a verification flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/recovery\', async function (req, res) { const flow = await client.getSelfServiceVerificationFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'verification\', flow) })  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Get Verification Flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceVerificationFlow(id: string, cookie?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceVerificationFlow>>;
    /**
     * This endpoint provides JavaScript which is needed in order to perform WebAuthn login and registration.  If you are building a JavaScript Browser App (e.g. in ReactJS or AngularJS) you will need to load this file:  ```html <script src=\"https://public-kratos.example.org/.well-known/ory/webauthn.js\" type=\"script\" async /> ```  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Get WebAuthn JavaScript
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebAuthnJavaScript(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     * This endpoint initializes a browser-based user login flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.login.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url` unless the query parameter `?refresh=true` was set.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `session_aal1_required`: Multi-factor auth (e.g. 2fa) was requested but the user has no session yet. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Initialize Login Flow for Browsers
     * @param {boolean} [refresh] Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session.
     * @param {string} [aal] Request a Specific AuthenticationMethod Assurance Level  Use this parameter to upgrade an existing session\&#39;s authenticator assurance level (AAL). This allows you to ask for multi-factor authentication. When an identity sign in using e.g. username+password, the AAL is 1. If you wish to \&quot;upgrade\&quot; the session\&#39;s security by asking the user to perform TOTP / WebAuth/ ... you would set this to \&quot;aal2\&quot;.
     * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceLoginFlowForBrowsers(refresh?: boolean, aal?: string, returnTo?: string, cookie?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceLoginFlow>>;
    /**
     * This endpoint initiates a login flow for API clients that do not use a browser, such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing login flow call `/self-service/login/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks, including CSRF login attacks.  In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `session_aal1_required`: Multi-factor auth (e.g. 2fa) was requested but the user has no session yet. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Initialize Login Flow for APIs, Services, Apps, ...
     * @param {boolean} [refresh] Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session.
     * @param {string} [aal] Request a Specific AuthenticationMethod Assurance Level  Use this parameter to upgrade an existing session\&#39;s authenticator assurance level (AAL). This allows you to ask for multi-factor authentication. When an identity sign in using e.g. username+password, the AAL is 1. If you wish to \&quot;upgrade\&quot; the session\&#39;s security by asking the user to perform TOTP / WebAuth/ ... you would set this to \&quot;aal2\&quot;.
     * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceLoginFlowWithoutBrowser(refresh?: boolean, aal?: string, xSessionToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceLoginFlow>>;
    /**
     * This endpoint initializes a browser-based account recovery flow. Once initialized, the browser will be redirected to `selfservice.flows.recovery.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists, the browser is returned to the configured return URL.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects or a 400 bad request error if the user is already authenticated.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
     * @summary Initialize Recovery Flow for Browsers
     * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRecoveryFlowForBrowsers(returnTo?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceRecoveryFlow>>;
    /**
     * This endpoint initiates a recovery flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error.  To fetch an existing recovery flow call `/self-service/recovery/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
     * @summary Initialize Recovery Flow for APIs, Services, Apps, ...
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRecoveryFlowWithoutBrowser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceRecoveryFlow>>;
    /**
     * This endpoint initializes a browser-based user registration flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  :::info  This endpoint is EXPERIMENTAL and subject to potential breaking changes in the future.  :::  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.registration.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url`.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!  If this endpoint is called via an AJAX request, the response contains the registration flow without a redirect.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Initialize Registration Flow for Browsers
     * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRegistrationFlowForBrowsers(returnTo?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceRegistrationFlow>>;
    /**
     * This endpoint initiates a registration flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing registration flow call `/self-service/registration/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Initialize Registration Flow for APIs, Services, Apps, ...
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRegistrationFlowWithoutBrowser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceRegistrationFlow>>;
    /**
     * This endpoint initializes a browser-based user settings flow. Once initialized, the browser will be redirected to `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid Ory Kratos Session Cookie is included in the request, a login flow will be initialized.  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid user session was set, the browser will be redirected to the login endpoint.  If this endpoint is called via an AJAX request, the response contains the settings flow without any redirects or a 401 forbidden error if no valid session was set.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor (happens automatically for server-side browser flows) or change the configuration.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Initialize Settings Flow for Browsers
     * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceSettingsFlowForBrowsers(returnTo?: string, cookie?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceSettingsFlow>>;
    /**
     * This endpoint initiates a settings flow for API clients such as mobile devices, smart TVs, and so on. You must provide a valid Ory Kratos Session Token for this endpoint to respond with HTTP 200 OK.  To fetch an existing settings flow call `/self-service/settings/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  In the case of an error, the `error.id` of the JSON response body can be one of:  `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Initialize Settings Flow for APIs, Services, Apps, ...
     * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceSettingsFlowWithoutBrowser(xSessionToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceSettingsFlow>>;
    /**
     * This endpoint initializes a browser-based account verification flow. Once initialized, the browser will be redirected to `selfservice.flows.verification.ui_url` with the flow ID set as the query parameter `?flow=`.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Initialize Verification Flow for Browser Clients
     * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceVerificationFlowForBrowsers(returnTo?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceVerificationFlow>>;
    /**
     * This endpoint initiates a verification flow for API clients such as mobile devices, smart TVs, and so on.  To fetch an existing verification flow call `/self-service/verification/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
     * @summary Initialize Verification Flow for APIs, Services, Apps, ...
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceVerificationFlowWithoutBrowser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceVerificationFlow>>;
    /**
     * Get all Identity Schemas
     * @param {number} [perPage] Items per Page  This is the number of items per page.
     * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listIdentitySchemas(perPage?: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdentitySchemaContainer>>>;
    /**
     * A list of all the project\'s API tokens.
     * @summary List a Project\'s API Tokens
     * @param {string} project The Project ID or Project slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjectApiKeys(project: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProjectApiKey>>>;
    /**
     * Lists all projects you have access to.
     * @summary List All Projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjects(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProjectMetadata>>>;
    /**
     * This endpoint is useful for:  Displaying all other sessions that belong to the logged-in user
     * @summary This endpoints returns all other active sessions that belong to the logged-in user. The current session can be retrieved by calling the `/sessions/whoami` endpoint.
     * @param {string} [xSessionToken] Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
     * @param {string} [cookie] Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
     * @param {number} [perPage] Items per Page  This is the number of items per page.
     * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSessions(xSessionToken?: string, cookie?: string, perPage?: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Session>>>;
    /**
     * Deprecated: Use the `patchProjectWithRevision` endpoint instead to specify the exact revision the patch was generated for.  This endpoints allows you to patch individual Ory Cloud Project configuration keys for Ory\'s services (identity, permission, ...). The configuration format is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the `version` key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to Ory Cloud, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.
     * @summary Patch an Ory Cloud Project Configuration`
     * @param {string} projectId Project ID  The project\&#39;s ID.
     * @param {Array<JsonPatch>} [jsonPatch]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchProject(projectId: string, jsonPatch?: Array<JsonPatch>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulProjectUpdate>>;
    /**
     * This endpoint is not documented here because you should never use your own implementation to perform OAuth2 flows. OAuth2 is a very popular protocol and a library for your programming language will exists.  To learn more about this flow please refer to the specification: https://tools.ietf.org/html/rfc6749
     * @summary The OAuth 2.0 Authorize Endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    performOAuth2AuthorizationFlow(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2ApiError>>;
    /**
     * The client makes a request to the token endpoint by sending the following parameters using the \"application/x-www-form-urlencoded\" HTTP request entity-body.  > Do not implement a client for this endpoint yourself. Use a library. There are many libraries > available for any programming language. You can find a list of libraries here: https://oauth.net/code/ > > Do note that Hydra SDK does not implement this endpoint properly. Use one of the libraries listed above
     * @summary The OAuth 2.0 Token Endpoint
     * @param {string} grantType
     * @param {string} [clientId]
     * @param {string} [code]
     * @param {string} [redirectUri]
     * @param {string} [refreshToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    performOAuth2TokenFlow(grantType: string, clientId?: string, code?: string, redirectUri?: string, refreshToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2TokenResponse>>;
    /**
     * This endpoint initiates and completes user logout at Ory Hydra and initiates OpenID Connect Front- / Back-channel logout:  https://openid.net/specs/openid-connect-frontchannel-1_0.html https://openid.net/specs/openid-connect-backchannel-1_0.html  Back-channel logout is performed asynchronously and does not affect logout flow.
     * @summary OpenID Connect Front- or Back-channel Enabled Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    performOidcFrontOrBackChannelLogout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * !! Use with extreme caution !!  Using this API endpoint you can purge (completely delete) a project and its data. This action can not be undone and will delete ALL your data.  !! Use with extreme caution !!
     * @summary Irrecoverably Purge a Project
     * @param {string} projectId Project ID  The project\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purgeProject(projectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint requires the user to be a member of the project with the role `OWNER`.
     * @summary Remove a member associated with this project. This also sets their invite status to `REMOVED`.
     * @param {string} projectId Project ID  The project\&#39;s ID.
     * @param {string} memberId Member ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeProjectMember(projectId: string, memberId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
     * @summary Revoke an OAuth2 Access or Refresh Token
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeOAuth2Token(token: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint is useful for:  To forcefully logout the current user from another device or session
     * @summary Calling this endpoint invalidates the specified session. The current session cannot be revoked. Session data are not deleted.
     * @param {string} id ID is the session\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeSession(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint is useful for:  To forcefully logout the current user from all other devices and sessions
     * @summary Calling this endpoint invalidates all except the current session that belong to the logged-in user. Session data are not deleted.
     * @param {string} [xSessionToken] Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
     * @param {string} [cookie] Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeSessions(xSessionToken?: string, cookie?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RevokedSessions>>;
    /**
     * :::info  This endpoint is EXPERIMENTAL and subject to potential breaking changes in the future.  :::  Use this endpoint to complete a login flow. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and responds with HTTP 200 and a application/json body with the session token on success; HTTP 410 if the original flow expired with the appropriate error messages set and optionally a `use_flow_id` parameter in the body; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of `application/x-www-form-urlencoded` or `application/json` to be sent in the body and respond with a HTTP 303 redirect to the post/after login URL or the `return_to` value if it was set and if the login succeeded; a HTTP 303 redirect to the login UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of `application/json` will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  If this endpoint is called with `Accept: application/json` in the header, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration! `browser_location_change_required`: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Submit a Login Flow
     * @param {string} flow The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
     * @param {SubmitSelfServiceLoginFlowBody} submitSelfServiceLoginFlowBody
     * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceLoginFlow(flow: string, submitSelfServiceLoginFlowBody: SubmitSelfServiceLoginFlowBody, xSessionToken?: string, cookie?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulSelfServiceLoginWithoutBrowser>>;
    /**
     * This endpoint logs out an identity in a self-service manner.  If the `Accept` HTTP header is not set to `application/json`, the browser will be redirected (HTTP 303 See Other) to the `return_to` parameter of the initial request or fall back to `urls.default_return_to`.  If the `Accept` HTTP header is set to `application/json`, a 204 No Content response will be sent on successful logout instead.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the `/self-service/logout/api` URL directly with the Ory Session Token.  More information can be found at [Ory Kratos User Logout Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-logout).
     * @summary Complete Self-Service Logout
     * @param {string} [token] A Valid Logout Token  If you do not have a logout token because you only have a session cookie, call &#x60;/self-service/logout/browser&#x60; to generate a URL for this endpoint.
     * @param {string} [returnTo] The URL to return to after the logout was completed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceLogoutFlow(token?: string, returnTo?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Use this endpoint to log out an identity using an Ory Session Token. If the Ory Session Token was successfully revoked, the server returns a 204 No Content response. A 204 No Content response is also sent when the Ory Session Token has been revoked already before.  If the Ory Session Token is malformed or does not exist a 403 Forbidden response will be returned.  This endpoint does not remove any HTTP Cookies - use the Browser-Based Self-Service Logout Flow instead.
     * @summary Perform Logout for APIs, Services, Apps, ...
     * @param {SubmitSelfServiceLogoutFlowWithoutBrowserBody} submitSelfServiceLogoutFlowWithoutBrowserBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceLogoutFlowWithoutBrowser(submitSelfServiceLogoutFlowWithoutBrowserBody: SubmitSelfServiceLogoutFlowWithoutBrowserBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Use this endpoint to complete a recovery flow. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header `Accept: application/json` it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid. and a HTTP 303 See Other redirect with a fresh recovery flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header `Accept` or with `Accept: text/_*` it returns a HTTP 303 See Other redirect to the Recovery UI URL with the Recovery Flow ID appended. `sent_email` is the success state after `choose_method` for the `link` method and allows the user to request another recovery email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a recovery link\") does not have any API capabilities. The server responds with a HTTP 303 See Other redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Recover UI URL with a new Recovery Flow ID which contains an error message that the recovery link was invalid.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
     * @summary Complete Recovery Flow
     * @param {string} flow The Recovery Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
     * @param {SubmitSelfServiceRecoveryFlowBody} submitSelfServiceRecoveryFlowBody
     * @param {string} [token] Recovery Token  The recovery token which completes the recovery request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceRecoveryFlow(flow: string, submitSelfServiceRecoveryFlowBody: SubmitSelfServiceRecoveryFlowBody, token?: string, cookie?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceRecoveryFlow>>;
    /**
     * Use this endpoint to complete a registration flow by sending an identity\'s traits and password. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and respond with HTTP 200 and a application/json body with the created identity success - if the session hook is configured the `session` and `session_token` will also be included; HTTP 410 if the original flow expired with the appropriate error messages set and optionally a `use_flow_id` parameter in the body; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of `application/x-www-form-urlencoded` or `application/json` to be sent in the body and respond with a HTTP 303 redirect to the post/after registration URL or the `return_to` value if it was set and if the registration succeeded; a HTTP 303 redirect to the registration UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of `application/json` will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  If this endpoint is called with `Accept: application/json` in the header, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration! `browser_location_change_required`: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Submit a Registration Flow
     * @param {string} flow The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
     * @param {SubmitSelfServiceRegistrationFlowBody} submitSelfServiceRegistrationFlowBody
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceRegistrationFlow(flow: string, submitSelfServiceRegistrationFlowBody: SubmitSelfServiceRegistrationFlowBody, cookie?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulSelfServiceRegistrationWithoutBrowser>>;
    /**
     * Use this endpoint to complete a settings flow by sending an identity\'s updated password. This endpoint behaves differently for API and browser flows.  API-initiated flows expect `application/json` to be sent in the body and respond with HTTP 200 and an application/json body with the session token on success; HTTP 303 redirect to a fresh settings flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors. HTTP 401 when the endpoint is called without a valid session token. HTTP 403 when `selfservice.flows.settings.privileged_session_max_age` was reached or the session\'s AAL is too low. Implies that the user needs to re-authenticate.  Browser flows without HTTP Header `Accept` or with `Accept: text/_*` respond with a HTTP 303 redirect to the post/after settings URL or the `return_to` value if it was set and if the flow succeeded; a HTTP 303 redirect to the Settings UI URL with the flow ID containing the validation errors otherwise. a HTTP 303 redirect to the login endpoint when `selfservice.flows.settings.privileged_session_max_age` was reached or the session\'s AAL is too low.  Browser flows with HTTP Header `Accept: application/json` respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 401 when the endpoint is called without a valid session cookie. HTTP 403 when the page is accessed without a session cookie or the session\'s AAL is too low. HTTP 400 on form validation errors.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor (happens automatically for server-side browser flows) or change the configuration.  If this endpoint is called with a `Accept: application/json` HTTP header, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_refresh_required`: The identity requested to change something that needs a privileged session. Redirect the identity to the login init endpoint with query parameters `?refresh=true&return_to=<the-current-browser-url>`, or initiate a refresh login flow otherwise. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first. `security_identity_mismatch`: The flow was interrupted with `session_refresh_required` but apparently some other identity logged in instead. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration! `browser_location_change_required`: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Complete Settings Flow
     * @param {string} flow The Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
     * @param {SubmitSelfServiceSettingsFlowBody} submitSelfServiceSettingsFlowBody
     * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceSettingsFlow(flow: string, submitSelfServiceSettingsFlowBody: SubmitSelfServiceSettingsFlowBody, xSessionToken?: string, cookie?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceSettingsFlow>>;
    /**
     * Use this endpoint to complete a verification flow. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header `Accept: application/json` it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 303 See Other redirect with a fresh verification flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header `Accept` or with `Accept: text/_*` it returns a HTTP 303 See Other redirect to the Verification UI URL with the Verification Flow ID appended. `sent_email` is the success state after `choose_method` when using the `link` method and allows the user to request another verification email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a verification link\") does not have any API capabilities. The server responds with a HTTP 303 See Other redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Verification UI URL with a new Verification Flow ID which contains an error message that the verification link was invalid.  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Complete Verification Flow
     * @param {string} flow The Verification Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
     * @param {SubmitSelfServiceVerificationFlowBody} submitSelfServiceVerificationFlowBody
     * @param {string} [token] Verification Token  The verification token which completes the verification request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceVerificationFlow(flow: string, submitSelfServiceVerificationFlowBody: SubmitSelfServiceVerificationFlowBody, token?: string, cookie?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfServiceVerificationFlow>>;
    /**
     * Uses the HTTP Headers in the GET request to determine (e.g. by using checking the cookies) who is authenticated. Returns a session object in the body or 401 if the credentials are invalid or no credentials were sent. Additionally when the request it successful it adds the user ID to the \'X-Kratos-Authenticated-Identity-Id\' header in the response.  If you call this endpoint from a server-side application, you must forward the HTTP Cookie Header to this endpoint:  ```js pseudo-code example router.get(\'/protected-endpoint\', async function (req, res) { const session = await client.toSession(undefined, req.header(\'cookie\'))  console.log(session) }) ```  When calling this endpoint from a non-browser application (e.g. mobile app) you must include the session token:  ```js pseudo-code example ... const session = await client.toSession(\"the-session-token\")  console.log(session) ```  Depending on your configuration this endpoint might return a 403 status code if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  This endpoint is useful for:  AJAX calls. Remember to send credentials and set up CORS correctly! Reverse proxies and API Gateways Server-side calls - use the `X-Session-Token` header!  # This endpoint authenticates users by checking  if the `Cookie` HTTP header was set containing an Ory Kratos Session Cookie; if the `Authorization: bearer <ory-session-token>` HTTP header was set with a valid Ory Kratos Session Token; if the `X-Session-Token` HTTP header was set with a valid Ory Kratos Session Token.  If none of these headers are set or the cooke or token are invalid, the endpoint returns a HTTP 401 status code.  As explained above, this request may fail due to several reasons. The `error.id` can be one of:  `session_inactive`: No active session was found in the request (e.g. no Ory Session Cookie / Ory Session Token). `session_aal2_required`: An active session was found but it does not fulfil the Authenticator Assurance Level, implying that the session must (e.g.) authenticate the second factor.
     * @summary Check Who the Current HTTP Session Belongs To
     * @param {string} [xSessionToken] Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
     * @param {string} [cookie] Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    toSession(xSessionToken?: string, cookie?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>>;
    /**
     * This endpoints allows you to update the Ory Cloud Project configuration for individual services (identity, permission, ...). The configuration is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the `version` key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to Ory Cloud, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.  Be aware that updating any service\'s configuration will completely override your current configuration for that service!
     * @summary Update an Ory Cloud Project Configuration
     * @param {string} projectId Project ID  The project\&#39;s ID.
     * @param {UpdateProject} [updateProject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProject(projectId: string, updateProject?: UpdateProject, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulProjectUpdate>>;
};
/**
 * V0alpha2Api - factory interface
 * @export
 */
export declare const V0alpha2ApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Accept an OAuth 2.0 Consent Request
     * @param {string} consentChallenge
     * @param {AcceptOAuth2ConsentRequest} [acceptOAuth2ConsentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminAcceptOAuth2ConsentRequest(consentChallenge: string, acceptOAuth2ConsentRequest?: AcceptOAuth2ConsentRequest, options?: any): AxiosPromise<SuccessfulOAuth2RequestResponse>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell Ory Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has successfully authenticated and includes additional information such as the subject\'s ID and if ORY Hydra should remember the subject\'s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @summary Accept an OAuth 2.0 Login Request
     * @param {string} loginChallenge
     * @param {AcceptOAuth2LoginRequest} [acceptOAuth2LoginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminAcceptOAuth2LoginRequest(loginChallenge: string, acceptOAuth2LoginRequest?: AcceptOAuth2LoginRequest, options?: any): AxiosPromise<SuccessfulOAuth2RequestResponse>;
    /**
     * When a user or an application requests ORY Hydra to log out a user, this endpoint is used to confirm that logout request.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Accept an OAuth 2.0 Logout Request
     * @param {string} logoutChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminAcceptOAuth2LogoutRequest(logoutChallenge: string, options?: any): AxiosPromise<SuccessfulOAuth2RequestResponse>;
    /**
     * This endpoint creates an identity. Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Create an Identity
     * @param {AdminCreateIdentityBody} [adminCreateIdentityBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateIdentity(adminCreateIdentityBody?: AdminCreateIdentityBody, options?: any): AxiosPromise<Identity>;
    /**
     * This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Generate a New JSON Web Key
     * @param {string} set The JSON Web Key Set
     * @param {AdminCreateJsonWebKeySetBody} adminCreateJsonWebKeySetBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateJsonWebKeySet(set: string, adminCreateJsonWebKeySetBody: AdminCreateJsonWebKeySetBody, options?: any): AxiosPromise<JsonWebKeySet>;
    /**
     * Create a new OAuth 2.0 client. If you pass `client_secret` the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Create an OAuth 2.0 Client
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateOAuth2Client(oAuth2Client: OAuth2Client, options?: any): AxiosPromise<OAuth2Client>;
    /**
     * This endpoint creates a recovery code which should be given to the user in order for them to recover (or activate) their account.
     * @summary Create a Recovery Link
     * @param {AdminCreateSelfServiceRecoveryCodeBody} [adminCreateSelfServiceRecoveryCodeBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateSelfServiceRecoveryCode(adminCreateSelfServiceRecoveryCodeBody?: AdminCreateSelfServiceRecoveryCodeBody, options?: any): AxiosPromise<SelfServiceRecoveryCode>;
    /**
     * This endpoint creates a recovery link which should be given to the user in order for them to recover (or activate) their account.
     * @summary Create a Recovery Link
     * @param {AdminCreateSelfServiceRecoveryLinkBody} [adminCreateSelfServiceRecoveryLinkBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateSelfServiceRecoveryLink(adminCreateSelfServiceRecoveryLinkBody?: AdminCreateSelfServiceRecoveryLinkBody, options?: any): AxiosPromise<SelfServiceRecoveryLink>;
    /**
     * Calling this endpoint irrecoverably and permanently deletes the identity given its ID. This action can not be undone. This endpoint returns 204 when the identity was deleted or when the identity was not found, in which case it is assumed that is has been deleted already.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Delete an Identity
     * @param {string} id ID is the identity\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteIdentity(id: string, options?: any): AxiosPromise<void>;
    /**
     * This endpoint is useful for:  To forcefully logout Identity from all devices and sessions
     * @summary Calling this endpoint irrecoverably and permanently deletes and invalidates all sessions that belong to the given Identity.
     * @param {string} id ID is the identity\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteIdentitySessions(id: string, options?: any): AxiosPromise<void>;
    /**
     * Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Delete a JSON Web Key
     * @param {string} set The JSON Web Key Set
     * @param {string} kid The JSON Web Key ID (kid)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteJsonWebKey(set: string, kid: string, options?: any): AxiosPromise<void>;
    /**
     * Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Delete a JSON Web Key Set
     * @param {string} set The JSON Web Key Set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteJsonWebKeySet(set: string, options?: any): AxiosPromise<void>;
    /**
     * Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
     * @summary Deletes an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteOAuth2Client(id: string, options?: any): AxiosPromise<void>;
    /**
     * This endpoint deletes OAuth2 access tokens issued for a client from the database
     * @summary Delete OAuth2 Access Tokens from a Client
     * @param {string} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteOAuth2Token(clientId: string, options?: any): AxiosPromise<void>;
    /**
     * Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
     * @summary Delete a Trusted OAuth2 JWT Bearer Grant Type Issuer
     * @param {string} id The id of the desired grant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteTrustedOAuth2JwtGrantIssuer(id: string, options?: any): AxiosPromise<void>;
    /**
     * Retrieve the session ID from the `/sessions/whoami` endpoint / `toSession` SDK method.
     * @summary Calling this endpoint extends the given session ID. If `session.earliest_possible_extend` is set it will only extend the session after the specified time has passed.
     * @param {string} id ID is the session\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminExtendSession(id: string, options?: any): AxiosPromise<Session>;
    /**
     * Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Get an Identity
     * @param {string} id ID must be set to the ID of identity you want to get
     * @param {Array<string>} [includeCredential] DeclassifyCredentials will declassify one or more identity\&#39;s credentials  Currently, only &#x60;oidc&#x60; is supported. This will return the initial OAuth 2.0 Access, Refresh and (optionally) OpenID Connect ID Token.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetIdentity(id: string, includeCredential?: Array<string>, options?: any): AxiosPromise<Identity>;
    /**
     * This endpoint returns a singular JSON Web Key. It is identified by the set and the specific key ID (kid).
     * @summary Fetch a JSON Web Key
     * @param {string} set The JSON Web Key Set
     * @param {string} kid The JSON Web Key ID (kid)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetJsonWebKey(set: string, kid: string, options?: any): AxiosPromise<JsonWebKeySet>;
    /**
     * This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Retrieve a JSON Web Key Set
     * @param {string} set The JSON Web Key Set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetJsonWebKeySet(set: string, options?: any): AxiosPromise<JsonWebKeySet>;
    /**
     * Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Get an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetOAuth2Client(id: string, options?: any): AxiosPromise<OAuth2Client>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.
     * @summary Get OAuth 2.0 Consent Request Information
     * @param {string} consentChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetOAuth2ConsentRequest(consentChallenge: string, options?: any): AxiosPromise<OAuth2ConsentRequest>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
     * @summary Get an OAuth 2.0 Login Request
     * @param {string} loginChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetOAuth2LoginRequest(loginChallenge: string, options?: any): AxiosPromise<OAuth2LoginRequest>;
    /**
     * Use this endpoint to fetch a logout request.
     * @summary Get an OAuth 2.0 Logout Request
     * @param {string} logoutChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetOAuth2LogoutRequest(logoutChallenge: string, options?: any): AxiosPromise<OAuth2LogoutRequest>;
    /**
     * Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
     * @summary Get a Trusted OAuth2 JWT Bearer Grant Type Issuer
     * @param {string} id The id of the desired grant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetTrustedOAuth2JwtGrantIssuer(id: string, options?: any): AxiosPromise<TrustedOAuth2JwtGrantIssuer>;
    /**
     * The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting `accessTokenExtra` during the consent flow.  For more information [read this blog post](https://www.oauth.com/oauth2-servers/token-introspection-endpoint/).
     * @summary Introspect OAuth2 Access or Refresh Tokens
     * @param {string} token The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.
     * @param {string} [scope] An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminIntrospectOAuth2Token(token: string, scope?: string, options?: any): AxiosPromise<IntrospectedOAuth2Token>;
    /**
     * Lists all messages by given status and recipient.
     * @summary List Messages
     * @param {number} [perPage] Items per Page  This is the number of items per page.
     * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
     * @param {CourierMessageStatus} [status] Status filters out messages based on status. If no value is provided, it doesn\&#39;t take effect on filter.
     * @param {string} [recipient] Recipient filters out messages based on recipient. If no value is provided, it doesn\&#39;t take effect on filter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListCourierMessages(perPage?: number, page?: number, status?: CourierMessageStatus, recipient?: string, options?: any): AxiosPromise<Array<Message>>;
    /**
     * Lists all identities. Does not support search at the moment.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary List Identities
     * @param {number} [perPage] Items per Page  This is the number of items per page.
     * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListIdentities(perPage?: number, page?: number, options?: any): AxiosPromise<Array<Identity>>;
    /**
     * This endpoint is useful for:  Listing all sessions that belong to an Identity in an administrative context.
     * @summary This endpoint returns all sessions that belong to the given Identity.
     * @param {string} id ID is the identity\&#39;s ID.
     * @param {number} [perPage] Items per Page  This is the number of items per page.
     * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
     * @param {boolean} [active] Active is a boolean flag that filters out sessions based on the state. If no value is provided, all sessions are returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListIdentitySessions(id: string, perPage?: number, page?: number, active?: boolean, options?: any): AxiosPromise<Array<Session>>;
    /**
     * This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients. The `limit` parameter can be used to retrieve more clients, but it has an upper bound at 500 objects. Pagination should be used to retrieve more than 500 objects.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: \'<https://project-slug.projects.oryapis.com/admin/clients?limit={limit}&offset={offset}>; rel=\"{page}\"\', where page is one of the following applicable pages: \'first\', \'next\', \'last\', and \'previous\'. Multiple links can be included in this header, and will be separated by a comma.
     * @summary List OAuth 2.0 Clients
     * @param {number} [pageSize] Items per page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     * @param {string} [pageToken] Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     * @param {string} [clientName] The name of the clients to filter by.
     * @param {string} [owner] The owner of the clients to filter by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListOAuth2Clients(pageSize?: number, pageToken?: string, clientName?: string, owner?: string, options?: any): AxiosPromise<Array<OAuth2Client>>;
    /**
     * This endpoint lists all subject\'s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.  The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: \'<https://hydra-url/admin/oauth2/auth/sessions/consent?subject={user}&limit={limit}&offset={offset}>; rel=\"{page}\"\', where page is one of the following applicable pages: \'first\', \'next\', \'last\', and \'previous\'. Multiple links can be included in this header, and will be separated by a comma.
     * @summary List OAuth 2.0 Consent Sessions of a Subject
     * @param {string} subject The subject to list the consent sessions for.
     * @param {string} [link] The link header contains pagination links.  For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     * @param {string} [xTotalCount] The total number of clients.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListOAuth2SubjectConsentSessions(subject: string, link?: string, xTotalCount?: string, options?: any): AxiosPromise<Array<PreviousOAuth2ConsentSession>>;
    /**
     * Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
     * @summary List Trusted OAuth2 JWT Bearer Grant Type Issuers
     * @param {number} [maxItems]
     * @param {number} [defaultItems]
     * @param {string} [issuer] If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned.
     * @param {number} [limit] The maximum amount of policies returned, upper bound is 500 policies
     * @param {number} [offset] The offset from where to start looking.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListTrustedOAuth2JwtGrantIssuers(maxItems?: number, defaultItems?: number, issuer?: string, limit?: number, offset?: number, options?: any): AxiosPromise<Array<TrustedOAuth2JwtGrantIssuer>>;
    /**
     * Partially updates an Identity\'s field using [JSON Patch](https://jsonpatch.com/)  NOTE: The fields `id`, `stateChangedAt` and `credentials` are not updateable.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Patch an Identity
     * @param {string} id ID must be set to the ID of identity you want to update
     * @param {Array<JsonPatch>} [jsonPatch]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminPatchIdentity(id: string, jsonPatch?: Array<JsonPatch>, options?: any): AxiosPromise<Identity>;
    /**
     * Patch an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Patch an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {Array<JsonPatch>} jsonPatch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminPatchOAuth2Client(id: string, jsonPatch: Array<JsonPatch>, options?: any): AxiosPromise<OAuth2Client>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Reject an OAuth 2.0 Consent Request
     * @param {string} consentChallenge
     * @param {RejectOAuth2Request} [rejectOAuth2Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRejectOAuth2ConsentRequest(consentChallenge: string, rejectOAuth2Request?: RejectOAuth2Request, options?: any): AxiosPromise<SuccessfulOAuth2RequestResponse>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has not authenticated and includes a reason why the authentication was denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @summary Reject an OAuth 2.0 Login Request
     * @param {string} loginChallenge
     * @param {RejectOAuth2Request} [rejectOAuth2Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRejectOAuth2LoginRequest(loginChallenge: string, rejectOAuth2Request?: RejectOAuth2Request, options?: any): AxiosPromise<SuccessfulOAuth2RequestResponse>;
    /**
     * When a user or an application requests ORY Hydra to log out a user, this endpoint is used to deny that logout request. No body is required.  The response is empty as the logout provider has to chose what action to perform next.
     * @summary Reject an OAuth 2.0 Logout Request
     * @param {string} logoutChallenge
     * @param {RejectOAuth2Request} [rejectOAuth2Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRejectOAuth2LogoutRequest(logoutChallenge: string, rejectOAuth2Request?: RejectOAuth2Request, options?: any): AxiosPromise<void>;
    /**
     * This endpoint revokes a subject\'s granted consent sessions for a specific OAuth 2.0 Client and invalidates all associated OAuth 2.0 Access Tokens.
     * @summary Revokes OAuth 2.0 Consent Sessions of a Subject for a Specific OAuth 2.0 Client
     * @param {string} subject The subject (Subject) whose consent sessions should be deleted.
     * @param {string} [client] If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID
     * @param {boolean} [all] If set to &#x60;true&#x60; deletes all consent sessions by the Subject that have been granted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRevokeOAuth2ConsentSessions(subject: string, client?: string, all?: boolean, options?: any): AxiosPromise<void>;
    /**
     * This endpoint invalidates a subject\'s authentication session. After revoking the authentication session, the subject has to re-authenticate at ORY Hydra. This endpoint does not invalidate any tokens and does not work with OpenID Connect Front- or Back-channel logout.
     * @summary Invalidates All OAuth 2.0 Login Sessions of a Certain User
     * @param {string} subject The subject to revoke authentication sessions for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminRevokeOAuth2LoginSessions(subject: string, options?: any): AxiosPromise<void>;
    /**
     * Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
     * @summary Trust an OAuth2 JWT Bearer Grant Type Issuer
     * @param {AdminTrustOAuth2JwtGrantIssuerBody} [adminTrustOAuth2JwtGrantIssuerBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminTrustOAuth2JwtGrantIssuer(adminTrustOAuth2JwtGrantIssuerBody?: AdminTrustOAuth2JwtGrantIssuerBody, options?: any): AxiosPromise<TrustedOAuth2JwtGrantIssuer>;
    /**
     * This endpoint updates an identity. The full identity payload (except credentials) is expected. This endpoint does not support patching.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Update an Identity
     * @param {string} id ID must be set to the ID of identity you want to update
     * @param {AdminUpdateIdentityBody} [adminUpdateIdentityBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateIdentity(id: string, adminUpdateIdentityBody?: AdminUpdateIdentityBody, options?: any): AxiosPromise<Identity>;
    /**
     * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Update a JSON Web Key
     * @param {string} set The JSON Web Key Set
     * @param {string} kid The JSON Web Key ID (kid)
     * @param {JsonWebKey} [jsonWebKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateJsonWebKey(set: string, kid: string, jsonWebKey?: JsonWebKey, options?: any): AxiosPromise<JsonWebKey>;
    /**
     * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Update a JSON Web Key Set
     * @param {string} set The JSON Web Key Set
     * @param {JsonWebKeySet} [jsonWebKeySet]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateJsonWebKeySet(set: string, jsonWebKeySet?: JsonWebKeySet, options?: any): AxiosPromise<JsonWebKeySet>;
    /**
     * Update an existing OAuth 2.0 Client. If you pass `client_secret` the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Update an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateOAuth2Client(id: string, oAuth2Client: OAuth2Client, options?: any): AxiosPromise<OAuth2Client>;
    /**
     * Creates a new project.
     * @summary Create a Project
     * @param {CreateProjectBody} [createProjectBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProject(createProjectBody?: CreateProjectBody, options?: any): AxiosPromise<Project>;
    /**
     * Create an API token for a project.
     * @summary Create API Token
     * @param {string} project The Project ID or Project slug
     * @param {InlineObject3} [inlineObject3]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProjectApiKey(project: string, inlineObject3?: InlineObject3, options?: any): AxiosPromise<ProjectApiKey>;
    /**
     * This endpoint initializes a browser-based user logout flow and a URL which can be used to log out the user.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the `/self-service/logout/api` URL directly with the Ory Session Token.  The URL is only valid for the currently signed in user. If no user is signed in, this endpoint returns a 401 error.  When calling this endpoint from a backend, please ensure to properly forward the HTTP cookies.
     * @summary Create a Logout URL for Browsers
     * @param {string} [cookie] HTTP Cookies  If you call this endpoint from a backend, please include the original Cookie header in the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSelfServiceLogoutFlowUrlForBrowsers(cookie?: string, options?: any): AxiosPromise<SelfServiceLogoutUrl>;
    /**
     * Deletes an API Token and immediately removes it.
     * @summary Delete API Token
     * @param {string} project The Project ID or Project slug
     * @param {string} tokenId The Token ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProjectApiKey(project: string, tokenId: string, options?: any): AxiosPromise<void>;
    /**
     * This endpoint returns JSON Web Keys required to verifying OpenID Connect ID Tokens and, if enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like [node-jwks-rsa](https://github.com/auth0/node-jwks-rsa) among others.
     * @summary Discover JSON Web Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    discoverJsonWebKeys(options?: any): AxiosPromise<JsonWebKeySet>;
    /**
     * The well known endpoint an be used to retrieve information for OpenID Connect clients. We encourage you to not roll your own OpenID Connect client but to use an OpenID Connect client library instead. You can learn more on this flow at https://openid.net/specs/openid-connect-discovery-1_0.html .  Popular libraries for OpenID Connect clients include oidc-client-js (JavaScript), go-oidc (Golang), and others. For a full list of clients go here: https://openid.net/developers/certified/
     * @summary OpenID Connect Discovery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    discoverOidcConfiguration(options?: any): AxiosPromise<OidcConfiguration>;
    /**
     * This endpoint behaves like the administrative counterpart (`createOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  Please note that using this endpoint you are not able to choose the `client_secret` nor the `client_id` as those values will be server generated when specifying `token_endpoint_auth_method` as `client_secret_basic` or `client_secret_post`.  The `client_secret` will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somewhere safe.
     * @summary Register an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dynamicClientRegistrationCreateOAuth2Client(oAuth2Client: OAuth2Client, options?: any): AxiosPromise<OAuth2Client>;
    /**
     * This endpoint behaves like the administrative counterpart (`deleteOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Deletes an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dynamicClientRegistrationDeleteOAuth2Client(id: string, options?: any): AxiosPromise<void>;
    /**
     * This endpoint behaves like the administrative counterpart (`getOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Get an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dynamicClientRegistrationGetOAuth2Client(id: string, options?: any): AxiosPromise<OAuth2Client>;
    /**
     * This endpoint behaves like the administrative counterpart (`updateOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  If you pass `client_secret` the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Update an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dynamicClientRegistrationUpdateOAuth2Client(id: string, oAuth2Client: OAuth2Client, options?: any): AxiosPromise<OAuth2Client>;
    /**
     * Get a JSON Schema
     * @param {string} id ID must be set to the ID of schema you want to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIdentitySchema(id: string, options?: any): AxiosPromise<object>;
    /**
     * This endpoint returns the payload of the ID Token, including the idTokenExtra values, of the provided OAuth 2.0 Access Token.  For more information please [refer to the spec](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).  In the case of authentication error, a WWW-Authenticate header might be set in the response with more information about the error. See [the spec](https://datatracker.ietf.org/doc/html/rfc6750#section-3) for more details about header format.
     * @summary OpenID Connect Userinfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOidcUserInfo(options?: any): AxiosPromise<OidcUserInfo>;
    /**
     * Get a projects you have access to by its ID.
     * @summary Get a Project
     * @param {string} projectId Project ID  The project\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProject(projectId: string, options?: any): AxiosPromise<Project>;
    /**
     * This endpoint requires the user to be a member of the project with the role `OWNER` or `DEVELOPER`.
     * @summary Get all members associated with this project.
     * @param {string} projectId Project ID  The project\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectMembers(projectId: string, options?: any): AxiosPromise<Array<CloudAccount>>;
    /**
     * This endpoint returns the error associated with a user-facing self service errors.  This endpoint supports stub values to help you implement the error UI:  `?id=stub:500` - returns a stub 500 (Internal Server Error) error.  More information can be found at [Ory Kratos User User Facing Error Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-facing-errors).
     * @summary Get Self-Service Errors
     * @param {string} id Error is the error\&#39;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceError(id: string, options?: any): AxiosPromise<SelfServiceError>;
    /**
     * This endpoint returns a login flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/login\', async function (req, res) { const flow = await client.getSelfServiceLoginFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'login\', flow) }) ```  This request may fail due to several reasons. The `error.id` can be one of:  `session_already_available`: The user is already signed in. `self_service_flow_expired`: The flow is expired and you should request a new one.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Get Login Flow
     * @param {string} id The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceLoginFlow(id: string, cookie?: string, options?: any): AxiosPromise<SelfServiceLoginFlow>;
    /**
     * This endpoint returns a recovery flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/recovery\', async function (req, res) { const flow = await client.getSelfServiceRecoveryFlow(req.header(\'Cookie\'), req.query[\'flow\'])  res.render(\'recovery\', flow) }) ```  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
     * @summary Get Recovery Flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceRecoveryFlow(id: string, cookie?: string, options?: any): AxiosPromise<SelfServiceRecoveryFlow>;
    /**
     * This endpoint returns a registration flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/registration\', async function (req, res) { const flow = await client.getSelfServiceRegistrationFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'registration\', flow) }) ```  This request may fail due to several reasons. The `error.id` can be one of:  `session_already_available`: The user is already signed in. `self_service_flow_expired`: The flow is expired and you should request a new one.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Get Registration Flow
     * @param {string} id The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceRegistrationFlow(id: string, cookie?: string, options?: any): AxiosPromise<SelfServiceRegistrationFlow>;
    /**
     * When accessing this endpoint through Ory Kratos\' Public API you must ensure that either the Ory Kratos Session Cookie or the Ory Kratos Session Token are set.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  You can access this endpoint without credentials when using Ory Kratos\' Admin API.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first. `security_identity_mismatch`: The flow was interrupted with `session_refresh_required` but apparently some other identity logged in instead.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Get Settings Flow
     * @param {string} id ID is the Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
     * @param {string} [xSessionToken] The Session Token  When using the SDK in an app without a browser, please include the session token here.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceSettingsFlow(id: string, xSessionToken?: string, cookie?: string, options?: any): AxiosPromise<SelfServiceSettingsFlow>;
    /**
     * This endpoint returns a verification flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/recovery\', async function (req, res) { const flow = await client.getSelfServiceVerificationFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'verification\', flow) })  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Get Verification Flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfServiceVerificationFlow(id: string, cookie?: string, options?: any): AxiosPromise<SelfServiceVerificationFlow>;
    /**
     * This endpoint provides JavaScript which is needed in order to perform WebAuthn login and registration.  If you are building a JavaScript Browser App (e.g. in ReactJS or AngularJS) you will need to load this file:  ```html <script src=\"https://public-kratos.example.org/.well-known/ory/webauthn.js\" type=\"script\" async /> ```  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Get WebAuthn JavaScript
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebAuthnJavaScript(options?: any): AxiosPromise<string>;
    /**
     * This endpoint initializes a browser-based user login flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.login.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url` unless the query parameter `?refresh=true` was set.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `session_aal1_required`: Multi-factor auth (e.g. 2fa) was requested but the user has no session yet. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Initialize Login Flow for Browsers
     * @param {boolean} [refresh] Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session.
     * @param {string} [aal] Request a Specific AuthenticationMethod Assurance Level  Use this parameter to upgrade an existing session\&#39;s authenticator assurance level (AAL). This allows you to ask for multi-factor authentication. When an identity sign in using e.g. username+password, the AAL is 1. If you wish to \&quot;upgrade\&quot; the session\&#39;s security by asking the user to perform TOTP / WebAuth/ ... you would set this to \&quot;aal2\&quot;.
     * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceLoginFlowForBrowsers(refresh?: boolean, aal?: string, returnTo?: string, cookie?: string, options?: any): AxiosPromise<SelfServiceLoginFlow>;
    /**
     * This endpoint initiates a login flow for API clients that do not use a browser, such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing login flow call `/self-service/login/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks, including CSRF login attacks.  In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `session_aal1_required`: Multi-factor auth (e.g. 2fa) was requested but the user has no session yet. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Initialize Login Flow for APIs, Services, Apps, ...
     * @param {boolean} [refresh] Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session.
     * @param {string} [aal] Request a Specific AuthenticationMethod Assurance Level  Use this parameter to upgrade an existing session\&#39;s authenticator assurance level (AAL). This allows you to ask for multi-factor authentication. When an identity sign in using e.g. username+password, the AAL is 1. If you wish to \&quot;upgrade\&quot; the session\&#39;s security by asking the user to perform TOTP / WebAuth/ ... you would set this to \&quot;aal2\&quot;.
     * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceLoginFlowWithoutBrowser(refresh?: boolean, aal?: string, xSessionToken?: string, options?: any): AxiosPromise<SelfServiceLoginFlow>;
    /**
     * This endpoint initializes a browser-based account recovery flow. Once initialized, the browser will be redirected to `selfservice.flows.recovery.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists, the browser is returned to the configured return URL.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects or a 400 bad request error if the user is already authenticated.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
     * @summary Initialize Recovery Flow for Browsers
     * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRecoveryFlowForBrowsers(returnTo?: string, options?: any): AxiosPromise<SelfServiceRecoveryFlow>;
    /**
     * This endpoint initiates a recovery flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error.  To fetch an existing recovery flow call `/self-service/recovery/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
     * @summary Initialize Recovery Flow for APIs, Services, Apps, ...
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRecoveryFlowWithoutBrowser(options?: any): AxiosPromise<SelfServiceRecoveryFlow>;
    /**
     * This endpoint initializes a browser-based user registration flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  :::info  This endpoint is EXPERIMENTAL and subject to potential breaking changes in the future.  :::  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.registration.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url`.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!  If this endpoint is called via an AJAX request, the response contains the registration flow without a redirect.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Initialize Registration Flow for Browsers
     * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRegistrationFlowForBrowsers(returnTo?: string, options?: any): AxiosPromise<SelfServiceRegistrationFlow>;
    /**
     * This endpoint initiates a registration flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing registration flow call `/self-service/registration/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Initialize Registration Flow for APIs, Services, Apps, ...
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceRegistrationFlowWithoutBrowser(options?: any): AxiosPromise<SelfServiceRegistrationFlow>;
    /**
     * This endpoint initializes a browser-based user settings flow. Once initialized, the browser will be redirected to `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid Ory Kratos Session Cookie is included in the request, a login flow will be initialized.  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid user session was set, the browser will be redirected to the login endpoint.  If this endpoint is called via an AJAX request, the response contains the settings flow without any redirects or a 401 forbidden error if no valid session was set.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor (happens automatically for server-side browser flows) or change the configuration.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Initialize Settings Flow for Browsers
     * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceSettingsFlowForBrowsers(returnTo?: string, cookie?: string, options?: any): AxiosPromise<SelfServiceSettingsFlow>;
    /**
     * This endpoint initiates a settings flow for API clients such as mobile devices, smart TVs, and so on. You must provide a valid Ory Kratos Session Token for this endpoint to respond with HTTP 200 OK.  To fetch an existing settings flow call `/self-service/settings/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  In the case of an error, the `error.id` of the JSON response body can be one of:  `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Initialize Settings Flow for APIs, Services, Apps, ...
     * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceSettingsFlowWithoutBrowser(xSessionToken?: string, options?: any): AxiosPromise<SelfServiceSettingsFlow>;
    /**
     * This endpoint initializes a browser-based account verification flow. Once initialized, the browser will be redirected to `selfservice.flows.verification.ui_url` with the flow ID set as the query parameter `?flow=`.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Initialize Verification Flow for Browser Clients
     * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceVerificationFlowForBrowsers(returnTo?: string, options?: any): AxiosPromise<SelfServiceVerificationFlow>;
    /**
     * This endpoint initiates a verification flow for API clients such as mobile devices, smart TVs, and so on.  To fetch an existing verification flow call `/self-service/verification/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
     * @summary Initialize Verification Flow for APIs, Services, Apps, ...
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initializeSelfServiceVerificationFlowWithoutBrowser(options?: any): AxiosPromise<SelfServiceVerificationFlow>;
    /**
     * Get all Identity Schemas
     * @param {number} [perPage] Items per Page  This is the number of items per page.
     * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listIdentitySchemas(perPage?: number, page?: number, options?: any): AxiosPromise<Array<IdentitySchemaContainer>>;
    /**
     * A list of all the project\'s API tokens.
     * @summary List a Project\'s API Tokens
     * @param {string} project The Project ID or Project slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjectApiKeys(project: string, options?: any): AxiosPromise<Array<ProjectApiKey>>;
    /**
     * Lists all projects you have access to.
     * @summary List All Projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjects(options?: any): AxiosPromise<Array<ProjectMetadata>>;
    /**
     * This endpoint is useful for:  Displaying all other sessions that belong to the logged-in user
     * @summary This endpoints returns all other active sessions that belong to the logged-in user. The current session can be retrieved by calling the `/sessions/whoami` endpoint.
     * @param {string} [xSessionToken] Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
     * @param {string} [cookie] Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
     * @param {number} [perPage] Items per Page  This is the number of items per page.
     * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSessions(xSessionToken?: string, cookie?: string, perPage?: number, page?: number, options?: any): AxiosPromise<Array<Session>>;
    /**
     * Deprecated: Use the `patchProjectWithRevision` endpoint instead to specify the exact revision the patch was generated for.  This endpoints allows you to patch individual Ory Cloud Project configuration keys for Ory\'s services (identity, permission, ...). The configuration format is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the `version` key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to Ory Cloud, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.
     * @summary Patch an Ory Cloud Project Configuration`
     * @param {string} projectId Project ID  The project\&#39;s ID.
     * @param {Array<JsonPatch>} [jsonPatch]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchProject(projectId: string, jsonPatch?: Array<JsonPatch>, options?: any): AxiosPromise<SuccessfulProjectUpdate>;
    /**
     * This endpoint is not documented here because you should never use your own implementation to perform OAuth2 flows. OAuth2 is a very popular protocol and a library for your programming language will exists.  To learn more about this flow please refer to the specification: https://tools.ietf.org/html/rfc6749
     * @summary The OAuth 2.0 Authorize Endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    performOAuth2AuthorizationFlow(options?: any): AxiosPromise<OAuth2ApiError>;
    /**
     * The client makes a request to the token endpoint by sending the following parameters using the \"application/x-www-form-urlencoded\" HTTP request entity-body.  > Do not implement a client for this endpoint yourself. Use a library. There are many libraries > available for any programming language. You can find a list of libraries here: https://oauth.net/code/ > > Do note that Hydra SDK does not implement this endpoint properly. Use one of the libraries listed above
     * @summary The OAuth 2.0 Token Endpoint
     * @param {string} grantType
     * @param {string} [clientId]
     * @param {string} [code]
     * @param {string} [redirectUri]
     * @param {string} [refreshToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    performOAuth2TokenFlow(grantType: string, clientId?: string, code?: string, redirectUri?: string, refreshToken?: string, options?: any): AxiosPromise<OAuth2TokenResponse>;
    /**
     * This endpoint initiates and completes user logout at Ory Hydra and initiates OpenID Connect Front- / Back-channel logout:  https://openid.net/specs/openid-connect-frontchannel-1_0.html https://openid.net/specs/openid-connect-backchannel-1_0.html  Back-channel logout is performed asynchronously and does not affect logout flow.
     * @summary OpenID Connect Front- or Back-channel Enabled Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    performOidcFrontOrBackChannelLogout(options?: any): AxiosPromise<void>;
    /**
     * !! Use with extreme caution !!  Using this API endpoint you can purge (completely delete) a project and its data. This action can not be undone and will delete ALL your data.  !! Use with extreme caution !!
     * @summary Irrecoverably Purge a Project
     * @param {string} projectId Project ID  The project\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purgeProject(projectId: string, options?: any): AxiosPromise<void>;
    /**
     * This endpoint requires the user to be a member of the project with the role `OWNER`.
     * @summary Remove a member associated with this project. This also sets their invite status to `REMOVED`.
     * @param {string} projectId Project ID  The project\&#39;s ID.
     * @param {string} memberId Member ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeProjectMember(projectId: string, memberId: string, options?: any): AxiosPromise<void>;
    /**
     * Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
     * @summary Revoke an OAuth2 Access or Refresh Token
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeOAuth2Token(token: string, options?: any): AxiosPromise<void>;
    /**
     * This endpoint is useful for:  To forcefully logout the current user from another device or session
     * @summary Calling this endpoint invalidates the specified session. The current session cannot be revoked. Session data are not deleted.
     * @param {string} id ID is the session\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeSession(id: string, options?: any): AxiosPromise<void>;
    /**
     * This endpoint is useful for:  To forcefully logout the current user from all other devices and sessions
     * @summary Calling this endpoint invalidates all except the current session that belong to the logged-in user. Session data are not deleted.
     * @param {string} [xSessionToken] Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
     * @param {string} [cookie] Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeSessions(xSessionToken?: string, cookie?: string, options?: any): AxiosPromise<RevokedSessions>;
    /**
     * :::info  This endpoint is EXPERIMENTAL and subject to potential breaking changes in the future.  :::  Use this endpoint to complete a login flow. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and responds with HTTP 200 and a application/json body with the session token on success; HTTP 410 if the original flow expired with the appropriate error messages set and optionally a `use_flow_id` parameter in the body; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of `application/x-www-form-urlencoded` or `application/json` to be sent in the body and respond with a HTTP 303 redirect to the post/after login URL or the `return_to` value if it was set and if the login succeeded; a HTTP 303 redirect to the login UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of `application/json` will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  If this endpoint is called with `Accept: application/json` in the header, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration! `browser_location_change_required`: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Submit a Login Flow
     * @param {string} flow The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
     * @param {SubmitSelfServiceLoginFlowBody} submitSelfServiceLoginFlowBody
     * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceLoginFlow(flow: string, submitSelfServiceLoginFlowBody: SubmitSelfServiceLoginFlowBody, xSessionToken?: string, cookie?: string, options?: any): AxiosPromise<SuccessfulSelfServiceLoginWithoutBrowser>;
    /**
     * This endpoint logs out an identity in a self-service manner.  If the `Accept` HTTP header is not set to `application/json`, the browser will be redirected (HTTP 303 See Other) to the `return_to` parameter of the initial request or fall back to `urls.default_return_to`.  If the `Accept` HTTP header is set to `application/json`, a 204 No Content response will be sent on successful logout instead.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the `/self-service/logout/api` URL directly with the Ory Session Token.  More information can be found at [Ory Kratos User Logout Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-logout).
     * @summary Complete Self-Service Logout
     * @param {string} [token] A Valid Logout Token  If you do not have a logout token because you only have a session cookie, call &#x60;/self-service/logout/browser&#x60; to generate a URL for this endpoint.
     * @param {string} [returnTo] The URL to return to after the logout was completed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceLogoutFlow(token?: string, returnTo?: string, options?: any): AxiosPromise<void>;
    /**
     * Use this endpoint to log out an identity using an Ory Session Token. If the Ory Session Token was successfully revoked, the server returns a 204 No Content response. A 204 No Content response is also sent when the Ory Session Token has been revoked already before.  If the Ory Session Token is malformed or does not exist a 403 Forbidden response will be returned.  This endpoint does not remove any HTTP Cookies - use the Browser-Based Self-Service Logout Flow instead.
     * @summary Perform Logout for APIs, Services, Apps, ...
     * @param {SubmitSelfServiceLogoutFlowWithoutBrowserBody} submitSelfServiceLogoutFlowWithoutBrowserBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceLogoutFlowWithoutBrowser(submitSelfServiceLogoutFlowWithoutBrowserBody: SubmitSelfServiceLogoutFlowWithoutBrowserBody, options?: any): AxiosPromise<void>;
    /**
     * Use this endpoint to complete a recovery flow. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header `Accept: application/json` it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid. and a HTTP 303 See Other redirect with a fresh recovery flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header `Accept` or with `Accept: text/_*` it returns a HTTP 303 See Other redirect to the Recovery UI URL with the Recovery Flow ID appended. `sent_email` is the success state after `choose_method` for the `link` method and allows the user to request another recovery email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a recovery link\") does not have any API capabilities. The server responds with a HTTP 303 See Other redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Recover UI URL with a new Recovery Flow ID which contains an error message that the recovery link was invalid.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
     * @summary Complete Recovery Flow
     * @param {string} flow The Recovery Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
     * @param {SubmitSelfServiceRecoveryFlowBody} submitSelfServiceRecoveryFlowBody
     * @param {string} [token] Recovery Token  The recovery token which completes the recovery request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceRecoveryFlow(flow: string, submitSelfServiceRecoveryFlowBody: SubmitSelfServiceRecoveryFlowBody, token?: string, cookie?: string, options?: any): AxiosPromise<SelfServiceRecoveryFlow>;
    /**
     * Use this endpoint to complete a registration flow by sending an identity\'s traits and password. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and respond with HTTP 200 and a application/json body with the created identity success - if the session hook is configured the `session` and `session_token` will also be included; HTTP 410 if the original flow expired with the appropriate error messages set and optionally a `use_flow_id` parameter in the body; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of `application/x-www-form-urlencoded` or `application/json` to be sent in the body and respond with a HTTP 303 redirect to the post/after registration URL or the `return_to` value if it was set and if the registration succeeded; a HTTP 303 redirect to the registration UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of `application/json` will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  If this endpoint is called with `Accept: application/json` in the header, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration! `browser_location_change_required`: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Submit a Registration Flow
     * @param {string} flow The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
     * @param {SubmitSelfServiceRegistrationFlowBody} submitSelfServiceRegistrationFlowBody
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceRegistrationFlow(flow: string, submitSelfServiceRegistrationFlowBody: SubmitSelfServiceRegistrationFlowBody, cookie?: string, options?: any): AxiosPromise<SuccessfulSelfServiceRegistrationWithoutBrowser>;
    /**
     * Use this endpoint to complete a settings flow by sending an identity\'s updated password. This endpoint behaves differently for API and browser flows.  API-initiated flows expect `application/json` to be sent in the body and respond with HTTP 200 and an application/json body with the session token on success; HTTP 303 redirect to a fresh settings flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors. HTTP 401 when the endpoint is called without a valid session token. HTTP 403 when `selfservice.flows.settings.privileged_session_max_age` was reached or the session\'s AAL is too low. Implies that the user needs to re-authenticate.  Browser flows without HTTP Header `Accept` or with `Accept: text/_*` respond with a HTTP 303 redirect to the post/after settings URL or the `return_to` value if it was set and if the flow succeeded; a HTTP 303 redirect to the Settings UI URL with the flow ID containing the validation errors otherwise. a HTTP 303 redirect to the login endpoint when `selfservice.flows.settings.privileged_session_max_age` was reached or the session\'s AAL is too low.  Browser flows with HTTP Header `Accept: application/json` respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 401 when the endpoint is called without a valid session cookie. HTTP 403 when the page is accessed without a session cookie or the session\'s AAL is too low. HTTP 400 on form validation errors.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor (happens automatically for server-side browser flows) or change the configuration.  If this endpoint is called with a `Accept: application/json` HTTP header, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_refresh_required`: The identity requested to change something that needs a privileged session. Redirect the identity to the login init endpoint with query parameters `?refresh=true&return_to=<the-current-browser-url>`, or initiate a refresh login flow otherwise. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first. `security_identity_mismatch`: The flow was interrupted with `session_refresh_required` but apparently some other identity logged in instead. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration! `browser_location_change_required`: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Complete Settings Flow
     * @param {string} flow The Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
     * @param {SubmitSelfServiceSettingsFlowBody} submitSelfServiceSettingsFlowBody
     * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceSettingsFlow(flow: string, submitSelfServiceSettingsFlowBody: SubmitSelfServiceSettingsFlowBody, xSessionToken?: string, cookie?: string, options?: any): AxiosPromise<SelfServiceSettingsFlow>;
    /**
     * Use this endpoint to complete a verification flow. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header `Accept: application/json` it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 303 See Other redirect with a fresh verification flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header `Accept` or with `Accept: text/_*` it returns a HTTP 303 See Other redirect to the Verification UI URL with the Verification Flow ID appended. `sent_email` is the success state after `choose_method` when using the `link` method and allows the user to request another verification email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a verification link\") does not have any API capabilities. The server responds with a HTTP 303 See Other redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Verification UI URL with a new Verification Flow ID which contains an error message that the verification link was invalid.  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Complete Verification Flow
     * @param {string} flow The Verification Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
     * @param {SubmitSelfServiceVerificationFlowBody} submitSelfServiceVerificationFlowBody
     * @param {string} [token] Verification Token  The verification token which completes the verification request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitSelfServiceVerificationFlow(flow: string, submitSelfServiceVerificationFlowBody: SubmitSelfServiceVerificationFlowBody, token?: string, cookie?: string, options?: any): AxiosPromise<SelfServiceVerificationFlow>;
    /**
     * Uses the HTTP Headers in the GET request to determine (e.g. by using checking the cookies) who is authenticated. Returns a session object in the body or 401 if the credentials are invalid or no credentials were sent. Additionally when the request it successful it adds the user ID to the \'X-Kratos-Authenticated-Identity-Id\' header in the response.  If you call this endpoint from a server-side application, you must forward the HTTP Cookie Header to this endpoint:  ```js pseudo-code example router.get(\'/protected-endpoint\', async function (req, res) { const session = await client.toSession(undefined, req.header(\'cookie\'))  console.log(session) }) ```  When calling this endpoint from a non-browser application (e.g. mobile app) you must include the session token:  ```js pseudo-code example ... const session = await client.toSession(\"the-session-token\")  console.log(session) ```  Depending on your configuration this endpoint might return a 403 status code if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  This endpoint is useful for:  AJAX calls. Remember to send credentials and set up CORS correctly! Reverse proxies and API Gateways Server-side calls - use the `X-Session-Token` header!  # This endpoint authenticates users by checking  if the `Cookie` HTTP header was set containing an Ory Kratos Session Cookie; if the `Authorization: bearer <ory-session-token>` HTTP header was set with a valid Ory Kratos Session Token; if the `X-Session-Token` HTTP header was set with a valid Ory Kratos Session Token.  If none of these headers are set or the cooke or token are invalid, the endpoint returns a HTTP 401 status code.  As explained above, this request may fail due to several reasons. The `error.id` can be one of:  `session_inactive`: No active session was found in the request (e.g. no Ory Session Cookie / Ory Session Token). `session_aal2_required`: An active session was found but it does not fulfil the Authenticator Assurance Level, implying that the session must (e.g.) authenticate the second factor.
     * @summary Check Who the Current HTTP Session Belongs To
     * @param {string} [xSessionToken] Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
     * @param {string} [cookie] Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    toSession(xSessionToken?: string, cookie?: string, options?: any): AxiosPromise<Session>;
    /**
     * This endpoints allows you to update the Ory Cloud Project configuration for individual services (identity, permission, ...). The configuration is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the `version` key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to Ory Cloud, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.  Be aware that updating any service\'s configuration will completely override your current configuration for that service!
     * @summary Update an Ory Cloud Project Configuration
     * @param {string} projectId Project ID  The project\&#39;s ID.
     * @param {UpdateProject} [updateProject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProject(projectId: string, updateProject?: UpdateProject, options?: any): AxiosPromise<SuccessfulProjectUpdate>;
};
/**
 * V0alpha2Api - interface
 * @export
 * @interface V0alpha2Api
 */
export interface V0alpha2ApiInterface {
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Accept an OAuth 2.0 Consent Request
     * @param {string} consentChallenge
     * @param {AcceptOAuth2ConsentRequest} [acceptOAuth2ConsentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminAcceptOAuth2ConsentRequest(consentChallenge: string, acceptOAuth2ConsentRequest?: AcceptOAuth2ConsentRequest, options?: AxiosRequestConfig): AxiosPromise<SuccessfulOAuth2RequestResponse>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell Ory Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has successfully authenticated and includes additional information such as the subject\'s ID and if ORY Hydra should remember the subject\'s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @summary Accept an OAuth 2.0 Login Request
     * @param {string} loginChallenge
     * @param {AcceptOAuth2LoginRequest} [acceptOAuth2LoginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminAcceptOAuth2LoginRequest(loginChallenge: string, acceptOAuth2LoginRequest?: AcceptOAuth2LoginRequest, options?: AxiosRequestConfig): AxiosPromise<SuccessfulOAuth2RequestResponse>;
    /**
     * When a user or an application requests ORY Hydra to log out a user, this endpoint is used to confirm that logout request.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Accept an OAuth 2.0 Logout Request
     * @param {string} logoutChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminAcceptOAuth2LogoutRequest(logoutChallenge: string, options?: AxiosRequestConfig): AxiosPromise<SuccessfulOAuth2RequestResponse>;
    /**
     * This endpoint creates an identity. Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Create an Identity
     * @param {AdminCreateIdentityBody} [adminCreateIdentityBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminCreateIdentity(adminCreateIdentityBody?: AdminCreateIdentityBody, options?: AxiosRequestConfig): AxiosPromise<Identity>;
    /**
     * This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Generate a New JSON Web Key
     * @param {string} set The JSON Web Key Set
     * @param {AdminCreateJsonWebKeySetBody} adminCreateJsonWebKeySetBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminCreateJsonWebKeySet(set: string, adminCreateJsonWebKeySetBody: AdminCreateJsonWebKeySetBody, options?: AxiosRequestConfig): AxiosPromise<JsonWebKeySet>;
    /**
     * Create a new OAuth 2.0 client. If you pass `client_secret` the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Create an OAuth 2.0 Client
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminCreateOAuth2Client(oAuth2Client: OAuth2Client, options?: AxiosRequestConfig): AxiosPromise<OAuth2Client>;
    /**
     * This endpoint creates a recovery code which should be given to the user in order for them to recover (or activate) their account.
     * @summary Create a Recovery Link
     * @param {AdminCreateSelfServiceRecoveryCodeBody} [adminCreateSelfServiceRecoveryCodeBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminCreateSelfServiceRecoveryCode(adminCreateSelfServiceRecoveryCodeBody?: AdminCreateSelfServiceRecoveryCodeBody, options?: AxiosRequestConfig): AxiosPromise<SelfServiceRecoveryCode>;
    /**
     * This endpoint creates a recovery link which should be given to the user in order for them to recover (or activate) their account.
     * @summary Create a Recovery Link
     * @param {AdminCreateSelfServiceRecoveryLinkBody} [adminCreateSelfServiceRecoveryLinkBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminCreateSelfServiceRecoveryLink(adminCreateSelfServiceRecoveryLinkBody?: AdminCreateSelfServiceRecoveryLinkBody, options?: AxiosRequestConfig): AxiosPromise<SelfServiceRecoveryLink>;
    /**
     * Calling this endpoint irrecoverably and permanently deletes the identity given its ID. This action can not be undone. This endpoint returns 204 when the identity was deleted or when the identity was not found, in which case it is assumed that is has been deleted already.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Delete an Identity
     * @param {string} id ID is the identity\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminDeleteIdentity(id: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * This endpoint is useful for:  To forcefully logout Identity from all devices and sessions
     * @summary Calling this endpoint irrecoverably and permanently deletes and invalidates all sessions that belong to the given Identity.
     * @param {string} id ID is the identity\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminDeleteIdentitySessions(id: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Delete a JSON Web Key
     * @param {string} set The JSON Web Key Set
     * @param {string} kid The JSON Web Key ID (kid)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminDeleteJsonWebKey(set: string, kid: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Delete a JSON Web Key Set
     * @param {string} set The JSON Web Key Set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminDeleteJsonWebKeySet(set: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
     * @summary Deletes an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminDeleteOAuth2Client(id: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * This endpoint deletes OAuth2 access tokens issued for a client from the database
     * @summary Delete OAuth2 Access Tokens from a Client
     * @param {string} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminDeleteOAuth2Token(clientId: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
     * @summary Delete a Trusted OAuth2 JWT Bearer Grant Type Issuer
     * @param {string} id The id of the desired grant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminDeleteTrustedOAuth2JwtGrantIssuer(id: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Retrieve the session ID from the `/sessions/whoami` endpoint / `toSession` SDK method.
     * @summary Calling this endpoint extends the given session ID. If `session.earliest_possible_extend` is set it will only extend the session after the specified time has passed.
     * @param {string} id ID is the session\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminExtendSession(id: string, options?: AxiosRequestConfig): AxiosPromise<Session>;
    /**
     * Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Get an Identity
     * @param {string} id ID must be set to the ID of identity you want to get
     * @param {Array<string>} [includeCredential] DeclassifyCredentials will declassify one or more identity\&#39;s credentials  Currently, only &#x60;oidc&#x60; is supported. This will return the initial OAuth 2.0 Access, Refresh and (optionally) OpenID Connect ID Token.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminGetIdentity(id: string, includeCredential?: Array<string>, options?: AxiosRequestConfig): AxiosPromise<Identity>;
    /**
     * This endpoint returns a singular JSON Web Key. It is identified by the set and the specific key ID (kid).
     * @summary Fetch a JSON Web Key
     * @param {string} set The JSON Web Key Set
     * @param {string} kid The JSON Web Key ID (kid)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminGetJsonWebKey(set: string, kid: string, options?: AxiosRequestConfig): AxiosPromise<JsonWebKeySet>;
    /**
     * This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Retrieve a JSON Web Key Set
     * @param {string} set The JSON Web Key Set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminGetJsonWebKeySet(set: string, options?: AxiosRequestConfig): AxiosPromise<JsonWebKeySet>;
    /**
     * Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Get an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminGetOAuth2Client(id: string, options?: AxiosRequestConfig): AxiosPromise<OAuth2Client>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.
     * @summary Get OAuth 2.0 Consent Request Information
     * @param {string} consentChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminGetOAuth2ConsentRequest(consentChallenge: string, options?: AxiosRequestConfig): AxiosPromise<OAuth2ConsentRequest>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
     * @summary Get an OAuth 2.0 Login Request
     * @param {string} loginChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminGetOAuth2LoginRequest(loginChallenge: string, options?: AxiosRequestConfig): AxiosPromise<OAuth2LoginRequest>;
    /**
     * Use this endpoint to fetch a logout request.
     * @summary Get an OAuth 2.0 Logout Request
     * @param {string} logoutChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminGetOAuth2LogoutRequest(logoutChallenge: string, options?: AxiosRequestConfig): AxiosPromise<OAuth2LogoutRequest>;
    /**
     * Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
     * @summary Get a Trusted OAuth2 JWT Bearer Grant Type Issuer
     * @param {string} id The id of the desired grant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminGetTrustedOAuth2JwtGrantIssuer(id: string, options?: AxiosRequestConfig): AxiosPromise<TrustedOAuth2JwtGrantIssuer>;
    /**
     * The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting `accessTokenExtra` during the consent flow.  For more information [read this blog post](https://www.oauth.com/oauth2-servers/token-introspection-endpoint/).
     * @summary Introspect OAuth2 Access or Refresh Tokens
     * @param {string} token The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.
     * @param {string} [scope] An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminIntrospectOAuth2Token(token: string, scope?: string, options?: AxiosRequestConfig): AxiosPromise<IntrospectedOAuth2Token>;
    /**
     * Lists all messages by given status and recipient.
     * @summary List Messages
     * @param {number} [perPage] Items per Page  This is the number of items per page.
     * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
     * @param {CourierMessageStatus} [status] Status filters out messages based on status. If no value is provided, it doesn\&#39;t take effect on filter.
     * @param {string} [recipient] Recipient filters out messages based on recipient. If no value is provided, it doesn\&#39;t take effect on filter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminListCourierMessages(perPage?: number, page?: number, status?: CourierMessageStatus, recipient?: string, options?: AxiosRequestConfig): AxiosPromise<Array<Message>>;
    /**
     * Lists all identities. Does not support search at the moment.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary List Identities
     * @param {number} [perPage] Items per Page  This is the number of items per page.
     * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminListIdentities(perPage?: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<Array<Identity>>;
    /**
     * This endpoint is useful for:  Listing all sessions that belong to an Identity in an administrative context.
     * @summary This endpoint returns all sessions that belong to the given Identity.
     * @param {string} id ID is the identity\&#39;s ID.
     * @param {number} [perPage] Items per Page  This is the number of items per page.
     * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
     * @param {boolean} [active] Active is a boolean flag that filters out sessions based on the state. If no value is provided, all sessions are returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminListIdentitySessions(id: string, perPage?: number, page?: number, active?: boolean, options?: AxiosRequestConfig): AxiosPromise<Array<Session>>;
    /**
     * This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients. The `limit` parameter can be used to retrieve more clients, but it has an upper bound at 500 objects. Pagination should be used to retrieve more than 500 objects.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: \'<https://project-slug.projects.oryapis.com/admin/clients?limit={limit}&offset={offset}>; rel=\"{page}\"\', where page is one of the following applicable pages: \'first\', \'next\', \'last\', and \'previous\'. Multiple links can be included in this header, and will be separated by a comma.
     * @summary List OAuth 2.0 Clients
     * @param {number} [pageSize] Items per page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     * @param {string} [pageToken] Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     * @param {string} [clientName] The name of the clients to filter by.
     * @param {string} [owner] The owner of the clients to filter by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminListOAuth2Clients(pageSize?: number, pageToken?: string, clientName?: string, owner?: string, options?: AxiosRequestConfig): AxiosPromise<Array<OAuth2Client>>;
    /**
     * This endpoint lists all subject\'s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.  The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: \'<https://hydra-url/admin/oauth2/auth/sessions/consent?subject={user}&limit={limit}&offset={offset}>; rel=\"{page}\"\', where page is one of the following applicable pages: \'first\', \'next\', \'last\', and \'previous\'. Multiple links can be included in this header, and will be separated by a comma.
     * @summary List OAuth 2.0 Consent Sessions of a Subject
     * @param {string} subject The subject to list the consent sessions for.
     * @param {string} [link] The link header contains pagination links.  For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     * @param {string} [xTotalCount] The total number of clients.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminListOAuth2SubjectConsentSessions(subject: string, link?: string, xTotalCount?: string, options?: AxiosRequestConfig): AxiosPromise<Array<PreviousOAuth2ConsentSession>>;
    /**
     * Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
     * @summary List Trusted OAuth2 JWT Bearer Grant Type Issuers
     * @param {number} [maxItems]
     * @param {number} [defaultItems]
     * @param {string} [issuer] If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned.
     * @param {number} [limit] The maximum amount of policies returned, upper bound is 500 policies
     * @param {number} [offset] The offset from where to start looking.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminListTrustedOAuth2JwtGrantIssuers(maxItems?: number, defaultItems?: number, issuer?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<Array<TrustedOAuth2JwtGrantIssuer>>;
    /**
     * Partially updates an Identity\'s field using [JSON Patch](https://jsonpatch.com/)  NOTE: The fields `id`, `stateChangedAt` and `credentials` are not updateable.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Patch an Identity
     * @param {string} id ID must be set to the ID of identity you want to update
     * @param {Array<JsonPatch>} [jsonPatch]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminPatchIdentity(id: string, jsonPatch?: Array<JsonPatch>, options?: AxiosRequestConfig): AxiosPromise<Identity>;
    /**
     * Patch an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Patch an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {Array<JsonPatch>} jsonPatch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminPatchOAuth2Client(id: string, jsonPatch: Array<JsonPatch>, options?: AxiosRequestConfig): AxiosPromise<OAuth2Client>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Reject an OAuth 2.0 Consent Request
     * @param {string} consentChallenge
     * @param {RejectOAuth2Request} [rejectOAuth2Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminRejectOAuth2ConsentRequest(consentChallenge: string, rejectOAuth2Request?: RejectOAuth2Request, options?: AxiosRequestConfig): AxiosPromise<SuccessfulOAuth2RequestResponse>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has not authenticated and includes a reason why the authentication was denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @summary Reject an OAuth 2.0 Login Request
     * @param {string} loginChallenge
     * @param {RejectOAuth2Request} [rejectOAuth2Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminRejectOAuth2LoginRequest(loginChallenge: string, rejectOAuth2Request?: RejectOAuth2Request, options?: AxiosRequestConfig): AxiosPromise<SuccessfulOAuth2RequestResponse>;
    /**
     * When a user or an application requests ORY Hydra to log out a user, this endpoint is used to deny that logout request. No body is required.  The response is empty as the logout provider has to chose what action to perform next.
     * @summary Reject an OAuth 2.0 Logout Request
     * @param {string} logoutChallenge
     * @param {RejectOAuth2Request} [rejectOAuth2Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminRejectOAuth2LogoutRequest(logoutChallenge: string, rejectOAuth2Request?: RejectOAuth2Request, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * This endpoint revokes a subject\'s granted consent sessions for a specific OAuth 2.0 Client and invalidates all associated OAuth 2.0 Access Tokens.
     * @summary Revokes OAuth 2.0 Consent Sessions of a Subject for a Specific OAuth 2.0 Client
     * @param {string} subject The subject (Subject) whose consent sessions should be deleted.
     * @param {string} [client] If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID
     * @param {boolean} [all] If set to &#x60;true&#x60; deletes all consent sessions by the Subject that have been granted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminRevokeOAuth2ConsentSessions(subject: string, client?: string, all?: boolean, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * This endpoint invalidates a subject\'s authentication session. After revoking the authentication session, the subject has to re-authenticate at ORY Hydra. This endpoint does not invalidate any tokens and does not work with OpenID Connect Front- or Back-channel logout.
     * @summary Invalidates All OAuth 2.0 Login Sessions of a Certain User
     * @param {string} subject The subject to revoke authentication sessions for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminRevokeOAuth2LoginSessions(subject: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
     * @summary Trust an OAuth2 JWT Bearer Grant Type Issuer
     * @param {AdminTrustOAuth2JwtGrantIssuerBody} [adminTrustOAuth2JwtGrantIssuerBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminTrustOAuth2JwtGrantIssuer(adminTrustOAuth2JwtGrantIssuerBody?: AdminTrustOAuth2JwtGrantIssuerBody, options?: AxiosRequestConfig): AxiosPromise<TrustedOAuth2JwtGrantIssuer>;
    /**
     * This endpoint updates an identity. The full identity payload (except credentials) is expected. This endpoint does not support patching.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Update an Identity
     * @param {string} id ID must be set to the ID of identity you want to update
     * @param {AdminUpdateIdentityBody} [adminUpdateIdentityBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminUpdateIdentity(id: string, adminUpdateIdentityBody?: AdminUpdateIdentityBody, options?: AxiosRequestConfig): AxiosPromise<Identity>;
    /**
     * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Update a JSON Web Key
     * @param {string} set The JSON Web Key Set
     * @param {string} kid The JSON Web Key ID (kid)
     * @param {JsonWebKey} [jsonWebKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminUpdateJsonWebKey(set: string, kid: string, jsonWebKey?: JsonWebKey, options?: AxiosRequestConfig): AxiosPromise<JsonWebKey>;
    /**
     * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Update a JSON Web Key Set
     * @param {string} set The JSON Web Key Set
     * @param {JsonWebKeySet} [jsonWebKeySet]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminUpdateJsonWebKeySet(set: string, jsonWebKeySet?: JsonWebKeySet, options?: AxiosRequestConfig): AxiosPromise<JsonWebKeySet>;
    /**
     * Update an existing OAuth 2.0 Client. If you pass `client_secret` the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Update an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    adminUpdateOAuth2Client(id: string, oAuth2Client: OAuth2Client, options?: AxiosRequestConfig): AxiosPromise<OAuth2Client>;
    /**
     * Creates a new project.
     * @summary Create a Project
     * @param {CreateProjectBody} [createProjectBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    createProject(createProjectBody?: CreateProjectBody, options?: AxiosRequestConfig): AxiosPromise<Project>;
    /**
     * Create an API token for a project.
     * @summary Create API Token
     * @param {string} project The Project ID or Project slug
     * @param {InlineObject3} [inlineObject3]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    createProjectApiKey(project: string, inlineObject3?: InlineObject3, options?: AxiosRequestConfig): AxiosPromise<ProjectApiKey>;
    /**
     * This endpoint initializes a browser-based user logout flow and a URL which can be used to log out the user.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the `/self-service/logout/api` URL directly with the Ory Session Token.  The URL is only valid for the currently signed in user. If no user is signed in, this endpoint returns a 401 error.  When calling this endpoint from a backend, please ensure to properly forward the HTTP cookies.
     * @summary Create a Logout URL for Browsers
     * @param {string} [cookie] HTTP Cookies  If you call this endpoint from a backend, please include the original Cookie header in the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    createSelfServiceLogoutFlowUrlForBrowsers(cookie?: string, options?: AxiosRequestConfig): AxiosPromise<SelfServiceLogoutUrl>;
    /**
     * Deletes an API Token and immediately removes it.
     * @summary Delete API Token
     * @param {string} project The Project ID or Project slug
     * @param {string} tokenId The Token ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    deleteProjectApiKey(project: string, tokenId: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * This endpoint returns JSON Web Keys required to verifying OpenID Connect ID Tokens and, if enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like [node-jwks-rsa](https://github.com/auth0/node-jwks-rsa) among others.
     * @summary Discover JSON Web Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    discoverJsonWebKeys(options?: AxiosRequestConfig): AxiosPromise<JsonWebKeySet>;
    /**
     * The well known endpoint an be used to retrieve information for OpenID Connect clients. We encourage you to not roll your own OpenID Connect client but to use an OpenID Connect client library instead. You can learn more on this flow at https://openid.net/specs/openid-connect-discovery-1_0.html .  Popular libraries for OpenID Connect clients include oidc-client-js (JavaScript), go-oidc (Golang), and others. For a full list of clients go here: https://openid.net/developers/certified/
     * @summary OpenID Connect Discovery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    discoverOidcConfiguration(options?: AxiosRequestConfig): AxiosPromise<OidcConfiguration>;
    /**
     * This endpoint behaves like the administrative counterpart (`createOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  Please note that using this endpoint you are not able to choose the `client_secret` nor the `client_id` as those values will be server generated when specifying `token_endpoint_auth_method` as `client_secret_basic` or `client_secret_post`.  The `client_secret` will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somewhere safe.
     * @summary Register an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    dynamicClientRegistrationCreateOAuth2Client(oAuth2Client: OAuth2Client, options?: AxiosRequestConfig): AxiosPromise<OAuth2Client>;
    /**
     * This endpoint behaves like the administrative counterpart (`deleteOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Deletes an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    dynamicClientRegistrationDeleteOAuth2Client(id: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * This endpoint behaves like the administrative counterpart (`getOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Get an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    dynamicClientRegistrationGetOAuth2Client(id: string, options?: AxiosRequestConfig): AxiosPromise<OAuth2Client>;
    /**
     * This endpoint behaves like the administrative counterpart (`updateOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  If you pass `client_secret` the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Update an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    dynamicClientRegistrationUpdateOAuth2Client(id: string, oAuth2Client: OAuth2Client, options?: AxiosRequestConfig): AxiosPromise<OAuth2Client>;
    /**
     * Get a JSON Schema
     * @param {string} id ID must be set to the ID of schema you want to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    getIdentitySchema(id: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * This endpoint returns the payload of the ID Token, including the idTokenExtra values, of the provided OAuth 2.0 Access Token.  For more information please [refer to the spec](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).  In the case of authentication error, a WWW-Authenticate header might be set in the response with more information about the error. See [the spec](https://datatracker.ietf.org/doc/html/rfc6750#section-3) for more details about header format.
     * @summary OpenID Connect Userinfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    getOidcUserInfo(options?: AxiosRequestConfig): AxiosPromise<OidcUserInfo>;
    /**
     * Get a projects you have access to by its ID.
     * @summary Get a Project
     * @param {string} projectId Project ID  The project\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    getProject(projectId: string, options?: AxiosRequestConfig): AxiosPromise<Project>;
    /**
     * This endpoint requires the user to be a member of the project with the role `OWNER` or `DEVELOPER`.
     * @summary Get all members associated with this project.
     * @param {string} projectId Project ID  The project\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    getProjectMembers(projectId: string, options?: AxiosRequestConfig): AxiosPromise<Array<CloudAccount>>;
    /**
     * This endpoint returns the error associated with a user-facing self service errors.  This endpoint supports stub values to help you implement the error UI:  `?id=stub:500` - returns a stub 500 (Internal Server Error) error.  More information can be found at [Ory Kratos User User Facing Error Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-facing-errors).
     * @summary Get Self-Service Errors
     * @param {string} id Error is the error\&#39;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    getSelfServiceError(id: string, options?: AxiosRequestConfig): AxiosPromise<SelfServiceError>;
    /**
     * This endpoint returns a login flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/login\', async function (req, res) { const flow = await client.getSelfServiceLoginFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'login\', flow) }) ```  This request may fail due to several reasons. The `error.id` can be one of:  `session_already_available`: The user is already signed in. `self_service_flow_expired`: The flow is expired and you should request a new one.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Get Login Flow
     * @param {string} id The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    getSelfServiceLoginFlow(id: string, cookie?: string, options?: AxiosRequestConfig): AxiosPromise<SelfServiceLoginFlow>;
    /**
     * This endpoint returns a recovery flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/recovery\', async function (req, res) { const flow = await client.getSelfServiceRecoveryFlow(req.header(\'Cookie\'), req.query[\'flow\'])  res.render(\'recovery\', flow) }) ```  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
     * @summary Get Recovery Flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    getSelfServiceRecoveryFlow(id: string, cookie?: string, options?: AxiosRequestConfig): AxiosPromise<SelfServiceRecoveryFlow>;
    /**
     * This endpoint returns a registration flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/registration\', async function (req, res) { const flow = await client.getSelfServiceRegistrationFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'registration\', flow) }) ```  This request may fail due to several reasons. The `error.id` can be one of:  `session_already_available`: The user is already signed in. `self_service_flow_expired`: The flow is expired and you should request a new one.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Get Registration Flow
     * @param {string} id The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    getSelfServiceRegistrationFlow(id: string, cookie?: string, options?: AxiosRequestConfig): AxiosPromise<SelfServiceRegistrationFlow>;
    /**
     * When accessing this endpoint through Ory Kratos\' Public API you must ensure that either the Ory Kratos Session Cookie or the Ory Kratos Session Token are set.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  You can access this endpoint without credentials when using Ory Kratos\' Admin API.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first. `security_identity_mismatch`: The flow was interrupted with `session_refresh_required` but apparently some other identity logged in instead.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Get Settings Flow
     * @param {string} id ID is the Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
     * @param {string} [xSessionToken] The Session Token  When using the SDK in an app without a browser, please include the session token here.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    getSelfServiceSettingsFlow(id: string, xSessionToken?: string, cookie?: string, options?: AxiosRequestConfig): AxiosPromise<SelfServiceSettingsFlow>;
    /**
     * This endpoint returns a verification flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/recovery\', async function (req, res) { const flow = await client.getSelfServiceVerificationFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'verification\', flow) })  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Get Verification Flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    getSelfServiceVerificationFlow(id: string, cookie?: string, options?: AxiosRequestConfig): AxiosPromise<SelfServiceVerificationFlow>;
    /**
     * This endpoint provides JavaScript which is needed in order to perform WebAuthn login and registration.  If you are building a JavaScript Browser App (e.g. in ReactJS or AngularJS) you will need to load this file:  ```html <script src=\"https://public-kratos.example.org/.well-known/ory/webauthn.js\" type=\"script\" async /> ```  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Get WebAuthn JavaScript
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    getWebAuthnJavaScript(options?: AxiosRequestConfig): AxiosPromise<string>;
    /**
     * This endpoint initializes a browser-based user login flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.login.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url` unless the query parameter `?refresh=true` was set.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `session_aal1_required`: Multi-factor auth (e.g. 2fa) was requested but the user has no session yet. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Initialize Login Flow for Browsers
     * @param {boolean} [refresh] Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session.
     * @param {string} [aal] Request a Specific AuthenticationMethod Assurance Level  Use this parameter to upgrade an existing session\&#39;s authenticator assurance level (AAL). This allows you to ask for multi-factor authentication. When an identity sign in using e.g. username+password, the AAL is 1. If you wish to \&quot;upgrade\&quot; the session\&#39;s security by asking the user to perform TOTP / WebAuth/ ... you would set this to \&quot;aal2\&quot;.
     * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    initializeSelfServiceLoginFlowForBrowsers(refresh?: boolean, aal?: string, returnTo?: string, cookie?: string, options?: AxiosRequestConfig): AxiosPromise<SelfServiceLoginFlow>;
    /**
     * This endpoint initiates a login flow for API clients that do not use a browser, such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing login flow call `/self-service/login/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks, including CSRF login attacks.  In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `session_aal1_required`: Multi-factor auth (e.g. 2fa) was requested but the user has no session yet. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Initialize Login Flow for APIs, Services, Apps, ...
     * @param {boolean} [refresh] Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session.
     * @param {string} [aal] Request a Specific AuthenticationMethod Assurance Level  Use this parameter to upgrade an existing session\&#39;s authenticator assurance level (AAL). This allows you to ask for multi-factor authentication. When an identity sign in using e.g. username+password, the AAL is 1. If you wish to \&quot;upgrade\&quot; the session\&#39;s security by asking the user to perform TOTP / WebAuth/ ... you would set this to \&quot;aal2\&quot;.
     * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    initializeSelfServiceLoginFlowWithoutBrowser(refresh?: boolean, aal?: string, xSessionToken?: string, options?: AxiosRequestConfig): AxiosPromise<SelfServiceLoginFlow>;
    /**
     * This endpoint initializes a browser-based account recovery flow. Once initialized, the browser will be redirected to `selfservice.flows.recovery.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists, the browser is returned to the configured return URL.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects or a 400 bad request error if the user is already authenticated.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
     * @summary Initialize Recovery Flow for Browsers
     * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    initializeSelfServiceRecoveryFlowForBrowsers(returnTo?: string, options?: AxiosRequestConfig): AxiosPromise<SelfServiceRecoveryFlow>;
    /**
     * This endpoint initiates a recovery flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error.  To fetch an existing recovery flow call `/self-service/recovery/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
     * @summary Initialize Recovery Flow for APIs, Services, Apps, ...
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    initializeSelfServiceRecoveryFlowWithoutBrowser(options?: AxiosRequestConfig): AxiosPromise<SelfServiceRecoveryFlow>;
    /**
     * This endpoint initializes a browser-based user registration flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  :::info  This endpoint is EXPERIMENTAL and subject to potential breaking changes in the future.  :::  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.registration.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url`.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!  If this endpoint is called via an AJAX request, the response contains the registration flow without a redirect.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Initialize Registration Flow for Browsers
     * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    initializeSelfServiceRegistrationFlowForBrowsers(returnTo?: string, options?: AxiosRequestConfig): AxiosPromise<SelfServiceRegistrationFlow>;
    /**
     * This endpoint initiates a registration flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing registration flow call `/self-service/registration/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Initialize Registration Flow for APIs, Services, Apps, ...
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    initializeSelfServiceRegistrationFlowWithoutBrowser(options?: AxiosRequestConfig): AxiosPromise<SelfServiceRegistrationFlow>;
    /**
     * This endpoint initializes a browser-based user settings flow. Once initialized, the browser will be redirected to `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid Ory Kratos Session Cookie is included in the request, a login flow will be initialized.  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid user session was set, the browser will be redirected to the login endpoint.  If this endpoint is called via an AJAX request, the response contains the settings flow without any redirects or a 401 forbidden error if no valid session was set.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor (happens automatically for server-side browser flows) or change the configuration.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Initialize Settings Flow for Browsers
     * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    initializeSelfServiceSettingsFlowForBrowsers(returnTo?: string, cookie?: string, options?: AxiosRequestConfig): AxiosPromise<SelfServiceSettingsFlow>;
    /**
     * This endpoint initiates a settings flow for API clients such as mobile devices, smart TVs, and so on. You must provide a valid Ory Kratos Session Token for this endpoint to respond with HTTP 200 OK.  To fetch an existing settings flow call `/self-service/settings/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  In the case of an error, the `error.id` of the JSON response body can be one of:  `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Initialize Settings Flow for APIs, Services, Apps, ...
     * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    initializeSelfServiceSettingsFlowWithoutBrowser(xSessionToken?: string, options?: AxiosRequestConfig): AxiosPromise<SelfServiceSettingsFlow>;
    /**
     * This endpoint initializes a browser-based account verification flow. Once initialized, the browser will be redirected to `selfservice.flows.verification.ui_url` with the flow ID set as the query parameter `?flow=`.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Initialize Verification Flow for Browser Clients
     * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    initializeSelfServiceVerificationFlowForBrowsers(returnTo?: string, options?: AxiosRequestConfig): AxiosPromise<SelfServiceVerificationFlow>;
    /**
     * This endpoint initiates a verification flow for API clients such as mobile devices, smart TVs, and so on.  To fetch an existing verification flow call `/self-service/verification/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
     * @summary Initialize Verification Flow for APIs, Services, Apps, ...
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    initializeSelfServiceVerificationFlowWithoutBrowser(options?: AxiosRequestConfig): AxiosPromise<SelfServiceVerificationFlow>;
    /**
     * Get all Identity Schemas
     * @param {number} [perPage] Items per Page  This is the number of items per page.
     * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    listIdentitySchemas(perPage?: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<Array<IdentitySchemaContainer>>;
    /**
     * A list of all the project\'s API tokens.
     * @summary List a Project\'s API Tokens
     * @param {string} project The Project ID or Project slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    listProjectApiKeys(project: string, options?: AxiosRequestConfig): AxiosPromise<Array<ProjectApiKey>>;
    /**
     * Lists all projects you have access to.
     * @summary List All Projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    listProjects(options?: AxiosRequestConfig): AxiosPromise<Array<ProjectMetadata>>;
    /**
     * This endpoint is useful for:  Displaying all other sessions that belong to the logged-in user
     * @summary This endpoints returns all other active sessions that belong to the logged-in user. The current session can be retrieved by calling the `/sessions/whoami` endpoint.
     * @param {string} [xSessionToken] Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
     * @param {string} [cookie] Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
     * @param {number} [perPage] Items per Page  This is the number of items per page.
     * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    listSessions(xSessionToken?: string, cookie?: string, perPage?: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<Array<Session>>;
    /**
     * Deprecated: Use the `patchProjectWithRevision` endpoint instead to specify the exact revision the patch was generated for.  This endpoints allows you to patch individual Ory Cloud Project configuration keys for Ory\'s services (identity, permission, ...). The configuration format is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the `version` key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to Ory Cloud, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.
     * @summary Patch an Ory Cloud Project Configuration`
     * @param {string} projectId Project ID  The project\&#39;s ID.
     * @param {Array<JsonPatch>} [jsonPatch]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    patchProject(projectId: string, jsonPatch?: Array<JsonPatch>, options?: AxiosRequestConfig): AxiosPromise<SuccessfulProjectUpdate>;
    /**
     * This endpoint is not documented here because you should never use your own implementation to perform OAuth2 flows. OAuth2 is a very popular protocol and a library for your programming language will exists.  To learn more about this flow please refer to the specification: https://tools.ietf.org/html/rfc6749
     * @summary The OAuth 2.0 Authorize Endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    performOAuth2AuthorizationFlow(options?: AxiosRequestConfig): AxiosPromise<OAuth2ApiError>;
    /**
     * The client makes a request to the token endpoint by sending the following parameters using the \"application/x-www-form-urlencoded\" HTTP request entity-body.  > Do not implement a client for this endpoint yourself. Use a library. There are many libraries > available for any programming language. You can find a list of libraries here: https://oauth.net/code/ > > Do note that Hydra SDK does not implement this endpoint properly. Use one of the libraries listed above
     * @summary The OAuth 2.0 Token Endpoint
     * @param {string} grantType
     * @param {string} [clientId]
     * @param {string} [code]
     * @param {string} [redirectUri]
     * @param {string} [refreshToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    performOAuth2TokenFlow(grantType: string, clientId?: string, code?: string, redirectUri?: string, refreshToken?: string, options?: AxiosRequestConfig): AxiosPromise<OAuth2TokenResponse>;
    /**
     * This endpoint initiates and completes user logout at Ory Hydra and initiates OpenID Connect Front- / Back-channel logout:  https://openid.net/specs/openid-connect-frontchannel-1_0.html https://openid.net/specs/openid-connect-backchannel-1_0.html  Back-channel logout is performed asynchronously and does not affect logout flow.
     * @summary OpenID Connect Front- or Back-channel Enabled Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    performOidcFrontOrBackChannelLogout(options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * !! Use with extreme caution !!  Using this API endpoint you can purge (completely delete) a project and its data. This action can not be undone and will delete ALL your data.  !! Use with extreme caution !!
     * @summary Irrecoverably Purge a Project
     * @param {string} projectId Project ID  The project\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    purgeProject(projectId: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * This endpoint requires the user to be a member of the project with the role `OWNER`.
     * @summary Remove a member associated with this project. This also sets their invite status to `REMOVED`.
     * @param {string} projectId Project ID  The project\&#39;s ID.
     * @param {string} memberId Member ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    removeProjectMember(projectId: string, memberId: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
     * @summary Revoke an OAuth2 Access or Refresh Token
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    revokeOAuth2Token(token: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * This endpoint is useful for:  To forcefully logout the current user from another device or session
     * @summary Calling this endpoint invalidates the specified session. The current session cannot be revoked. Session data are not deleted.
     * @param {string} id ID is the session\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    revokeSession(id: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * This endpoint is useful for:  To forcefully logout the current user from all other devices and sessions
     * @summary Calling this endpoint invalidates all except the current session that belong to the logged-in user. Session data are not deleted.
     * @param {string} [xSessionToken] Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
     * @param {string} [cookie] Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    revokeSessions(xSessionToken?: string, cookie?: string, options?: AxiosRequestConfig): AxiosPromise<RevokedSessions>;
    /**
     * :::info  This endpoint is EXPERIMENTAL and subject to potential breaking changes in the future.  :::  Use this endpoint to complete a login flow. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and responds with HTTP 200 and a application/json body with the session token on success; HTTP 410 if the original flow expired with the appropriate error messages set and optionally a `use_flow_id` parameter in the body; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of `application/x-www-form-urlencoded` or `application/json` to be sent in the body and respond with a HTTP 303 redirect to the post/after login URL or the `return_to` value if it was set and if the login succeeded; a HTTP 303 redirect to the login UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of `application/json` will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  If this endpoint is called with `Accept: application/json` in the header, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration! `browser_location_change_required`: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Submit a Login Flow
     * @param {string} flow The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
     * @param {SubmitSelfServiceLoginFlowBody} submitSelfServiceLoginFlowBody
     * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    submitSelfServiceLoginFlow(flow: string, submitSelfServiceLoginFlowBody: SubmitSelfServiceLoginFlowBody, xSessionToken?: string, cookie?: string, options?: AxiosRequestConfig): AxiosPromise<SuccessfulSelfServiceLoginWithoutBrowser>;
    /**
     * This endpoint logs out an identity in a self-service manner.  If the `Accept` HTTP header is not set to `application/json`, the browser will be redirected (HTTP 303 See Other) to the `return_to` parameter of the initial request or fall back to `urls.default_return_to`.  If the `Accept` HTTP header is set to `application/json`, a 204 No Content response will be sent on successful logout instead.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the `/self-service/logout/api` URL directly with the Ory Session Token.  More information can be found at [Ory Kratos User Logout Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-logout).
     * @summary Complete Self-Service Logout
     * @param {string} [token] A Valid Logout Token  If you do not have a logout token because you only have a session cookie, call &#x60;/self-service/logout/browser&#x60; to generate a URL for this endpoint.
     * @param {string} [returnTo] The URL to return to after the logout was completed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    submitSelfServiceLogoutFlow(token?: string, returnTo?: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Use this endpoint to log out an identity using an Ory Session Token. If the Ory Session Token was successfully revoked, the server returns a 204 No Content response. A 204 No Content response is also sent when the Ory Session Token has been revoked already before.  If the Ory Session Token is malformed or does not exist a 403 Forbidden response will be returned.  This endpoint does not remove any HTTP Cookies - use the Browser-Based Self-Service Logout Flow instead.
     * @summary Perform Logout for APIs, Services, Apps, ...
     * @param {SubmitSelfServiceLogoutFlowWithoutBrowserBody} submitSelfServiceLogoutFlowWithoutBrowserBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    submitSelfServiceLogoutFlowWithoutBrowser(submitSelfServiceLogoutFlowWithoutBrowserBody: SubmitSelfServiceLogoutFlowWithoutBrowserBody, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Use this endpoint to complete a recovery flow. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header `Accept: application/json` it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid. and a HTTP 303 See Other redirect with a fresh recovery flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header `Accept` or with `Accept: text/_*` it returns a HTTP 303 See Other redirect to the Recovery UI URL with the Recovery Flow ID appended. `sent_email` is the success state after `choose_method` for the `link` method and allows the user to request another recovery email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a recovery link\") does not have any API capabilities. The server responds with a HTTP 303 See Other redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Recover UI URL with a new Recovery Flow ID which contains an error message that the recovery link was invalid.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
     * @summary Complete Recovery Flow
     * @param {string} flow The Recovery Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
     * @param {SubmitSelfServiceRecoveryFlowBody} submitSelfServiceRecoveryFlowBody
     * @param {string} [token] Recovery Token  The recovery token which completes the recovery request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    submitSelfServiceRecoveryFlow(flow: string, submitSelfServiceRecoveryFlowBody: SubmitSelfServiceRecoveryFlowBody, token?: string, cookie?: string, options?: AxiosRequestConfig): AxiosPromise<SelfServiceRecoveryFlow>;
    /**
     * Use this endpoint to complete a registration flow by sending an identity\'s traits and password. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and respond with HTTP 200 and a application/json body with the created identity success - if the session hook is configured the `session` and `session_token` will also be included; HTTP 410 if the original flow expired with the appropriate error messages set and optionally a `use_flow_id` parameter in the body; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of `application/x-www-form-urlencoded` or `application/json` to be sent in the body and respond with a HTTP 303 redirect to the post/after registration URL or the `return_to` value if it was set and if the registration succeeded; a HTTP 303 redirect to the registration UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of `application/json` will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  If this endpoint is called with `Accept: application/json` in the header, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration! `browser_location_change_required`: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Submit a Registration Flow
     * @param {string} flow The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
     * @param {SubmitSelfServiceRegistrationFlowBody} submitSelfServiceRegistrationFlowBody
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    submitSelfServiceRegistrationFlow(flow: string, submitSelfServiceRegistrationFlowBody: SubmitSelfServiceRegistrationFlowBody, cookie?: string, options?: AxiosRequestConfig): AxiosPromise<SuccessfulSelfServiceRegistrationWithoutBrowser>;
    /**
     * Use this endpoint to complete a settings flow by sending an identity\'s updated password. This endpoint behaves differently for API and browser flows.  API-initiated flows expect `application/json` to be sent in the body and respond with HTTP 200 and an application/json body with the session token on success; HTTP 303 redirect to a fresh settings flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors. HTTP 401 when the endpoint is called without a valid session token. HTTP 403 when `selfservice.flows.settings.privileged_session_max_age` was reached or the session\'s AAL is too low. Implies that the user needs to re-authenticate.  Browser flows without HTTP Header `Accept` or with `Accept: text/_*` respond with a HTTP 303 redirect to the post/after settings URL or the `return_to` value if it was set and if the flow succeeded; a HTTP 303 redirect to the Settings UI URL with the flow ID containing the validation errors otherwise. a HTTP 303 redirect to the login endpoint when `selfservice.flows.settings.privileged_session_max_age` was reached or the session\'s AAL is too low.  Browser flows with HTTP Header `Accept: application/json` respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 401 when the endpoint is called without a valid session cookie. HTTP 403 when the page is accessed without a session cookie or the session\'s AAL is too low. HTTP 400 on form validation errors.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor (happens automatically for server-side browser flows) or change the configuration.  If this endpoint is called with a `Accept: application/json` HTTP header, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_refresh_required`: The identity requested to change something that needs a privileged session. Redirect the identity to the login init endpoint with query parameters `?refresh=true&return_to=<the-current-browser-url>`, or initiate a refresh login flow otherwise. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first. `security_identity_mismatch`: The flow was interrupted with `session_refresh_required` but apparently some other identity logged in instead. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration! `browser_location_change_required`: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Complete Settings Flow
     * @param {string} flow The Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
     * @param {SubmitSelfServiceSettingsFlowBody} submitSelfServiceSettingsFlowBody
     * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    submitSelfServiceSettingsFlow(flow: string, submitSelfServiceSettingsFlowBody: SubmitSelfServiceSettingsFlowBody, xSessionToken?: string, cookie?: string, options?: AxiosRequestConfig): AxiosPromise<SelfServiceSettingsFlow>;
    /**
     * Use this endpoint to complete a verification flow. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header `Accept: application/json` it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 303 See Other redirect with a fresh verification flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header `Accept` or with `Accept: text/_*` it returns a HTTP 303 See Other redirect to the Verification UI URL with the Verification Flow ID appended. `sent_email` is the success state after `choose_method` when using the `link` method and allows the user to request another verification email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a verification link\") does not have any API capabilities. The server responds with a HTTP 303 See Other redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Verification UI URL with a new Verification Flow ID which contains an error message that the verification link was invalid.  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Complete Verification Flow
     * @param {string} flow The Verification Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
     * @param {SubmitSelfServiceVerificationFlowBody} submitSelfServiceVerificationFlowBody
     * @param {string} [token] Verification Token  The verification token which completes the verification request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    submitSelfServiceVerificationFlow(flow: string, submitSelfServiceVerificationFlowBody: SubmitSelfServiceVerificationFlowBody, token?: string, cookie?: string, options?: AxiosRequestConfig): AxiosPromise<SelfServiceVerificationFlow>;
    /**
     * Uses the HTTP Headers in the GET request to determine (e.g. by using checking the cookies) who is authenticated. Returns a session object in the body or 401 if the credentials are invalid or no credentials were sent. Additionally when the request it successful it adds the user ID to the \'X-Kratos-Authenticated-Identity-Id\' header in the response.  If you call this endpoint from a server-side application, you must forward the HTTP Cookie Header to this endpoint:  ```js pseudo-code example router.get(\'/protected-endpoint\', async function (req, res) { const session = await client.toSession(undefined, req.header(\'cookie\'))  console.log(session) }) ```  When calling this endpoint from a non-browser application (e.g. mobile app) you must include the session token:  ```js pseudo-code example ... const session = await client.toSession(\"the-session-token\")  console.log(session) ```  Depending on your configuration this endpoint might return a 403 status code if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  This endpoint is useful for:  AJAX calls. Remember to send credentials and set up CORS correctly! Reverse proxies and API Gateways Server-side calls - use the `X-Session-Token` header!  # This endpoint authenticates users by checking  if the `Cookie` HTTP header was set containing an Ory Kratos Session Cookie; if the `Authorization: bearer <ory-session-token>` HTTP header was set with a valid Ory Kratos Session Token; if the `X-Session-Token` HTTP header was set with a valid Ory Kratos Session Token.  If none of these headers are set or the cooke or token are invalid, the endpoint returns a HTTP 401 status code.  As explained above, this request may fail due to several reasons. The `error.id` can be one of:  `session_inactive`: No active session was found in the request (e.g. no Ory Session Cookie / Ory Session Token). `session_aal2_required`: An active session was found but it does not fulfil the Authenticator Assurance Level, implying that the session must (e.g.) authenticate the second factor.
     * @summary Check Who the Current HTTP Session Belongs To
     * @param {string} [xSessionToken] Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
     * @param {string} [cookie] Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    toSession(xSessionToken?: string, cookie?: string, options?: AxiosRequestConfig): AxiosPromise<Session>;
    /**
     * This endpoints allows you to update the Ory Cloud Project configuration for individual services (identity, permission, ...). The configuration is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the `version` key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to Ory Cloud, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.  Be aware that updating any service\'s configuration will completely override your current configuration for that service!
     * @summary Update an Ory Cloud Project Configuration
     * @param {string} projectId Project ID  The project\&#39;s ID.
     * @param {UpdateProject} [updateProject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2ApiInterface
     */
    updateProject(projectId: string, updateProject?: UpdateProject, options?: AxiosRequestConfig): AxiosPromise<SuccessfulProjectUpdate>;
}
/**
 * V0alpha2Api - object-oriented interface
 * @export
 * @class V0alpha2Api
 * @extends {BaseAPI}
 */
export declare class V0alpha2Api extends BaseAPI implements V0alpha2ApiInterface {
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Accept an OAuth 2.0 Consent Request
     * @param {string} consentChallenge
     * @param {AcceptOAuth2ConsentRequest} [acceptOAuth2ConsentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminAcceptOAuth2ConsentRequest(consentChallenge: string, acceptOAuth2ConsentRequest?: AcceptOAuth2ConsentRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessfulOAuth2RequestResponse>>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell Ory Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has successfully authenticated and includes additional information such as the subject\'s ID and if ORY Hydra should remember the subject\'s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @summary Accept an OAuth 2.0 Login Request
     * @param {string} loginChallenge
     * @param {AcceptOAuth2LoginRequest} [acceptOAuth2LoginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminAcceptOAuth2LoginRequest(loginChallenge: string, acceptOAuth2LoginRequest?: AcceptOAuth2LoginRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessfulOAuth2RequestResponse>>;
    /**
     * When a user or an application requests ORY Hydra to log out a user, this endpoint is used to confirm that logout request.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Accept an OAuth 2.0 Logout Request
     * @param {string} logoutChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminAcceptOAuth2LogoutRequest(logoutChallenge: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessfulOAuth2RequestResponse>>;
    /**
     * This endpoint creates an identity. Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Create an Identity
     * @param {AdminCreateIdentityBody} [adminCreateIdentityBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminCreateIdentity(adminCreateIdentityBody?: AdminCreateIdentityBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Identity>>;
    /**
     * This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Generate a New JSON Web Key
     * @param {string} set The JSON Web Key Set
     * @param {AdminCreateJsonWebKeySetBody} adminCreateJsonWebKeySetBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminCreateJsonWebKeySet(set: string, adminCreateJsonWebKeySetBody: AdminCreateJsonWebKeySetBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<JsonWebKeySet>>;
    /**
     * Create a new OAuth 2.0 client. If you pass `client_secret` the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Create an OAuth 2.0 Client
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminCreateOAuth2Client(oAuth2Client: OAuth2Client, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OAuth2Client>>;
    /**
     * This endpoint creates a recovery code which should be given to the user in order for them to recover (or activate) their account.
     * @summary Create a Recovery Link
     * @param {AdminCreateSelfServiceRecoveryCodeBody} [adminCreateSelfServiceRecoveryCodeBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminCreateSelfServiceRecoveryCode(adminCreateSelfServiceRecoveryCodeBody?: AdminCreateSelfServiceRecoveryCodeBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SelfServiceRecoveryCode>>;
    /**
     * This endpoint creates a recovery link which should be given to the user in order for them to recover (or activate) their account.
     * @summary Create a Recovery Link
     * @param {AdminCreateSelfServiceRecoveryLinkBody} [adminCreateSelfServiceRecoveryLinkBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminCreateSelfServiceRecoveryLink(adminCreateSelfServiceRecoveryLinkBody?: AdminCreateSelfServiceRecoveryLinkBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SelfServiceRecoveryLink>>;
    /**
     * Calling this endpoint irrecoverably and permanently deletes the identity given its ID. This action can not be undone. This endpoint returns 204 when the identity was deleted or when the identity was not found, in which case it is assumed that is has been deleted already.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Delete an Identity
     * @param {string} id ID is the identity\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminDeleteIdentity(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * This endpoint is useful for:  To forcefully logout Identity from all devices and sessions
     * @summary Calling this endpoint irrecoverably and permanently deletes and invalidates all sessions that belong to the given Identity.
     * @param {string} id ID is the identity\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminDeleteIdentitySessions(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Delete a JSON Web Key
     * @param {string} set The JSON Web Key Set
     * @param {string} kid The JSON Web Key ID (kid)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminDeleteJsonWebKey(set: string, kid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Delete a JSON Web Key Set
     * @param {string} set The JSON Web Key Set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminDeleteJsonWebKeySet(set: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
     * @summary Deletes an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminDeleteOAuth2Client(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * This endpoint deletes OAuth2 access tokens issued for a client from the database
     * @summary Delete OAuth2 Access Tokens from a Client
     * @param {string} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminDeleteOAuth2Token(clientId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
     * @summary Delete a Trusted OAuth2 JWT Bearer Grant Type Issuer
     * @param {string} id The id of the desired grant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminDeleteTrustedOAuth2JwtGrantIssuer(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Retrieve the session ID from the `/sessions/whoami` endpoint / `toSession` SDK method.
     * @summary Calling this endpoint extends the given session ID. If `session.earliest_possible_extend` is set it will only extend the session after the specified time has passed.
     * @param {string} id ID is the session\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminExtendSession(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Session>>;
    /**
     * Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Get an Identity
     * @param {string} id ID must be set to the ID of identity you want to get
     * @param {Array<string>} [includeCredential] DeclassifyCredentials will declassify one or more identity\&#39;s credentials  Currently, only &#x60;oidc&#x60; is supported. This will return the initial OAuth 2.0 Access, Refresh and (optionally) OpenID Connect ID Token.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminGetIdentity(id: string, includeCredential?: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Identity>>;
    /**
     * This endpoint returns a singular JSON Web Key. It is identified by the set and the specific key ID (kid).
     * @summary Fetch a JSON Web Key
     * @param {string} set The JSON Web Key Set
     * @param {string} kid The JSON Web Key ID (kid)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminGetJsonWebKey(set: string, kid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<JsonWebKeySet>>;
    /**
     * This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Retrieve a JSON Web Key Set
     * @param {string} set The JSON Web Key Set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminGetJsonWebKeySet(set: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<JsonWebKeySet>>;
    /**
     * Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Get an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminGetOAuth2Client(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OAuth2Client>>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.
     * @summary Get OAuth 2.0 Consent Request Information
     * @param {string} consentChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminGetOAuth2ConsentRequest(consentChallenge: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OAuth2ConsentRequest>>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
     * @summary Get an OAuth 2.0 Login Request
     * @param {string} loginChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminGetOAuth2LoginRequest(loginChallenge: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OAuth2LoginRequest>>;
    /**
     * Use this endpoint to fetch a logout request.
     * @summary Get an OAuth 2.0 Logout Request
     * @param {string} logoutChallenge
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminGetOAuth2LogoutRequest(logoutChallenge: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OAuth2LogoutRequest>>;
    /**
     * Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
     * @summary Get a Trusted OAuth2 JWT Bearer Grant Type Issuer
     * @param {string} id The id of the desired grant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminGetTrustedOAuth2JwtGrantIssuer(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TrustedOAuth2JwtGrantIssuer>>;
    /**
     * The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting `accessTokenExtra` during the consent flow.  For more information [read this blog post](https://www.oauth.com/oauth2-servers/token-introspection-endpoint/).
     * @summary Introspect OAuth2 Access or Refresh Tokens
     * @param {string} token The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.
     * @param {string} [scope] An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminIntrospectOAuth2Token(token: string, scope?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IntrospectedOAuth2Token>>;
    /**
     * Lists all messages by given status and recipient.
     * @summary List Messages
     * @param {number} [perPage] Items per Page  This is the number of items per page.
     * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
     * @param {CourierMessageStatus} [status] Status filters out messages based on status. If no value is provided, it doesn\&#39;t take effect on filter.
     * @param {string} [recipient] Recipient filters out messages based on recipient. If no value is provided, it doesn\&#39;t take effect on filter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminListCourierMessages(perPage?: number, page?: number, status?: CourierMessageStatus, recipient?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Message[]>>;
    /**
     * Lists all identities. Does not support search at the moment.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary List Identities
     * @param {number} [perPage] Items per Page  This is the number of items per page.
     * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminListIdentities(perPage?: number, page?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Identity[]>>;
    /**
     * This endpoint is useful for:  Listing all sessions that belong to an Identity in an administrative context.
     * @summary This endpoint returns all sessions that belong to the given Identity.
     * @param {string} id ID is the identity\&#39;s ID.
     * @param {number} [perPage] Items per Page  This is the number of items per page.
     * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
     * @param {boolean} [active] Active is a boolean flag that filters out sessions based on the state. If no value is provided, all sessions are returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminListIdentitySessions(id: string, perPage?: number, page?: number, active?: boolean, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Session[]>>;
    /**
     * This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients. The `limit` parameter can be used to retrieve more clients, but it has an upper bound at 500 objects. Pagination should be used to retrieve more than 500 objects.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: \'<https://project-slug.projects.oryapis.com/admin/clients?limit={limit}&offset={offset}>; rel=\"{page}\"\', where page is one of the following applicable pages: \'first\', \'next\', \'last\', and \'previous\'. Multiple links can be included in this header, and will be separated by a comma.
     * @summary List OAuth 2.0 Clients
     * @param {number} [pageSize] Items per page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     * @param {string} [pageToken] Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     * @param {string} [clientName] The name of the clients to filter by.
     * @param {string} [owner] The owner of the clients to filter by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminListOAuth2Clients(pageSize?: number, pageToken?: string, clientName?: string, owner?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OAuth2Client[]>>;
    /**
     * This endpoint lists all subject\'s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.  The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: \'<https://hydra-url/admin/oauth2/auth/sessions/consent?subject={user}&limit={limit}&offset={offset}>; rel=\"{page}\"\', where page is one of the following applicable pages: \'first\', \'next\', \'last\', and \'previous\'. Multiple links can be included in this header, and will be separated by a comma.
     * @summary List OAuth 2.0 Consent Sessions of a Subject
     * @param {string} subject The subject to list the consent sessions for.
     * @param {string} [link] The link header contains pagination links.  For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     * @param {string} [xTotalCount] The total number of clients.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminListOAuth2SubjectConsentSessions(subject: string, link?: string, xTotalCount?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PreviousOAuth2ConsentSession[]>>;
    /**
     * Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
     * @summary List Trusted OAuth2 JWT Bearer Grant Type Issuers
     * @param {number} [maxItems]
     * @param {number} [defaultItems]
     * @param {string} [issuer] If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned.
     * @param {number} [limit] The maximum amount of policies returned, upper bound is 500 policies
     * @param {number} [offset] The offset from where to start looking.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminListTrustedOAuth2JwtGrantIssuers(maxItems?: number, defaultItems?: number, issuer?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TrustedOAuth2JwtGrantIssuer[]>>;
    /**
     * Partially updates an Identity\'s field using [JSON Patch](https://jsonpatch.com/)  NOTE: The fields `id`, `stateChangedAt` and `credentials` are not updateable.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Patch an Identity
     * @param {string} id ID must be set to the ID of identity you want to update
     * @param {Array<JsonPatch>} [jsonPatch]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminPatchIdentity(id: string, jsonPatch?: Array<JsonPatch>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Identity>>;
    /**
     * Patch an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Patch an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {Array<JsonPatch>} jsonPatch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminPatchOAuth2Client(id: string, jsonPatch: Array<JsonPatch>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OAuth2Client>>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Reject an OAuth 2.0 Consent Request
     * @param {string} consentChallenge
     * @param {RejectOAuth2Request} [rejectOAuth2Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminRejectOAuth2ConsentRequest(consentChallenge: string, rejectOAuth2Request?: RejectOAuth2Request, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessfulOAuth2RequestResponse>>;
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has not authenticated and includes a reason why the authentication was denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @summary Reject an OAuth 2.0 Login Request
     * @param {string} loginChallenge
     * @param {RejectOAuth2Request} [rejectOAuth2Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminRejectOAuth2LoginRequest(loginChallenge: string, rejectOAuth2Request?: RejectOAuth2Request, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessfulOAuth2RequestResponse>>;
    /**
     * When a user or an application requests ORY Hydra to log out a user, this endpoint is used to deny that logout request. No body is required.  The response is empty as the logout provider has to chose what action to perform next.
     * @summary Reject an OAuth 2.0 Logout Request
     * @param {string} logoutChallenge
     * @param {RejectOAuth2Request} [rejectOAuth2Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminRejectOAuth2LogoutRequest(logoutChallenge: string, rejectOAuth2Request?: RejectOAuth2Request, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * This endpoint revokes a subject\'s granted consent sessions for a specific OAuth 2.0 Client and invalidates all associated OAuth 2.0 Access Tokens.
     * @summary Revokes OAuth 2.0 Consent Sessions of a Subject for a Specific OAuth 2.0 Client
     * @param {string} subject The subject (Subject) whose consent sessions should be deleted.
     * @param {string} [client] If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID
     * @param {boolean} [all] If set to &#x60;true&#x60; deletes all consent sessions by the Subject that have been granted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminRevokeOAuth2ConsentSessions(subject: string, client?: string, all?: boolean, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * This endpoint invalidates a subject\'s authentication session. After revoking the authentication session, the subject has to re-authenticate at ORY Hydra. This endpoint does not invalidate any tokens and does not work with OpenID Connect Front- or Back-channel logout.
     * @summary Invalidates All OAuth 2.0 Login Sessions of a Certain User
     * @param {string} subject The subject to revoke authentication sessions for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminRevokeOAuth2LoginSessions(subject: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
     * @summary Trust an OAuth2 JWT Bearer Grant Type Issuer
     * @param {AdminTrustOAuth2JwtGrantIssuerBody} [adminTrustOAuth2JwtGrantIssuerBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminTrustOAuth2JwtGrantIssuer(adminTrustOAuth2JwtGrantIssuerBody?: AdminTrustOAuth2JwtGrantIssuerBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TrustedOAuth2JwtGrantIssuer>>;
    /**
     * This endpoint updates an identity. The full identity payload (except credentials) is expected. This endpoint does not support patching.  Learn how identities work in [Ory Kratos\' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @summary Update an Identity
     * @param {string} id ID must be set to the ID of identity you want to update
     * @param {AdminUpdateIdentityBody} [adminUpdateIdentityBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminUpdateIdentity(id: string, adminUpdateIdentityBody?: AdminUpdateIdentityBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Identity>>;
    /**
     * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Update a JSON Web Key
     * @param {string} set The JSON Web Key Set
     * @param {string} kid The JSON Web Key ID (kid)
     * @param {JsonWebKey} [jsonWebKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminUpdateJsonWebKey(set: string, kid: string, jsonWebKey?: JsonWebKey, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<JsonWebKey>>;
    /**
     * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Update a JSON Web Key Set
     * @param {string} set The JSON Web Key Set
     * @param {JsonWebKeySet} [jsonWebKeySet]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminUpdateJsonWebKeySet(set: string, jsonWebKeySet?: JsonWebKeySet, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<JsonWebKeySet>>;
    /**
     * Update an existing OAuth 2.0 Client. If you pass `client_secret` the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Update an OAuth 2.0 Client
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    adminUpdateOAuth2Client(id: string, oAuth2Client: OAuth2Client, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OAuth2Client>>;
    /**
     * Creates a new project.
     * @summary Create a Project
     * @param {CreateProjectBody} [createProjectBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    createProject(createProjectBody?: CreateProjectBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Project>>;
    /**
     * Create an API token for a project.
     * @summary Create API Token
     * @param {string} project The Project ID or Project slug
     * @param {InlineObject3} [inlineObject3]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    createProjectApiKey(project: string, inlineObject3?: InlineObject3, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProjectApiKey>>;
    /**
     * This endpoint initializes a browser-based user logout flow and a URL which can be used to log out the user.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the `/self-service/logout/api` URL directly with the Ory Session Token.  The URL is only valid for the currently signed in user. If no user is signed in, this endpoint returns a 401 error.  When calling this endpoint from a backend, please ensure to properly forward the HTTP cookies.
     * @summary Create a Logout URL for Browsers
     * @param {string} [cookie] HTTP Cookies  If you call this endpoint from a backend, please include the original Cookie header in the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    createSelfServiceLogoutFlowUrlForBrowsers(cookie?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SelfServiceLogoutUrl>>;
    /**
     * Deletes an API Token and immediately removes it.
     * @summary Delete API Token
     * @param {string} project The Project ID or Project slug
     * @param {string} tokenId The Token ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    deleteProjectApiKey(project: string, tokenId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * This endpoint returns JSON Web Keys required to verifying OpenID Connect ID Tokens and, if enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like [node-jwks-rsa](https://github.com/auth0/node-jwks-rsa) among others.
     * @summary Discover JSON Web Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    discoverJsonWebKeys(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<JsonWebKeySet>>;
    /**
     * The well known endpoint an be used to retrieve information for OpenID Connect clients. We encourage you to not roll your own OpenID Connect client but to use an OpenID Connect client library instead. You can learn more on this flow at https://openid.net/specs/openid-connect-discovery-1_0.html .  Popular libraries for OpenID Connect clients include oidc-client-js (JavaScript), go-oidc (Golang), and others. For a full list of clients go here: https://openid.net/developers/certified/
     * @summary OpenID Connect Discovery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    discoverOidcConfiguration(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OidcConfiguration>>;
    /**
     * This endpoint behaves like the administrative counterpart (`createOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  Please note that using this endpoint you are not able to choose the `client_secret` nor the `client_id` as those values will be server generated when specifying `token_endpoint_auth_method` as `client_secret_basic` or `client_secret_post`.  The `client_secret` will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somewhere safe.
     * @summary Register an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    dynamicClientRegistrationCreateOAuth2Client(oAuth2Client: OAuth2Client, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OAuth2Client>>;
    /**
     * This endpoint behaves like the administrative counterpart (`deleteOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Deletes an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    dynamicClientRegistrationDeleteOAuth2Client(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * This endpoint behaves like the administrative counterpart (`getOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Get an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    dynamicClientRegistrationGetOAuth2Client(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OAuth2Client>>;
    /**
     * This endpoint behaves like the administrative counterpart (`updateOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  If you pass `client_secret` the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Update an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration Management Protocol
     * @param {string} id The id of the OAuth 2.0 Client.
     * @param {OAuth2Client} oAuth2Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    dynamicClientRegistrationUpdateOAuth2Client(id: string, oAuth2Client: OAuth2Client, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OAuth2Client>>;
    /**
     * Get a JSON Schema
     * @param {string} id ID must be set to the ID of schema you want to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    getIdentitySchema(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object>>;
    /**
     * This endpoint returns the payload of the ID Token, including the idTokenExtra values, of the provided OAuth 2.0 Access Token.  For more information please [refer to the spec](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).  In the case of authentication error, a WWW-Authenticate header might be set in the response with more information about the error. See [the spec](https://datatracker.ietf.org/doc/html/rfc6750#section-3) for more details about header format.
     * @summary OpenID Connect Userinfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    getOidcUserInfo(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OidcUserInfo>>;
    /**
     * Get a projects you have access to by its ID.
     * @summary Get a Project
     * @param {string} projectId Project ID  The project\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    getProject(projectId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Project>>;
    /**
     * This endpoint requires the user to be a member of the project with the role `OWNER` or `DEVELOPER`.
     * @summary Get all members associated with this project.
     * @param {string} projectId Project ID  The project\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    getProjectMembers(projectId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CloudAccount[]>>;
    /**
     * This endpoint returns the error associated with a user-facing self service errors.  This endpoint supports stub values to help you implement the error UI:  `?id=stub:500` - returns a stub 500 (Internal Server Error) error.  More information can be found at [Ory Kratos User User Facing Error Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-facing-errors).
     * @summary Get Self-Service Errors
     * @param {string} id Error is the error\&#39;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    getSelfServiceError(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SelfServiceError>>;
    /**
     * This endpoint returns a login flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/login\', async function (req, res) { const flow = await client.getSelfServiceLoginFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'login\', flow) }) ```  This request may fail due to several reasons. The `error.id` can be one of:  `session_already_available`: The user is already signed in. `self_service_flow_expired`: The flow is expired and you should request a new one.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Get Login Flow
     * @param {string} id The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    getSelfServiceLoginFlow(id: string, cookie?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SelfServiceLoginFlow>>;
    /**
     * This endpoint returns a recovery flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/recovery\', async function (req, res) { const flow = await client.getSelfServiceRecoveryFlow(req.header(\'Cookie\'), req.query[\'flow\'])  res.render(\'recovery\', flow) }) ```  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
     * @summary Get Recovery Flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    getSelfServiceRecoveryFlow(id: string, cookie?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SelfServiceRecoveryFlow>>;
    /**
     * This endpoint returns a registration flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/registration\', async function (req, res) { const flow = await client.getSelfServiceRegistrationFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'registration\', flow) }) ```  This request may fail due to several reasons. The `error.id` can be one of:  `session_already_available`: The user is already signed in. `self_service_flow_expired`: The flow is expired and you should request a new one.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Get Registration Flow
     * @param {string} id The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    getSelfServiceRegistrationFlow(id: string, cookie?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SelfServiceRegistrationFlow>>;
    /**
     * When accessing this endpoint through Ory Kratos\' Public API you must ensure that either the Ory Kratos Session Cookie or the Ory Kratos Session Token are set.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  You can access this endpoint without credentials when using Ory Kratos\' Admin API.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first. `security_identity_mismatch`: The flow was interrupted with `session_refresh_required` but apparently some other identity logged in instead.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Get Settings Flow
     * @param {string} id ID is the Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
     * @param {string} [xSessionToken] The Session Token  When using the SDK in an app without a browser, please include the session token here.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    getSelfServiceSettingsFlow(id: string, xSessionToken?: string, cookie?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SelfServiceSettingsFlow>>;
    /**
     * This endpoint returns a verification flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/recovery\', async function (req, res) { const flow = await client.getSelfServiceVerificationFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'verification\', flow) })  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Get Verification Flow
     * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
     * @param {string} [cookie] HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    getSelfServiceVerificationFlow(id: string, cookie?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SelfServiceVerificationFlow>>;
    /**
     * This endpoint provides JavaScript which is needed in order to perform WebAuthn login and registration.  If you are building a JavaScript Browser App (e.g. in ReactJS or AngularJS) you will need to load this file:  ```html <script src=\"https://public-kratos.example.org/.well-known/ory/webauthn.js\" type=\"script\" async /> ```  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Get WebAuthn JavaScript
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    getWebAuthnJavaScript(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string>>;
    /**
     * This endpoint initializes a browser-based user login flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.login.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url` unless the query parameter `?refresh=true` was set.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `session_aal1_required`: Multi-factor auth (e.g. 2fa) was requested but the user has no session yet. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Initialize Login Flow for Browsers
     * @param {boolean} [refresh] Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session.
     * @param {string} [aal] Request a Specific AuthenticationMethod Assurance Level  Use this parameter to upgrade an existing session\&#39;s authenticator assurance level (AAL). This allows you to ask for multi-factor authentication. When an identity sign in using e.g. username+password, the AAL is 1. If you wish to \&quot;upgrade\&quot; the session\&#39;s security by asking the user to perform TOTP / WebAuth/ ... you would set this to \&quot;aal2\&quot;.
     * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    initializeSelfServiceLoginFlowForBrowsers(refresh?: boolean, aal?: string, returnTo?: string, cookie?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SelfServiceLoginFlow>>;
    /**
     * This endpoint initiates a login flow for API clients that do not use a browser, such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing login flow call `/self-service/login/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks, including CSRF login attacks.  In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `session_aal1_required`: Multi-factor auth (e.g. 2fa) was requested but the user has no session yet. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Initialize Login Flow for APIs, Services, Apps, ...
     * @param {boolean} [refresh] Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session.
     * @param {string} [aal] Request a Specific AuthenticationMethod Assurance Level  Use this parameter to upgrade an existing session\&#39;s authenticator assurance level (AAL). This allows you to ask for multi-factor authentication. When an identity sign in using e.g. username+password, the AAL is 1. If you wish to \&quot;upgrade\&quot; the session\&#39;s security by asking the user to perform TOTP / WebAuth/ ... you would set this to \&quot;aal2\&quot;.
     * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    initializeSelfServiceLoginFlowWithoutBrowser(refresh?: boolean, aal?: string, xSessionToken?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SelfServiceLoginFlow>>;
    /**
     * This endpoint initializes a browser-based account recovery flow. Once initialized, the browser will be redirected to `selfservice.flows.recovery.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists, the browser is returned to the configured return URL.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects or a 400 bad request error if the user is already authenticated.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
     * @summary Initialize Recovery Flow for Browsers
     * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    initializeSelfServiceRecoveryFlowForBrowsers(returnTo?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SelfServiceRecoveryFlow>>;
    /**
     * This endpoint initiates a recovery flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error.  To fetch an existing recovery flow call `/self-service/recovery/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
     * @summary Initialize Recovery Flow for APIs, Services, Apps, ...
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    initializeSelfServiceRecoveryFlowWithoutBrowser(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SelfServiceRecoveryFlow>>;
    /**
     * This endpoint initializes a browser-based user registration flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  :::info  This endpoint is EXPERIMENTAL and subject to potential breaking changes in the future.  :::  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.registration.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url`.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!  If this endpoint is called via an AJAX request, the response contains the registration flow without a redirect.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Initialize Registration Flow for Browsers
     * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    initializeSelfServiceRegistrationFlowForBrowsers(returnTo?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SelfServiceRegistrationFlow>>;
    /**
     * This endpoint initiates a registration flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing registration flow call `/self-service/registration/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Initialize Registration Flow for APIs, Services, Apps, ...
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    initializeSelfServiceRegistrationFlowWithoutBrowser(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SelfServiceRegistrationFlow>>;
    /**
     * This endpoint initializes a browser-based user settings flow. Once initialized, the browser will be redirected to `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid Ory Kratos Session Cookie is included in the request, a login flow will be initialized.  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid user session was set, the browser will be redirected to the login endpoint.  If this endpoint is called via an AJAX request, the response contains the settings flow without any redirects or a 401 forbidden error if no valid session was set.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor (happens automatically for server-side browser flows) or change the configuration.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Initialize Settings Flow for Browsers
     * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    initializeSelfServiceSettingsFlowForBrowsers(returnTo?: string, cookie?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SelfServiceSettingsFlow>>;
    /**
     * This endpoint initiates a settings flow for API clients such as mobile devices, smart TVs, and so on. You must provide a valid Ory Kratos Session Token for this endpoint to respond with HTTP 200 OK.  To fetch an existing settings flow call `/self-service/settings/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  In the case of an error, the `error.id` of the JSON response body can be one of:  `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Initialize Settings Flow for APIs, Services, Apps, ...
     * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    initializeSelfServiceSettingsFlowWithoutBrowser(xSessionToken?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SelfServiceSettingsFlow>>;
    /**
     * This endpoint initializes a browser-based account verification flow. Once initialized, the browser will be redirected to `selfservice.flows.verification.ui_url` with the flow ID set as the query parameter `?flow=`.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Initialize Verification Flow for Browser Clients
     * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    initializeSelfServiceVerificationFlowForBrowsers(returnTo?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SelfServiceVerificationFlow>>;
    /**
     * This endpoint initiates a verification flow for API clients such as mobile devices, smart TVs, and so on.  To fetch an existing verification flow call `/self-service/verification/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
     * @summary Initialize Verification Flow for APIs, Services, Apps, ...
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    initializeSelfServiceVerificationFlowWithoutBrowser(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SelfServiceVerificationFlow>>;
    /**
     * Get all Identity Schemas
     * @param {number} [perPage] Items per Page  This is the number of items per page.
     * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    listIdentitySchemas(perPage?: number, page?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentitySchemaContainer[]>>;
    /**
     * A list of all the project\'s API tokens.
     * @summary List a Project\'s API Tokens
     * @param {string} project The Project ID or Project slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    listProjectApiKeys(project: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProjectApiKey[]>>;
    /**
     * Lists all projects you have access to.
     * @summary List All Projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    listProjects(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProjectMetadata[]>>;
    /**
     * This endpoint is useful for:  Displaying all other sessions that belong to the logged-in user
     * @summary This endpoints returns all other active sessions that belong to the logged-in user. The current session can be retrieved by calling the `/sessions/whoami` endpoint.
     * @param {string} [xSessionToken] Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
     * @param {string} [cookie] Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
     * @param {number} [perPage] Items per Page  This is the number of items per page.
     * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    listSessions(xSessionToken?: string, cookie?: string, perPage?: number, page?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Session[]>>;
    /**
     * Deprecated: Use the `patchProjectWithRevision` endpoint instead to specify the exact revision the patch was generated for.  This endpoints allows you to patch individual Ory Cloud Project configuration keys for Ory\'s services (identity, permission, ...). The configuration format is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the `version` key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to Ory Cloud, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.
     * @summary Patch an Ory Cloud Project Configuration`
     * @param {string} projectId Project ID  The project\&#39;s ID.
     * @param {Array<JsonPatch>} [jsonPatch]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    patchProject(projectId: string, jsonPatch?: Array<JsonPatch>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessfulProjectUpdate>>;
    /**
     * This endpoint is not documented here because you should never use your own implementation to perform OAuth2 flows. OAuth2 is a very popular protocol and a library for your programming language will exists.  To learn more about this flow please refer to the specification: https://tools.ietf.org/html/rfc6749
     * @summary The OAuth 2.0 Authorize Endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    performOAuth2AuthorizationFlow(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OAuth2ApiError>>;
    /**
     * The client makes a request to the token endpoint by sending the following parameters using the \"application/x-www-form-urlencoded\" HTTP request entity-body.  > Do not implement a client for this endpoint yourself. Use a library. There are many libraries > available for any programming language. You can find a list of libraries here: https://oauth.net/code/ > > Do note that Hydra SDK does not implement this endpoint properly. Use one of the libraries listed above
     * @summary The OAuth 2.0 Token Endpoint
     * @param {string} grantType
     * @param {string} [clientId]
     * @param {string} [code]
     * @param {string} [redirectUri]
     * @param {string} [refreshToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    performOAuth2TokenFlow(grantType: string, clientId?: string, code?: string, redirectUri?: string, refreshToken?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OAuth2TokenResponse>>;
    /**
     * This endpoint initiates and completes user logout at Ory Hydra and initiates OpenID Connect Front- / Back-channel logout:  https://openid.net/specs/openid-connect-frontchannel-1_0.html https://openid.net/specs/openid-connect-backchannel-1_0.html  Back-channel logout is performed asynchronously and does not affect logout flow.
     * @summary OpenID Connect Front- or Back-channel Enabled Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    performOidcFrontOrBackChannelLogout(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * !! Use with extreme caution !!  Using this API endpoint you can purge (completely delete) a project and its data. This action can not be undone and will delete ALL your data.  !! Use with extreme caution !!
     * @summary Irrecoverably Purge a Project
     * @param {string} projectId Project ID  The project\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    purgeProject(projectId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * This endpoint requires the user to be a member of the project with the role `OWNER`.
     * @summary Remove a member associated with this project. This also sets their invite status to `REMOVED`.
     * @param {string} projectId Project ID  The project\&#39;s ID.
     * @param {string} memberId Member ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    removeProjectMember(projectId: string, memberId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
     * @summary Revoke an OAuth2 Access or Refresh Token
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    revokeOAuth2Token(token: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * This endpoint is useful for:  To forcefully logout the current user from another device or session
     * @summary Calling this endpoint invalidates the specified session. The current session cannot be revoked. Session data are not deleted.
     * @param {string} id ID is the session\&#39;s ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    revokeSession(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * This endpoint is useful for:  To forcefully logout the current user from all other devices and sessions
     * @summary Calling this endpoint invalidates all except the current session that belong to the logged-in user. Session data are not deleted.
     * @param {string} [xSessionToken] Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
     * @param {string} [cookie] Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    revokeSessions(xSessionToken?: string, cookie?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RevokedSessions>>;
    /**
     * :::info  This endpoint is EXPERIMENTAL and subject to potential breaking changes in the future.  :::  Use this endpoint to complete a login flow. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and responds with HTTP 200 and a application/json body with the session token on success; HTTP 410 if the original flow expired with the appropriate error messages set and optionally a `use_flow_id` parameter in the body; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of `application/x-www-form-urlencoded` or `application/json` to be sent in the body and respond with a HTTP 303 redirect to the post/after login URL or the `return_to` value if it was set and if the login succeeded; a HTTP 303 redirect to the login UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of `application/json` will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  If this endpoint is called with `Accept: application/json` in the header, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration! `browser_location_change_required`: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Submit a Login Flow
     * @param {string} flow The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
     * @param {SubmitSelfServiceLoginFlowBody} submitSelfServiceLoginFlowBody
     * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    submitSelfServiceLoginFlow(flow: string, submitSelfServiceLoginFlowBody: SubmitSelfServiceLoginFlowBody, xSessionToken?: string, cookie?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessfulSelfServiceLoginWithoutBrowser>>;
    /**
     * This endpoint logs out an identity in a self-service manner.  If the `Accept` HTTP header is not set to `application/json`, the browser will be redirected (HTTP 303 See Other) to the `return_to` parameter of the initial request or fall back to `urls.default_return_to`.  If the `Accept` HTTP header is set to `application/json`, a 204 No Content response will be sent on successful logout instead.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the `/self-service/logout/api` URL directly with the Ory Session Token.  More information can be found at [Ory Kratos User Logout Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-logout).
     * @summary Complete Self-Service Logout
     * @param {string} [token] A Valid Logout Token  If you do not have a logout token because you only have a session cookie, call &#x60;/self-service/logout/browser&#x60; to generate a URL for this endpoint.
     * @param {string} [returnTo] The URL to return to after the logout was completed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    submitSelfServiceLogoutFlow(token?: string, returnTo?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Use this endpoint to log out an identity using an Ory Session Token. If the Ory Session Token was successfully revoked, the server returns a 204 No Content response. A 204 No Content response is also sent when the Ory Session Token has been revoked already before.  If the Ory Session Token is malformed or does not exist a 403 Forbidden response will be returned.  This endpoint does not remove any HTTP Cookies - use the Browser-Based Self-Service Logout Flow instead.
     * @summary Perform Logout for APIs, Services, Apps, ...
     * @param {SubmitSelfServiceLogoutFlowWithoutBrowserBody} submitSelfServiceLogoutFlowWithoutBrowserBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    submitSelfServiceLogoutFlowWithoutBrowser(submitSelfServiceLogoutFlowWithoutBrowserBody: SubmitSelfServiceLogoutFlowWithoutBrowserBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Use this endpoint to complete a recovery flow. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header `Accept: application/json` it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid. and a HTTP 303 See Other redirect with a fresh recovery flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header `Accept` or with `Accept: text/_*` it returns a HTTP 303 See Other redirect to the Recovery UI URL with the Recovery Flow ID appended. `sent_email` is the success state after `choose_method` for the `link` method and allows the user to request another recovery email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a recovery link\") does not have any API capabilities. The server responds with a HTTP 303 See Other redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Recover UI URL with a new Recovery Flow ID which contains an error message that the recovery link was invalid.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
     * @summary Complete Recovery Flow
     * @param {string} flow The Recovery Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
     * @param {SubmitSelfServiceRecoveryFlowBody} submitSelfServiceRecoveryFlowBody
     * @param {string} [token] Recovery Token  The recovery token which completes the recovery request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    submitSelfServiceRecoveryFlow(flow: string, submitSelfServiceRecoveryFlowBody: SubmitSelfServiceRecoveryFlowBody, token?: string, cookie?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SelfServiceRecoveryFlow>>;
    /**
     * Use this endpoint to complete a registration flow by sending an identity\'s traits and password. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and respond with HTTP 200 and a application/json body with the created identity success - if the session hook is configured the `session` and `session_token` will also be included; HTTP 410 if the original flow expired with the appropriate error messages set and optionally a `use_flow_id` parameter in the body; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of `application/x-www-form-urlencoded` or `application/json` to be sent in the body and respond with a HTTP 303 redirect to the post/after registration URL or the `return_to` value if it was set and if the registration succeeded; a HTTP 303 redirect to the registration UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of `application/json` will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  If this endpoint is called with `Accept: application/json` in the header, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration! `browser_location_change_required`: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Submit a Registration Flow
     * @param {string} flow The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
     * @param {SubmitSelfServiceRegistrationFlowBody} submitSelfServiceRegistrationFlowBody
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    submitSelfServiceRegistrationFlow(flow: string, submitSelfServiceRegistrationFlowBody: SubmitSelfServiceRegistrationFlowBody, cookie?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessfulSelfServiceRegistrationWithoutBrowser>>;
    /**
     * Use this endpoint to complete a settings flow by sending an identity\'s updated password. This endpoint behaves differently for API and browser flows.  API-initiated flows expect `application/json` to be sent in the body and respond with HTTP 200 and an application/json body with the session token on success; HTTP 303 redirect to a fresh settings flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors. HTTP 401 when the endpoint is called without a valid session token. HTTP 403 when `selfservice.flows.settings.privileged_session_max_age` was reached or the session\'s AAL is too low. Implies that the user needs to re-authenticate.  Browser flows without HTTP Header `Accept` or with `Accept: text/_*` respond with a HTTP 303 redirect to the post/after settings URL or the `return_to` value if it was set and if the flow succeeded; a HTTP 303 redirect to the Settings UI URL with the flow ID containing the validation errors otherwise. a HTTP 303 redirect to the login endpoint when `selfservice.flows.settings.privileged_session_max_age` was reached or the session\'s AAL is too low.  Browser flows with HTTP Header `Accept: application/json` respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 401 when the endpoint is called without a valid session cookie. HTTP 403 when the page is accessed without a session cookie or the session\'s AAL is too low. HTTP 400 on form validation errors.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor (happens automatically for server-side browser flows) or change the configuration.  If this endpoint is called with a `Accept: application/json` HTTP header, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_refresh_required`: The identity requested to change something that needs a privileged session. Redirect the identity to the login init endpoint with query parameters `?refresh=true&return_to=<the-current-browser-url>`, or initiate a refresh login flow otherwise. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first. `security_identity_mismatch`: The flow was interrupted with `session_refresh_required` but apparently some other identity logged in instead. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration! `browser_location_change_required`: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Complete Settings Flow
     * @param {string} flow The Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
     * @param {SubmitSelfServiceSettingsFlowBody} submitSelfServiceSettingsFlowBody
     * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    submitSelfServiceSettingsFlow(flow: string, submitSelfServiceSettingsFlowBody: SubmitSelfServiceSettingsFlowBody, xSessionToken?: string, cookie?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SelfServiceSettingsFlow>>;
    /**
     * Use this endpoint to complete a verification flow. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header `Accept: application/json` it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 303 See Other redirect with a fresh verification flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header `Accept` or with `Accept: text/_*` it returns a HTTP 303 See Other redirect to the Verification UI URL with the Verification Flow ID appended. `sent_email` is the success state after `choose_method` when using the `link` method and allows the user to request another verification email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a verification link\") does not have any API capabilities. The server responds with a HTTP 303 See Other redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Verification UI URL with a new Verification Flow ID which contains an error message that the verification link was invalid.  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @summary Complete Verification Flow
     * @param {string} flow The Verification Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
     * @param {SubmitSelfServiceVerificationFlowBody} submitSelfServiceVerificationFlowBody
     * @param {string} [token] Verification Token  The verification token which completes the verification request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call.
     * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    submitSelfServiceVerificationFlow(flow: string, submitSelfServiceVerificationFlowBody: SubmitSelfServiceVerificationFlowBody, token?: string, cookie?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SelfServiceVerificationFlow>>;
    /**
     * Uses the HTTP Headers in the GET request to determine (e.g. by using checking the cookies) who is authenticated. Returns a session object in the body or 401 if the credentials are invalid or no credentials were sent. Additionally when the request it successful it adds the user ID to the \'X-Kratos-Authenticated-Identity-Id\' header in the response.  If you call this endpoint from a server-side application, you must forward the HTTP Cookie Header to this endpoint:  ```js pseudo-code example router.get(\'/protected-endpoint\', async function (req, res) { const session = await client.toSession(undefined, req.header(\'cookie\'))  console.log(session) }) ```  When calling this endpoint from a non-browser application (e.g. mobile app) you must include the session token:  ```js pseudo-code example ... const session = await client.toSession(\"the-session-token\")  console.log(session) ```  Depending on your configuration this endpoint might return a 403 status code if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  This endpoint is useful for:  AJAX calls. Remember to send credentials and set up CORS correctly! Reverse proxies and API Gateways Server-side calls - use the `X-Session-Token` header!  # This endpoint authenticates users by checking  if the `Cookie` HTTP header was set containing an Ory Kratos Session Cookie; if the `Authorization: bearer <ory-session-token>` HTTP header was set with a valid Ory Kratos Session Token; if the `X-Session-Token` HTTP header was set with a valid Ory Kratos Session Token.  If none of these headers are set or the cooke or token are invalid, the endpoint returns a HTTP 401 status code.  As explained above, this request may fail due to several reasons. The `error.id` can be one of:  `session_inactive`: No active session was found in the request (e.g. no Ory Session Cookie / Ory Session Token). `session_aal2_required`: An active session was found but it does not fulfil the Authenticator Assurance Level, implying that the session must (e.g.) authenticate the second factor.
     * @summary Check Who the Current HTTP Session Belongs To
     * @param {string} [xSessionToken] Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
     * @param {string} [cookie] Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    toSession(xSessionToken?: string, cookie?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Session>>;
    /**
     * This endpoints allows you to update the Ory Cloud Project configuration for individual services (identity, permission, ...). The configuration is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the `version` key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to Ory Cloud, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.  Be aware that updating any service\'s configuration will completely override your current configuration for that service!
     * @summary Update an Ory Cloud Project Configuration
     * @param {string} projectId Project ID  The project\&#39;s ID.
     * @param {UpdateProject} [updateProject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0alpha2Api
     */
    updateProject(projectId: string, updateProject?: UpdateProject, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessfulProjectUpdate>>;
}
/**
 * WriteApi - axios parameter creator
 * @export
 */
export declare const WriteApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Use this endpoint to create a relation tuple.
     * @summary Create a Relation Tuple
     * @param {RelationQuery} [relationQuery]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRelationTuple: (relationQuery?: RelationQuery, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to delete relation tuples
     * @summary Delete Relation Tuples
     * @param {string} [namespace] Namespace of the Relation Tuple
     * @param {string} [object] Object of the Relation Tuple
     * @param {string} [relation] Relation of the Relation Tuple
     * @param {string} [subjectId] SubjectID of the Relation Tuple
     * @param {string} [subjectSetNamespace] Namespace of the Subject Set
     * @param {string} [subjectSetObject] Object of the Subject Set
     * @param {string} [subjectSetRelation] Relation of the Subject Set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRelationTuples: (namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to patch one or more relation tuples.
     * @summary Patch Multiple Relation Tuples
     * @param {Array<PatchDelta>} [patchDelta]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchRelationTuples: (patchDelta?: Array<PatchDelta>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * WriteApi - functional programming interface
 * @export
 */
export declare const WriteApiFp: (configuration?: Configuration) => {
    /**
     * Use this endpoint to create a relation tuple.
     * @summary Create a Relation Tuple
     * @param {RelationQuery} [relationQuery]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRelationTuple(relationQuery?: RelationQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelationQuery>>;
    /**
     * Use this endpoint to delete relation tuples
     * @summary Delete Relation Tuples
     * @param {string} [namespace] Namespace of the Relation Tuple
     * @param {string} [object] Object of the Relation Tuple
     * @param {string} [relation] Relation of the Relation Tuple
     * @param {string} [subjectId] SubjectID of the Relation Tuple
     * @param {string} [subjectSetNamespace] Namespace of the Subject Set
     * @param {string} [subjectSetObject] Object of the Subject Set
     * @param {string} [subjectSetRelation] Relation of the Subject Set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRelationTuples(namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Use this endpoint to patch one or more relation tuples.
     * @summary Patch Multiple Relation Tuples
     * @param {Array<PatchDelta>} [patchDelta]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchRelationTuples(patchDelta?: Array<PatchDelta>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * WriteApi - factory interface
 * @export
 */
export declare const WriteApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Use this endpoint to create a relation tuple.
     * @summary Create a Relation Tuple
     * @param {RelationQuery} [relationQuery]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRelationTuple(relationQuery?: RelationQuery, options?: any): AxiosPromise<RelationQuery>;
    /**
     * Use this endpoint to delete relation tuples
     * @summary Delete Relation Tuples
     * @param {string} [namespace] Namespace of the Relation Tuple
     * @param {string} [object] Object of the Relation Tuple
     * @param {string} [relation] Relation of the Relation Tuple
     * @param {string} [subjectId] SubjectID of the Relation Tuple
     * @param {string} [subjectSetNamespace] Namespace of the Subject Set
     * @param {string} [subjectSetObject] Object of the Subject Set
     * @param {string} [subjectSetRelation] Relation of the Subject Set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRelationTuples(namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, options?: any): AxiosPromise<void>;
    /**
     * Use this endpoint to patch one or more relation tuples.
     * @summary Patch Multiple Relation Tuples
     * @param {Array<PatchDelta>} [patchDelta]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchRelationTuples(patchDelta?: Array<PatchDelta>, options?: any): AxiosPromise<void>;
};
/**
 * WriteApi - interface
 * @export
 * @interface WriteApi
 */
export interface WriteApiInterface {
    /**
     * Use this endpoint to create a relation tuple.
     * @summary Create a Relation Tuple
     * @param {RelationQuery} [relationQuery]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WriteApiInterface
     */
    createRelationTuple(relationQuery?: RelationQuery, options?: AxiosRequestConfig): AxiosPromise<RelationQuery>;
    /**
     * Use this endpoint to delete relation tuples
     * @summary Delete Relation Tuples
     * @param {string} [namespace] Namespace of the Relation Tuple
     * @param {string} [object] Object of the Relation Tuple
     * @param {string} [relation] Relation of the Relation Tuple
     * @param {string} [subjectId] SubjectID of the Relation Tuple
     * @param {string} [subjectSetNamespace] Namespace of the Subject Set
     * @param {string} [subjectSetObject] Object of the Subject Set
     * @param {string} [subjectSetRelation] Relation of the Subject Set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WriteApiInterface
     */
    deleteRelationTuples(namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Use this endpoint to patch one or more relation tuples.
     * @summary Patch Multiple Relation Tuples
     * @param {Array<PatchDelta>} [patchDelta]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WriteApiInterface
     */
    patchRelationTuples(patchDelta?: Array<PatchDelta>, options?: AxiosRequestConfig): AxiosPromise<void>;
}
/**
 * WriteApi - object-oriented interface
 * @export
 * @class WriteApi
 * @extends {BaseAPI}
 */
export declare class WriteApi extends BaseAPI implements WriteApiInterface {
    /**
     * Use this endpoint to create a relation tuple.
     * @summary Create a Relation Tuple
     * @param {RelationQuery} [relationQuery]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WriteApi
     */
    createRelationTuple(relationQuery?: RelationQuery, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RelationQuery>>;
    /**
     * Use this endpoint to delete relation tuples
     * @summary Delete Relation Tuples
     * @param {string} [namespace] Namespace of the Relation Tuple
     * @param {string} [object] Object of the Relation Tuple
     * @param {string} [relation] Relation of the Relation Tuple
     * @param {string} [subjectId] SubjectID of the Relation Tuple
     * @param {string} [subjectSetNamespace] Namespace of the Subject Set
     * @param {string} [subjectSetObject] Object of the Subject Set
     * @param {string} [subjectSetRelation] Relation of the Subject Set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WriteApi
     */
    deleteRelationTuples(namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Use this endpoint to patch one or more relation tuples.
     * @summary Patch Multiple Relation Tuples
     * @param {Array<PatchDelta>} [patchDelta]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WriteApi
     */
    patchRelationTuples(patchDelta?: Array<PatchDelta>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
}
